{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract NuCypherToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract WorkLockInterface",
          "name": "_workLock",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_tStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "MergeRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investigator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "testTarget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "StateVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "UpgradeFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseRate",
          "type": "uint256"
        }
      ],
      "name": "VestingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "currentPeriodSupply",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_unlockingDuration",
          "type": "uint16"
        }
      ],
      "name": "depositFromWorkLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "finishUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getCompletedWork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getUnvestedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgrade",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingProvider",
          "type": "address"
        }
      ],
      "name": "requestMerge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_measureWork",
          "type": "bool"
        }
      ],
      "name": "setWorkMeasurement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_releaseTimestamp",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_releaseRate",
          "type": "uint256[]"
        }
      ],
      "name": "setupVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_penalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_investigator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "slashStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "stub1",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "stub2",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "lastCommittedPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "stub4",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stub5",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "stub6",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "stub7",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flags",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingReleaseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingReleaseRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reservedSlot4",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservedSlot5",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportsHistory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tStaking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract NuCypherToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalStakedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalStakedForAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testTarget",
          "type": "address"
        }
      ],
      "name": "verifyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workLock",
      "outputs": [
        {
          "internalType": "contract WorkLockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "11": "contracts/contracts/NuCypherToken.sol",
    "14": "contracts/contracts/StakingEscrow.sol",
    "20": "contracts/contracts/lib/Bits.sol",
    "26": "contracts/contracts/proxy/Upgradeable.sol",
    "31": "contracts/threshold/IStaking.sol",
    "34": "contracts/zeppelin/ownership/Ownable.sol",
    "36": "contracts/zeppelin/token/ERC20/ERC20.sol",
    "37": "contracts/zeppelin/token/ERC20/ERC20Detailed.sol",
    "38": "contracts/zeppelin/token/ERC20/IERC20.sol",
    "39": "contracts/zeppelin/token/ERC20/SafeERC20.sol",
    "40": "contracts/zeppelin/utils/Address.sol",
    "8": "contracts/aragon/interfaces/IERC900History.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/StakingEscrow.sol",
    "exportedSymbols": {
      "Address": [
        14756
      ],
      "Bits": [
        7528
      ],
      "ERC20": [
        14103
      ],
      "ERC20Detailed": [
        14165
      ],
      "IERC20": [
        14235
      ],
      "IERC900History": [
        23
      ],
      "IStaking": [
        13145
      ],
      "Math": [
        13233
      ],
      "NuCypherToken": [
        751
      ],
      "Ownable": [
        13666
      ],
      "SafeERC20": [
        14459
      ],
      "StakingEscrow": [
        5258
      ],
      "StakingEscrowStub": [
        4354
      ],
      "TokenRecipient": [
        765
      ],
      "Upgradeable": [
        10885
      ],
      "WorkLockInterface": [
        4267
      ]
    },
    "id": 5259,
    "license": "AGPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4252,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "47:23:14"
      },
      {
        "absolutePath": "contracts/aragon/interfaces/IERC900History.sol",
        "file": "../aragon/interfaces/IERC900History.sol",
        "id": 4253,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 24,
        "src": "73:49:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/NuCypherToken.sol",
        "file": "./NuCypherToken.sol",
        "id": 4254,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 766,
        "src": "123:29:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/lib/Bits.sol",
        "file": "./lib/Bits.sol",
        "id": 4255,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 7529,
        "src": "153:24:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/proxy/Upgradeable.sol",
        "file": "./proxy/Upgradeable.sol",
        "id": 4256,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 10886,
        "src": "178:33:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/zeppelin/math/Math.sol",
        "file": "../zeppelin/math/Math.sol",
        "id": 4257,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 13234,
        "src": "212:35:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/zeppelin/token/ERC20/SafeERC20.sol",
        "file": "../zeppelin/token/ERC20/SafeERC20.sol",
        "id": 4258,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 14460,
        "src": "248:47:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/threshold/IStaking.sol",
        "file": "../threshold/IStaking.sol",
        "id": 4259,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5259,
        "sourceUnit": 13146,
        "src": "296:35:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "WorkLockInterface",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4260,
          "nodeType": "StructuredDocumentation",
          "src": "334:35:14",
          "text": " @notice WorkLock interface"
        },
        "fullyImplemented": false,
        "id": 4267,
        "linearizedBaseContracts": [
          4267
        ],
        "name": "WorkLockInterface",
        "nameLocation": "380:17:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "fc0c546a",
            "id": 4266,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "token",
            "nameLocation": "413:5:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4261,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "418:2:14"
            },
            "returnParameters": {
              "id": 4265,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4264,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4266,
                  "src": "444:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                    "typeString": "contract NuCypherToken"
                  },
                  "typeName": {
                    "id": 4263,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4262,
                      "name": "NuCypherToken",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 751,
                      "src": "444:13:14"
                    },
                    "referencedDeclaration": 751,
                    "src": "444:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NuCypherToken_$751",
                      "typeString": "contract NuCypherToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "443:15:14"
            },
            "scope": 4267,
            "src": "404:55:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5259,
        "src": "370:91:14",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4269,
              "name": "Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10885,
              "src": "655:11:14"
            },
            "id": 4270,
            "nodeType": "InheritanceSpecifier",
            "src": "655:11:14"
          }
        ],
        "canonicalName": "StakingEscrowStub",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4268,
          "nodeType": "StructuredDocumentation",
          "src": "464:160:14",
          "text": " @title StakingEscrowStub\n @notice Stub is used to deploy main StakingEscrow after all other contract and make some variables immutable\n @dev |v1.1.0|"
        },
        "fullyImplemented": true,
        "id": 4354,
        "linearizedBaseContracts": [
          4354,
          10885,
          13666
        ],
        "name": "StakingEscrowStub",
        "nameLocation": "634:17:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "fc0c546a",
            "id": 4273,
            "mutability": "immutable",
            "name": "token",
            "nameLocation": "704:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 4354,
            "src": "673:36:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_NuCypherToken_$751",
              "typeString": "contract NuCypherToken"
            },
            "typeName": {
              "id": 4272,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4271,
                "name": "NuCypherToken",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 751,
                "src": "673:13:14"
              },
              "referencedDeclaration": 751,
              "src": "673:13:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                "typeString": "contract NuCypherToken"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "407f8001",
            "id": 4276,
            "mutability": "immutable",
            "name": "secondsPerPeriod",
            "nameLocation": "770:16:14",
            "nodeType": "VariableDeclaration",
            "scope": 4354,
            "src": "746:44:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 4274,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "746:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 4275,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "789:1:14",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3ac5743d",
            "id": 4279,
            "mutability": "immutable",
            "name": "minLockedPeriods",
            "nameLocation": "820:16:14",
            "nodeType": "VariableDeclaration",
            "scope": 4354,
            "src": "796:44:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint16",
              "typeString": "uint16"
            },
            "typeName": {
              "id": 4277,
              "name": "uint16",
              "nodeType": "ElementaryTypeName",
              "src": "796:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint16",
                "typeString": "uint16"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 4278,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "839:1:14",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8cab6c4f",
            "id": 4281,
            "mutability": "immutable",
            "name": "minAllowableLockedTokens",
            "nameLocation": "871:24:14",
            "nodeType": "VariableDeclaration",
            "scope": 4354,
            "src": "846:49:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4280,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "846:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "6fb653a2",
            "id": 4283,
            "mutability": "immutable",
            "name": "maxAllowableLockedTokens",
            "nameLocation": "926:24:14",
            "nodeType": "VariableDeclaration",
            "scope": 4354,
            "src": "901:49:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4282,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "901:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 4318,
              "nodeType": "Block",
              "src": "1378:245:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4295,
                                "name": "_token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4287,
                                "src": "1396:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                  "typeString": "contract NuCypherToken"
                                }
                              },
                              "id": 4296,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "totalSupply",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 13740,
                              "src": "1396:18:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                "typeString": "function () view external returns (uint256)"
                              }
                            },
                            "id": 4297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1396:20:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1419:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1396:24:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4300,
                            "name": "_maxAllowableLockedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4291,
                            "src": "1436:25:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1465:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1436:30:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1396:70:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4294,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1388:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 4304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1388:79:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4305,
                  "nodeType": "ExpressionStatement",
                  "src": "1388:79:14"
                },
                {
                  "expression": {
                    "id": 4308,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4306,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4273,
                      "src": "1478:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NuCypherToken_$751",
                        "typeString": "contract NuCypherToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4307,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4287,
                      "src": "1486:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NuCypherToken_$751",
                        "typeString": "contract NuCypherToken"
                      }
                    },
                    "src": "1478:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NuCypherToken_$751",
                      "typeString": "contract NuCypherToken"
                    }
                  },
                  "id": 4309,
                  "nodeType": "ExpressionStatement",
                  "src": "1478:14:14"
                },
                {
                  "expression": {
                    "id": 4312,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4310,
                      "name": "minAllowableLockedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4281,
                      "src": "1502:24:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4311,
                      "name": "_minAllowableLockedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4289,
                      "src": "1529:25:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1502:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4313,
                  "nodeType": "ExpressionStatement",
                  "src": "1502:52:14"
                },
                {
                  "expression": {
                    "id": 4316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4314,
                      "name": "maxAllowableLockedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4283,
                      "src": "1564:24:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4315,
                      "name": "_maxAllowableLockedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4291,
                      "src": "1591:25:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1564:52:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4317,
                  "nodeType": "ExpressionStatement",
                  "src": "1564:52:14"
                }
              ]
            },
            "documentation": {
              "id": 4284,
              "nodeType": "StructuredDocumentation",
              "src": "957:282:14",
              "text": " @notice Predefines some variables for use when deploying other contracts\n @param _token Token contract\n @param _minAllowableLockedTokens Min amount of tokens that can be locked\n @param _maxAllowableLockedTokens Max amount of tokens that can be locked"
            },
            "id": 4319,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4292,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4287,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "1279:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4319,
                  "src": "1265:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                    "typeString": "contract NuCypherToken"
                  },
                  "typeName": {
                    "id": 4286,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4285,
                      "name": "NuCypherToken",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 751,
                      "src": "1265:13:14"
                    },
                    "referencedDeclaration": 751,
                    "src": "1265:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NuCypherToken_$751",
                      "typeString": "contract NuCypherToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4289,
                  "mutability": "mutable",
                  "name": "_minAllowableLockedTokens",
                  "nameLocation": "1303:25:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4319,
                  "src": "1295:33:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4288,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1295:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4291,
                  "mutability": "mutable",
                  "name": "_maxAllowableLockedTokens",
                  "nameLocation": "1346:25:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4319,
                  "src": "1338:33:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4290,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1338:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1255:122:14"
            },
            "returnParameters": {
              "id": 4293,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1378:0:14"
            },
            "scope": 4354,
            "src": "1244:379:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              10779
            ],
            "body": {
              "id": 4352,
              "nodeType": "Block",
              "src": "1791:213:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4329,
                        "name": "_testTarget",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4322,
                        "src": "1819:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4326,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "1801:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_StakingEscrowStub_$4354_$",
                          "typeString": "type(contract super StakingEscrowStub)"
                        }
                      },
                      "id": 4328,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "verifyState",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10779,
                      "src": "1801:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4330,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1801:30:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4331,
                  "nodeType": "ExpressionStatement",
                  "src": "1801:30:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 4338,
                                      "name": "_testTarget",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4322,
                                      "src": "1943:11:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "expression": {
                                        "expression": {
                                          "id": 4339,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "1956:4:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_StakingEscrowStub_$4354",
                                            "typeString": "contract StakingEscrowStub"
                                          }
                                        },
                                        "id": 4340,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "token",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 4273,
                                        "src": "1956:10:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_NuCypherToken_$751_$",
                                          "typeString": "function () view external returns (contract NuCypherToken)"
                                        }
                                      },
                                      "id": 4341,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "1956:19:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    ],
                                    "id": 4337,
                                    "name": "delegateGet",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [
                                      10834,
                                      10858,
                                      10884
                                    ],
                                    "referencedDeclaration": 10834,
                                    "src": "1931:11:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$_t_uint256_$",
                                      "typeString": "function (address,bytes4) returns (uint256)"
                                    }
                                  },
                                  "id": 4342,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1931:45:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 4336,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1923:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint160_$",
                                  "typeString": "type(uint160)"
                                },
                                "typeName": {
                                  "id": 4335,
                                  "name": "uint160",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1923:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4343,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1923:54:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            ],
                            "id": 4334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1915:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4333,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1915:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1915:63:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 4347,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4273,
                              "src": "1990:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                "typeString": "contract NuCypherToken"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                "typeString": "contract NuCypherToken"
                              }
                            ],
                            "id": 4346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1982:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4345,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1982:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1982:14:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1915:81:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4332,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1907:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 4350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1907:90:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4351,
                  "nodeType": "ExpressionStatement",
                  "src": "1907:90:14"
                }
              ]
            },
            "documentation": {
              "id": 4320,
              "nodeType": "StructuredDocumentation",
              "src": "1629:91:14",
              "text": "@dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`"
            },
            "functionSelector": "b9626d21",
            "id": 4353,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyState",
            "nameLocation": "1734:11:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4324,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1774:8:14"
            },
            "parameters": {
              "id": 4323,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4322,
                  "mutability": "mutable",
                  "name": "_testTarget",
                  "nameLocation": "1754:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4353,
                  "src": "1746:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4321,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1746:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1745:21:14"
            },
            "returnParameters": {
              "id": 4325,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1791:0:14"
            },
            "scope": 4354,
            "src": "1725:279:14",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 5259,
        "src": "625:1381:14",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4356,
              "name": "Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10885,
              "src": "2201:11:14"
            },
            "id": 4357,
            "nodeType": "InheritanceSpecifier",
            "src": "2201:11:14"
          },
          {
            "baseName": {
              "id": 4358,
              "name": "IERC900History",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23,
              "src": "2214:14:14"
            },
            "id": 4359,
            "nodeType": "InheritanceSpecifier",
            "src": "2214:14:14"
          }
        ],
        "canonicalName": "StakingEscrow",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4355,
          "nodeType": "StructuredDocumentation",
          "src": "2009:165:14",
          "text": " @title StakingEscrow\n @notice Contract holds and locks stakers tokens.\n Each staker that locks their tokens will receive some compensation\n @dev |v6.2.2|"
        },
        "fullyImplemented": true,
        "id": 5258,
        "linearizedBaseContracts": [
          5258,
          23,
          10885,
          13666
        ],
        "name": "StakingEscrow",
        "nameLocation": "2184:13:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 4362,
            "libraryName": {
              "id": 4360,
              "name": "Bits",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7528,
              "src": "2242:4:14"
            },
            "nodeType": "UsingForDirective",
            "src": "2236:23:14",
            "typeName": {
              "id": 4361,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2251:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 4366,
            "libraryName": {
              "id": 4363,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14459,
              "src": "2270:9:14"
            },
            "nodeType": "UsingForDirective",
            "src": "2264:34:14",
            "typeName": {
              "id": 4365,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4364,
                "name": "NuCypherToken",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 751,
                "src": "2284:13:14"
              },
              "referencedDeclaration": 751,
              "src": "2284:13:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                "typeString": "contract NuCypherToken"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4367,
              "nodeType": "StructuredDocumentation",
              "src": "2304:142:14",
              "text": " @notice Signals that tokens were deposited\n @param staker Staker address\n @param value Amount deposited (in NuNits)"
            },
            "id": 4373,
            "name": "Deposited",
            "nameLocation": "2457:9:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4372,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4369,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "2483:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4373,
                  "src": "2467:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4368,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2467:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4371,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "2499:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4373,
                  "src": "2491:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4370,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2491:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2466:39:14"
            },
            "src": "2451:55:14"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4374,
              "nodeType": "StructuredDocumentation",
              "src": "2512:159:14",
              "text": " @notice Signals that NU tokens were withdrawn to the staker\n @param staker Staker address\n @param value Amount withdraws (in NuNits)"
            },
            "id": 4380,
            "name": "Withdrawn",
            "nameLocation": "2682:9:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4376,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "2708:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4380,
                  "src": "2692:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4375,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2692:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4378,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "2724:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4380,
                  "src": "2716:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4377,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2716:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2691:39:14"
            },
            "src": "2676:55:14"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4381,
              "nodeType": "StructuredDocumentation",
              "src": "2737:253:14",
              "text": " @notice Signals that the staker was slashed\n @param staker Staker address\n @param penalty Slashing penalty\n @param investigator Investigator address\n @param reward Value of reward provided to investigator (in NuNits)"
            },
            "id": 4391,
            "name": "Slashed",
            "nameLocation": "3001:7:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4383,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "3025:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4391,
                  "src": "3009:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4382,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3009:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4385,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "penalty",
                  "nameLocation": "3041:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4391,
                  "src": "3033:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3033:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4387,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investigator",
                  "nameLocation": "3066:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4391,
                  "src": "3050:28:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4386,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3050:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4389,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "reward",
                  "nameLocation": "3088:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4391,
                  "src": "3080:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4388,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3080:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3008:87:14"
            },
            "src": "2995:101:14"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4392,
              "nodeType": "StructuredDocumentation",
              "src": "3102:201:14",
              "text": " @notice Signals that vesting parameters were set for the staker\n @param staker Staker address\n @param releaseTimestamp Release timestamp\n @param releaseRate Release rate"
            },
            "id": 4400,
            "name": "VestingSet",
            "nameLocation": "3314:10:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4394,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "3341:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4400,
                  "src": "3325:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4393,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3325:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4396,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "releaseTimestamp",
                  "nameLocation": "3357:16:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4400,
                  "src": "3349:24:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4395,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3349:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4398,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "releaseRate",
                  "nameLocation": "3383:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4400,
                  "src": "3375:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3375:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3324:71:14"
            },
            "src": "3308:88:14"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4401,
              "nodeType": "StructuredDocumentation",
              "src": "3402:177:14",
              "text": " @notice Signals that the staker requested merge with T staking contract\n @param staker Staker address\n @param stakingProvider Staking provider address"
            },
            "id": 4407,
            "name": "MergeRequested",
            "nameLocation": "3590:14:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4403,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "3621:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4407,
                  "src": "3605:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4402,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3605:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4405,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "3645:15:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4407,
                  "src": "3629:31:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3629:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3604:57:14"
            },
            "src": "3584:78:14"
          },
          {
            "canonicalName": "StakingEscrow.StakerInfo",
            "id": 4445,
            "members": [
              {
                "constant": false,
                "id": 4409,
                "mutability": "mutable",
                "name": "value",
                "nameLocation": "3704:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "3696:13:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4408,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3696:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4411,
                "mutability": "mutable",
                "name": "stub1",
                "nameLocation": "3727:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "3720:12:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 4410,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "3720:6:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4413,
                "mutability": "mutable",
                "name": "stub2",
                "nameLocation": "3814:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "3807:12:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 4412,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "3807:6:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4415,
                "mutability": "mutable",
                "name": "lastCommittedPeriod",
                "nameLocation": "3875:19:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "3868:26:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 4414,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "3868:6:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4417,
                "mutability": "mutable",
                "name": "stub4",
                "nameLocation": "3947:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "3940:12:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 4416,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "3940:6:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4419,
                "mutability": "mutable",
                "name": "stub5",
                "nameLocation": "4012:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4004:13:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4418,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4004:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4421,
                "mutability": "mutable",
                "name": "stub6",
                "nameLocation": "4067:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4060:12:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 4420,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "4060:6:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4423,
                "mutability": "mutable",
                "name": "stub7",
                "nameLocation": "4127:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4119:13:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4422,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4119:7:14",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4425,
                "mutability": "mutable",
                "name": "flags",
                "nameLocation": "4177:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4169:13:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4424,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4169:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4427,
                "mutability": "mutable",
                "name": "vestingReleaseTimestamp",
                "nameLocation": "4264:23:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4256:31:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4426,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4256:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4429,
                "mutability": "mutable",
                "name": "vestingReleaseRate",
                "nameLocation": "4305:18:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4297:26:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4428,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4297:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4431,
                "mutability": "mutable",
                "name": "stakingProvider",
                "nameLocation": "4341:15:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4333:23:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4430,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4333:7:14",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4433,
                "mutability": "mutable",
                "name": "reservedSlot4",
                "nameLocation": "4375:13:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4367:21:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4432,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4367:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4435,
                "mutability": "mutable",
                "name": "reservedSlot5",
                "nameLocation": "4406:13:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4398:21:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4434,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4398:7:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4438,
                "mutability": "mutable",
                "name": "stub8",
                "nameLocation": "4440:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4430:15:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                  "typeString": "uint256[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 4436,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4430:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4437,
                  "nodeType": "ArrayTypeName",
                  "src": "4430:9:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                    "typeString": "uint256[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4441,
                "mutability": "mutable",
                "name": "stub9",
                "nameLocation": "4497:5:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4487:15:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                  "typeString": "uint256[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 4439,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4487:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4440,
                  "nodeType": "ArrayTypeName",
                  "src": "4487:9:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                    "typeString": "uint256[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4444,
                "mutability": "mutable",
                "name": "stub10",
                "nameLocation": "4551:6:14",
                "nodeType": "VariableDeclaration",
                "scope": 4445,
                "src": "4541:16:14",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                  "typeString": "uint128[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 4442,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "4541:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "id": 4443,
                  "nodeType": "ArrayTypeName",
                  "src": "4541:9:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                    "typeString": "uint128[]"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "StakerInfo",
            "nameLocation": "3675:10:14",
            "nodeType": "StructDefinition",
            "scope": 5258,
            "src": "3668:924:14",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "fc0c546a",
            "id": 4448,
            "mutability": "immutable",
            "name": "token",
            "nameLocation": "4743:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4712:36:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_NuCypherToken_$751",
              "typeString": "contract NuCypherToken"
            },
            "typeName": {
              "id": 4447,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4446,
                "name": "NuCypherToken",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 751,
                "src": "4712:13:14"
              },
              "referencedDeclaration": 751,
              "src": "4712:13:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                "typeString": "contract NuCypherToken"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "1c7fd532",
            "id": 4451,
            "mutability": "immutable",
            "name": "workLock",
            "nameLocation": "4789:8:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4754:43:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
              "typeString": "contract WorkLockInterface"
            },
            "typeName": {
              "id": 4450,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4449,
                "name": "WorkLockInterface",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4267,
                "src": "4754:17:14"
              },
              "referencedDeclaration": 4267,
              "src": "4754:17:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                "typeString": "contract WorkLockInterface"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "dbaa0fc6",
            "id": 4454,
            "mutability": "immutable",
            "name": "tStaking",
            "nameLocation": "4829:8:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4803:34:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IStaking_$13145",
              "typeString": "contract IStaking"
            },
            "typeName": {
              "id": 4453,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4452,
                "name": "IStaking",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 13145,
                "src": "4803:8:14"
              },
              "referencedDeclaration": 13145,
              "src": "4803:8:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IStaking_$13145",
                "typeString": "contract IStaking"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4456,
            "mutability": "mutable",
            "name": "stub1",
            "nameLocation": "4860:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4844:21:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint128",
              "typeString": "uint128"
            },
            "typeName": {
              "id": 4455,
              "name": "uint128",
              "nodeType": "ElementaryTypeName",
              "src": "4844:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint128",
                "typeString": "uint128"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "204612a8",
            "id": 4458,
            "mutability": "mutable",
            "name": "currentPeriodSupply",
            "nameLocation": "4926:19:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4911:34:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint128",
              "typeString": "uint128"
            },
            "typeName": {
              "id": 4457,
              "name": "uint128",
              "nodeType": "ElementaryTypeName",
              "src": "4911:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint128",
                "typeString": "uint128"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4460,
            "mutability": "mutable",
            "name": "stub2",
            "nameLocation": "4992:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "4977:20:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint16",
              "typeString": "uint16"
            },
            "typeName": {
              "id": 4459,
              "name": "uint16",
              "nodeType": "ElementaryTypeName",
              "src": "4977:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint16",
                "typeString": "uint16"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "4e745f1f",
            "id": 4465,
            "mutability": "mutable",
            "name": "stakerInfo",
            "nameLocation": "5083:10:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5044:49:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
              "typeString": "mapping(address => struct StakingEscrow.StakerInfo)"
            },
            "typeName": {
              "id": 4464,
              "keyType": {
                "id": 4461,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5053:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5044:31:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                "typeString": "mapping(address => struct StakingEscrow.StakerInfo)"
              },
              "valueType": {
                "id": 4463,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4462,
                  "name": "StakerInfo",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4445,
                  "src": "5064:10:14"
                },
                "referencedDeclaration": 4445,
                "src": "5064:10:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                  "typeString": "struct StakingEscrow.StakerInfo"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "fd5e6dd1",
            "id": 4468,
            "mutability": "mutable",
            "name": "stakers",
            "nameLocation": "5116:7:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5099:24:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 4466,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5099:7:14",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 4467,
              "nodeType": "ArrayTypeName",
              "src": "5099:9:14",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4472,
            "mutability": "mutable",
            "name": "stub3",
            "nameLocation": "5166:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5129:42:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 4471,
              "keyType": {
                "id": 4469,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5138:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5129:28:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 4470,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5149:7:14",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4476,
            "mutability": "mutable",
            "name": "stub4",
            "nameLocation": "5250:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5214:41:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint16_$_t_uint256_$",
              "typeString": "mapping(uint16 => uint256)"
            },
            "typeName": {
              "id": 4475,
              "keyType": {
                "id": 4473,
                "name": "uint16",
                "nodeType": "ElementaryTypeName",
                "src": "5223:6:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                }
              },
              "nodeType": "Mapping",
              "src": "5214:27:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint16_$_t_uint256_$",
                "typeString": "mapping(uint16 => uint256)"
              },
              "valueType": {
                "id": 4474,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5233:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4479,
            "mutability": "mutable",
            "name": "stub5",
            "nameLocation": "5314:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5296:23:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint128_$dyn_storage",
              "typeString": "uint128[]"
            },
            "typeName": {
              "baseType": {
                "id": 4477,
                "name": "uint128",
                "nodeType": "ElementaryTypeName",
                "src": "5296:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint128",
                  "typeString": "uint128"
                }
              },
              "id": 4478,
              "nodeType": "ArrayTypeName",
              "src": "5296:9:14",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                "typeString": "uint128[]"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4481,
            "mutability": "mutable",
            "name": "stub6",
            "nameLocation": "5377:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5361:21:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4480,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "5361:7:14",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4483,
            "mutability": "mutable",
            "name": "stub7",
            "nameLocation": "5437:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5421:21:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4482,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "5421:7:14",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4485,
            "mutability": "mutable",
            "name": "stub8",
            "nameLocation": "5495:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5479:21:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4484,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "5479:7:14",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4489,
            "mutability": "mutable",
            "name": "stub9",
            "nameLocation": "5571:5:14",
            "nodeType": "VariableDeclaration",
            "scope": 5258,
            "src": "5535:41:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint16_$_t_uint256_$",
              "typeString": "mapping(uint16 => uint256)"
            },
            "typeName": {
              "id": 4488,
              "keyType": {
                "id": 4486,
                "name": "uint16",
                "nodeType": "ElementaryTypeName",
                "src": "5544:6:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                }
              },
              "nodeType": "Mapping",
              "src": "5535:27:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint16_$_t_uint256_$",
                "typeString": "mapping(uint16 => uint256)"
              },
              "valueType": {
                "id": 4487,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5554:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 4550,
              "nodeType": "Block",
              "src": "6006:334:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4517,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4507,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 4503,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4493,
                                  "src": "6024:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                    "typeString": "contract NuCypherToken"
                                  }
                                },
                                "id": 4504,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalSupply",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 13740,
                                "src": "6024:18:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 4505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6024:20:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4506,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6047:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "6024:24:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4516,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 4512,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6091:1:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 4511,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "6083:7:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4510,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "6083:7:14",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4513,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6083:10:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 4508,
                                  "name": "_tStaking",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4499,
                                  "src": "6064:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStaking_$13145",
                                    "typeString": "contract IStaking"
                                  }
                                },
                                "id": 4509,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "stakedNu",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 13099,
                                "src": "6064:18:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 4514,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6064:30:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4515,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6098:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "6064:35:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6024:75:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 4532,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 4526,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 4520,
                                      "name": "_workLock",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4496,
                                      "src": "6124:9:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                                        "typeString": "contract WorkLockInterface"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                                        "typeString": "contract WorkLockInterface"
                                      }
                                    ],
                                    "id": 4519,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "6116:7:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4518,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "6116:7:14",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4521,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6116:18:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 4524,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6146:1:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 4523,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "6138:7:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4522,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "6138:7:14",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4525,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6138:10:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "6116:32:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                  "typeString": "contract NuCypherToken"
                                },
                                "id": 4531,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 4527,
                                      "name": "_workLock",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4496,
                                      "src": "6152:9:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                                        "typeString": "contract WorkLockInterface"
                                      }
                                    },
                                    "id": 4528,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "token",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 4266,
                                    "src": "6152:15:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_NuCypherToken_$751_$",
                                      "typeString": "function () view external returns (contract NuCypherToken)"
                                    }
                                  },
                                  "id": 4529,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6152:17:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                    "typeString": "contract NuCypherToken"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 4530,
                                  "name": "_token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4493,
                                  "src": "6173:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                    "typeString": "contract NuCypherToken"
                                  }
                                },
                                "src": "6152:27:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "6116:63:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 4533,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "6115:65:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6024:156:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e70757420616464726573736573206d757374206265206465706c6f79656420636f6e747261637473",
                        "id": 4535,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6194:44:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_12ba2f426b6921e3d0b1779669a6661204ae55bbb69740f575214b9ebb61d291",
                          "typeString": "literal_string \"Input addresses must be deployed contracts\""
                        },
                        "value": "Input addresses must be deployed contracts"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_12ba2f426b6921e3d0b1779669a6661204ae55bbb69740f575214b9ebb61d291",
                          "typeString": "literal_string \"Input addresses must be deployed contracts\""
                        }
                      ],
                      "id": 4502,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6016:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4536,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6016:232:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4537,
                  "nodeType": "ExpressionStatement",
                  "src": "6016:232:14"
                },
                {
                  "expression": {
                    "id": 4540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4538,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4448,
                      "src": "6259:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NuCypherToken_$751",
                        "typeString": "contract NuCypherToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4539,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4493,
                      "src": "6267:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NuCypherToken_$751",
                        "typeString": "contract NuCypherToken"
                      }
                    },
                    "src": "6259:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NuCypherToken_$751",
                      "typeString": "contract NuCypherToken"
                    }
                  },
                  "id": 4541,
                  "nodeType": "ExpressionStatement",
                  "src": "6259:14:14"
                },
                {
                  "expression": {
                    "id": 4544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4542,
                      "name": "workLock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4451,
                      "src": "6283:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                        "typeString": "contract WorkLockInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4543,
                      "name": "_workLock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4496,
                      "src": "6294:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                        "typeString": "contract WorkLockInterface"
                      }
                    },
                    "src": "6283:20:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                      "typeString": "contract WorkLockInterface"
                    }
                  },
                  "id": 4545,
                  "nodeType": "ExpressionStatement",
                  "src": "6283:20:14"
                },
                {
                  "expression": {
                    "id": 4548,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4546,
                      "name": "tStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4454,
                      "src": "6313:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$13145",
                        "typeString": "contract IStaking"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4547,
                      "name": "_tStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4499,
                      "src": "6324:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$13145",
                        "typeString": "contract IStaking"
                      }
                    },
                    "src": "6313:20:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$13145",
                      "typeString": "contract IStaking"
                    }
                  },
                  "id": 4549,
                  "nodeType": "ExpressionStatement",
                  "src": "6313:20:14"
                }
              ]
            },
            "documentation": {
              "id": 4490,
              "nodeType": "StructuredDocumentation",
              "src": "5623:265:14",
              "text": " @notice Constructor sets address of token contract and parameters for staking\n @param _token NuCypher token contract\n @param _workLock WorkLock contract. Zero address if there is no WorkLock\n @param _tStaking T token staking contract"
            },
            "id": 4551,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4493,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "5928:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4551,
                  "src": "5914:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_NuCypherToken_$751",
                    "typeString": "contract NuCypherToken"
                  },
                  "typeName": {
                    "id": 4492,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4491,
                      "name": "NuCypherToken",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 751,
                      "src": "5914:13:14"
                    },
                    "referencedDeclaration": 751,
                    "src": "5914:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NuCypherToken_$751",
                      "typeString": "contract NuCypherToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4496,
                  "mutability": "mutable",
                  "name": "_workLock",
                  "nameLocation": "5962:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4551,
                  "src": "5944:27:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                    "typeString": "contract WorkLockInterface"
                  },
                  "typeName": {
                    "id": 4495,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4494,
                      "name": "WorkLockInterface",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4267,
                      "src": "5944:17:14"
                    },
                    "referencedDeclaration": 4267,
                    "src": "5944:17:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                      "typeString": "contract WorkLockInterface"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4499,
                  "mutability": "mutable",
                  "name": "_tStaking",
                  "nameLocation": "5990:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4551,
                  "src": "5981:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStaking_$13145",
                    "typeString": "contract IStaking"
                  },
                  "typeName": {
                    "id": 4498,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4497,
                      "name": "IStaking",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 13145,
                      "src": "5981:8:14"
                    },
                    "referencedDeclaration": 13145,
                    "src": "5981:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$13145",
                      "typeString": "contract IStaking"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5904:101:14"
            },
            "returnParameters": {
              "id": 4501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6006:0:14"
            },
            "scope": 5258,
            "src": "5893:447:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4566,
              "nodeType": "Block",
              "src": "6447:96:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4561,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4555,
                              "name": "stakerInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4465,
                              "src": "6465:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                                "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                              }
                            },
                            "id": 4558,
                            "indexExpression": {
                              "expression": {
                                "id": 4556,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "6476:3:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4557,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6476:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6465:22:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                              "typeString": "struct StakingEscrow.StakerInfo storage ref"
                            }
                          },
                          "id": 4559,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4409,
                          "src": "6465:28:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4560,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6496:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6465:32:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616c6c6572206d7573742062652061207374616b6572",
                        "id": 4562,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6499:25:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6c03abf51d68ee9b559c997ce2b5c90d67daacaed4fa1c9e03112f73f7d62cb2",
                          "typeString": "literal_string \"Caller must be a staker\""
                        },
                        "value": "Caller must be a staker"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6c03abf51d68ee9b559c997ce2b5c90d67daacaed4fa1c9e03112f73f7d62cb2",
                          "typeString": "literal_string \"Caller must be a staker\""
                        }
                      ],
                      "id": 4554,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6457:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6457:68:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4564,
                  "nodeType": "ExpressionStatement",
                  "src": "6457:68:14"
                },
                {
                  "id": 4565,
                  "nodeType": "PlaceholderStatement",
                  "src": "6535:1:14"
                }
              ]
            },
            "documentation": {
              "id": 4552,
              "nodeType": "StructuredDocumentation",
              "src": "6346:70:14",
              "text": " @dev Checks the existence of a staker in the contract"
            },
            "id": 4567,
            "name": "onlyStaker",
            "nameLocation": "6430:10:14",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4553,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6440:2:14"
            },
            "src": "6421:122:14",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4582,
              "nodeType": "Block",
              "src": "6647:109:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4571,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6665:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6665:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 4575,
                              "name": "tStaking",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4454,
                              "src": "6687:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStaking_$13145",
                                "typeString": "contract IStaking"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IStaking_$13145",
                                "typeString": "contract IStaking"
                              }
                            ],
                            "id": 4574,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6679:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4573,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6679:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6679:17:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6665:31:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616c6c6572206d757374206265207468652054207374616b696e6720636f6e7472616374",
                        "id": 4578,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6698:39:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fe07d30d81458447ac846a10ff112e710c4f35339b89b0bb52c53ff08ed3c6f7",
                          "typeString": "literal_string \"Caller must be the T staking contract\""
                        },
                        "value": "Caller must be the T staking contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fe07d30d81458447ac846a10ff112e710c4f35339b89b0bb52c53ff08ed3c6f7",
                          "typeString": "literal_string \"Caller must be the T staking contract\""
                        }
                      ],
                      "id": 4570,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6657:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6657:81:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4580,
                  "nodeType": "ExpressionStatement",
                  "src": "6657:81:14"
                },
                {
                  "id": 4581,
                  "nodeType": "PlaceholderStatement",
                  "src": "6748:1:14"
                }
              ]
            },
            "documentation": {
              "id": 4568,
              "nodeType": "StructuredDocumentation",
              "src": "6549:57:14",
              "text": " @dev Checks caller is T staking contract"
            },
            "id": 4583,
            "name": "onlyTStakingContract",
            "nameLocation": "6620:20:14",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4569,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6640:2:14"
            },
            "src": "6611:145:14",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4598,
              "nodeType": "Block",
              "src": "6851:108:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4593,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4587,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6869:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6869:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 4591,
                              "name": "workLock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4451,
                              "src": "6891:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                                "typeString": "contract WorkLockInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_WorkLockInterface_$4267",
                                "typeString": "contract WorkLockInterface"
                              }
                            ],
                            "id": 4590,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6883:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4589,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6883:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4592,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6883:17:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6869:31:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616c6c6572206d7573742062652074686520576f726b4c6f636b20636f6e7472616374",
                        "id": 4594,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6902:38:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8986cc845ea9bc4df6b632d5493a023a8f87b52a02d42b2dd8512e2b11ec2142",
                          "typeString": "literal_string \"Caller must be the WorkLock contract\""
                        },
                        "value": "Caller must be the WorkLock contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8986cc845ea9bc4df6b632d5493a023a8f87b52a02d42b2dd8512e2b11ec2142",
                          "typeString": "literal_string \"Caller must be the WorkLock contract\""
                        }
                      ],
                      "id": 4586,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6861:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6861:80:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4596,
                  "nodeType": "ExpressionStatement",
                  "src": "6861:80:14"
                },
                {
                  "id": 4597,
                  "nodeType": "PlaceholderStatement",
                  "src": "6951:1:14"
                }
              ]
            },
            "documentation": {
              "id": 4584,
              "nodeType": "StructuredDocumentation",
              "src": "6762:56:14",
              "text": " @dev Checks caller is WorkLock contract"
            },
            "id": 4599,
            "name": "onlyWorkLock",
            "nameLocation": "6832:12:14",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4585,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6844:2:14"
            },
            "src": "6823:136:14",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4612,
              "nodeType": "Block",
              "src": "7171:49:14",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "baseExpression": {
                        "id": 4607,
                        "name": "stakerInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4465,
                        "src": "7188:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                          "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                        }
                      },
                      "id": 4609,
                      "indexExpression": {
                        "id": 4608,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4602,
                        "src": "7199:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "7188:19:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                        "typeString": "struct StakingEscrow.StakerInfo storage ref"
                      }
                    },
                    "id": 4610,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 4409,
                    "src": "7188:25:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4606,
                  "id": 4611,
                  "nodeType": "Return",
                  "src": "7181:32:14"
                }
              ]
            },
            "documentation": {
              "id": 4600,
              "nodeType": "StructuredDocumentation",
              "src": "7032:63:14",
              "text": " @notice Get all tokens belonging to the staker"
            },
            "functionSelector": "178b6de6",
            "id": 4613,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAllTokens",
            "nameLocation": "7109:12:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4603,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4602,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "7130:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4613,
                  "src": "7122:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4601,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7122:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7121:17:14"
            },
            "returnParameters": {
              "id": 4606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4605,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4613,
                  "src": "7162:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4604,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7162:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7161:9:14"
            },
            "scope": 5258,
            "src": "7100:120:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4625,
              "nodeType": "Block",
              "src": "7368:43:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 4621,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4448,
                        "src": "7385:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_NuCypherToken_$751",
                          "typeString": "contract NuCypherToken"
                        }
                      },
                      "id": 4622,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "totalSupply",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13740,
                      "src": "7385:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                        "typeString": "function () view external returns (uint256)"
                      }
                    },
                    "id": 4623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7385:19:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4620,
                  "id": 4624,
                  "nodeType": "Return",
                  "src": "7378:26:14"
                }
              ]
            },
            "documentation": {
              "id": 4614,
              "nodeType": "StructuredDocumentation",
              "src": "7226:62:14",
              "text": " @notice Get work that completed by the staker"
            },
            "functionSelector": "d094adbf",
            "id": 4626,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCompletedWork",
            "nameLocation": "7302:16:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4616,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "7327:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4626,
                  "src": "7319:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4615,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7319:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7318:17:14"
            },
            "returnParameters": {
              "id": 4620,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4619,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4626,
                  "src": "7359:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4618,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7359:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7358:9:14"
            },
            "scope": 5258,
            "src": "7293:118:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4640,
              "nodeType": "Block",
              "src": "7780:25:14",
              "statements": [
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 4638,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "7797:1:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 4637,
                  "id": 4639,
                  "nodeType": "Return",
                  "src": "7790:8:14"
                }
              ]
            },
            "documentation": {
              "id": 4627,
              "nodeType": "StructuredDocumentation",
              "src": "7485:174:14",
              "text": " @notice Stub for WorkLock\n @param _staker Staker\n @param _measureWork Value for `measureWork` parameter\n @return Work that was previously done"
            },
            "functionSelector": "49e5add4",
            "id": 4641,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4634,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4633,
                  "name": "onlyWorkLock",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4599,
                  "src": "7745:12:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "7745:12:14"
              }
            ],
            "name": "setWorkMeasurement",
            "nameLocation": "7673:18:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4629,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "7700:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4641,
                  "src": "7692:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4628,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7692:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4631,
                  "mutability": "mutable",
                  "name": "_measureWork",
                  "nameLocation": "7714:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4641,
                  "src": "7709:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4630,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7709:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7691:36:14"
            },
            "returnParameters": {
              "id": 4637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4636,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4641,
                  "src": "7767:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4635,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7767:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7766:9:14"
            },
            "scope": 5258,
            "src": "7664:141:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4707,
              "nodeType": "Block",
              "src": "8228:428:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4656,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4654,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4646,
                          "src": "8246:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8256:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8246:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416d6f756e74206f6620746f6b656e7320746f206465706f736974206d75737420626520737065636966696564",
                        "id": 4657,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8259:47:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_82b4e377bb5cd2e246577dbdc27005e88665027bbfbe79638a01c7d3544bba9b",
                          "typeString": "literal_string \"Amount of tokens to deposit must be specified\""
                        },
                        "value": "Amount of tokens to deposit must be specified"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_82b4e377bb5cd2e246577dbdc27005e88665027bbfbe79638a01c7d3544bba9b",
                          "typeString": "literal_string \"Amount of tokens to deposit must be specified\""
                        }
                      ],
                      "id": 4653,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8238:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8238:69:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4659,
                  "nodeType": "ExpressionStatement",
                  "src": "8238:69:14"
                },
                {
                  "assignments": [
                    4662
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4662,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "8336:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4707,
                      "src": "8317:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 4661,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4660,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "8317:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "8317:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4666,
                  "initialValue": {
                    "baseExpression": {
                      "id": 4663,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "8343:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 4665,
                    "indexExpression": {
                      "id": 4664,
                      "name": "_staker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4644,
                      "src": "8354:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8343:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8317:45:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 4675,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4670,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 4667,
                          "name": "info",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4662,
                          "src": "8415:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                            "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                          }
                        },
                        "id": 4668,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4409,
                        "src": "8415:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 4669,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8429:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "8415:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "id": 4674,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 4671,
                          "name": "info",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4662,
                          "src": "8434:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                            "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                          }
                        },
                        "id": 4672,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "lastCommittedPeriod",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4415,
                        "src": "8434:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 4673,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8462:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "8434:29:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "8415:48:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4683,
                  "nodeType": "IfStatement",
                  "src": "8411:100:14",
                  "trueBody": {
                    "id": 4682,
                    "nodeType": "Block",
                    "src": "8465:46:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4679,
                              "name": "_staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4644,
                              "src": "8492:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 4676,
                              "name": "stakers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4468,
                              "src": "8479:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 4678,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "8479:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 4680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8479:21:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4681,
                        "nodeType": "ExpressionStatement",
                        "src": "8479:21:14"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4687,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8543:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4688,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8543:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4691,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8563:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingEscrow_$5258",
                              "typeString": "contract StakingEscrow"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_StakingEscrow_$5258",
                              "typeString": "contract StakingEscrow"
                            }
                          ],
                          "id": 4690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8555:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4689,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8555:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8555:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4693,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4646,
                        "src": "8570:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4684,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4448,
                        "src": "8520:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_NuCypherToken_$751",
                          "typeString": "contract NuCypherToken"
                        }
                      },
                      "id": 4686,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14292,
                      "src": "8520:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$14235_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$14235_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 4694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8520:57:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4695,
                  "nodeType": "ExpressionStatement",
                  "src": "8520:57:14"
                },
                {
                  "expression": {
                    "id": 4700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 4696,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4662,
                        "src": "8587:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4698,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4409,
                      "src": "8587:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 4699,
                      "name": "_value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4646,
                      "src": "8601:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8587:20:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4701,
                  "nodeType": "ExpressionStatement",
                  "src": "8587:20:14"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4703,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4644,
                        "src": "8633:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4704,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4646,
                        "src": "8642:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4702,
                      "name": "Deposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4373,
                      "src": "8623:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4705,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8623:26:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4706,
                  "nodeType": "EmitStatement",
                  "src": "8618:31:14"
                }
              ]
            },
            "documentation": {
              "id": 4642,
              "nodeType": "StructuredDocumentation",
              "src": "7811:259:14",
              "text": " @notice Deposit tokens from WorkLock contract\n @param _staker Staker address\n @param _value Amount of tokens to deposit\n @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled"
            },
            "functionSelector": "171f03c2",
            "id": 4708,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4651,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4650,
                  "name": "onlyWorkLock",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4599,
                  "src": "8211:12:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "8211:12:14"
              }
            ],
            "name": "depositFromWorkLock",
            "nameLocation": "8084:19:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4649,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4644,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "8121:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4708,
                  "src": "8113:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4643,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8113:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4646,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "8146:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4708,
                  "src": "8138:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4645,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8138:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4648,
                  "mutability": "mutable",
                  "name": "_unlockingDuration",
                  "nameLocation": "8169:18:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4708,
                  "src": "8162:25:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 4647,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "8162:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8103:90:14"
            },
            "returnParameters": {
              "id": 4652,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8228:0:14"
            },
            "scope": 5258,
            "src": "8075:581:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4778,
              "nodeType": "Block",
              "src": "8843:561:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4717,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4711,
                          "src": "8861:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4718,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8870:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8861:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "56616c7565206d75737420626520737065636966696564",
                        "id": 4720,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8873:25:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f7c08cf8d146928211139ff294238106ad9053f09d6b971c5f0a51062f2f9750",
                          "typeString": "literal_string \"Value must be specified\""
                        },
                        "value": "Value must be specified"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f7c08cf8d146928211139ff294238106ad9053f09d6b971c5f0a51062f2f9750",
                          "typeString": "literal_string \"Value must be specified\""
                        }
                      ],
                      "id": 4716,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8853:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4721,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8853:46:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4722,
                  "nodeType": "ExpressionStatement",
                  "src": "8853:46:14"
                },
                {
                  "assignments": [
                    4725
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4725,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "8928:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4778,
                      "src": "8909:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 4724,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4723,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "8909:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "8909:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4730,
                  "initialValue": {
                    "baseExpression": {
                      "id": 4726,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "8935:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 4729,
                    "indexExpression": {
                      "expression": {
                        "id": 4727,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8946:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4728,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8946:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8935:22:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8909:48:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4741,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4738,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4732,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4711,
                            "src": "8988:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 4735,
                                  "name": "info",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4725,
                                  "src": "9015:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                    "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                  }
                                },
                                "id": 4736,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "stakingProvider",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4431,
                                "src": "9015:20:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 4733,
                                "name": "tStaking",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4454,
                                "src": "8997:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStaking_$13145",
                                  "typeString": "contract IStaking"
                                }
                              },
                              "id": 4734,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakedNu",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 13099,
                              "src": "8997:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 4737,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8997:39:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8988:48:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 4739,
                            "name": "info",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4725,
                            "src": "9040:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                              "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                            }
                          },
                          "id": 4740,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4409,
                          "src": "9040:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8988:62:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f75676820746f6b656e7320756e7374616b656420696e2054207374616b696e6720636f6e7472616374",
                        "id": 4742,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9064:50:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_28f5586f0cc198c576dafa4b5343e89596ac5df229057792de1b47f7acc30438",
                          "typeString": "literal_string \"Not enough tokens unstaked in T staking contract\""
                        },
                        "value": "Not enough tokens unstaked in T staking contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_28f5586f0cc198c576dafa4b5343e89596ac5df229057792de1b47f7acc30438",
                          "typeString": "literal_string \"Not enough tokens unstaked in T staking contract\""
                        }
                      ],
                      "id": 4731,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8967:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4743,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8967:157:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4744,
                  "nodeType": "ExpressionStatement",
                  "src": "8967:157:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4754,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4746,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4711,
                            "src": "9155:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 4748,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "9182:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 4749,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "9182:10:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 4747,
                              "name": "getUnvestedTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4834,
                              "src": "9164:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view returns (uint256)"
                              }
                            },
                            "id": 4750,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9164:29:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9155:38:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 4752,
                            "name": "info",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4725,
                            "src": "9197:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                              "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                            }
                          },
                          "id": 4753,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4409,
                          "src": "9197:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9155:52:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f75676820746f6b656e732072656c656173656420647572696e672076657374696e67",
                        "id": 4755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9221:43:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_48bd8cc4ad3bd20d0bea4d431066003b890aa896148d29ddfc662060514d66f5",
                          "typeString": "literal_string \"Not enough tokens released during vesting\""
                        },
                        "value": "Not enough tokens released during vesting"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_48bd8cc4ad3bd20d0bea4d431066003b890aa896148d29ddfc662060514d66f5",
                          "typeString": "literal_string \"Not enough tokens released during vesting\""
                        }
                      ],
                      "id": 4745,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9134:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9134:140:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4757,
                  "nodeType": "ExpressionStatement",
                  "src": "9134:140:14"
                },
                {
                  "expression": {
                    "id": 4762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 4758,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4725,
                        "src": "9284:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4760,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4409,
                      "src": "9284:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 4761,
                      "name": "_value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4711,
                      "src": "9298:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9284:20:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4763,
                  "nodeType": "ExpressionStatement",
                  "src": "9284:20:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4767,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "9334:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "9334:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4769,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4711,
                        "src": "9346:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4764,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4448,
                        "src": "9315:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_NuCypherToken_$751",
                          "typeString": "contract NuCypherToken"
                        }
                      },
                      "id": 4766,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14266,
                      "src": "9315:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$14235_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$14235_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 4770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9315:38:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4771,
                  "nodeType": "ExpressionStatement",
                  "src": "9315:38:14"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4773,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "9378:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "9378:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4775,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4711,
                        "src": "9390:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4772,
                      "name": "Withdrawn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4380,
                      "src": "9368:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9368:29:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4777,
                  "nodeType": "EmitStatement",
                  "src": "9363:34:14"
                }
              ]
            },
            "documentation": {
              "id": 4709,
              "nodeType": "StructuredDocumentation",
              "src": "8662:122:14",
              "text": " @notice Withdraw available amount of NU tokens to staker\n @param _value Amount of tokens to withdraw"
            },
            "functionSelector": "2e1a7d4d",
            "id": 4779,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4714,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4713,
                  "name": "onlyStaker",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4567,
                  "src": "8832:10:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "8832:10:14"
              }
            ],
            "name": "withdraw",
            "nameLocation": "8798:8:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4712,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4711,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "8815:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4779,
                  "src": "8807:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4710,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8807:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8806:16:14"
            },
            "returnParameters": {
              "id": 4715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8843:0:14"
            },
            "scope": 5258,
            "src": "8789:615:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4833,
              "nodeType": "Block",
              "src": "9566:485:14",
              "statements": [
                {
                  "assignments": [
                    4789
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4789,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "9595:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4833,
                      "src": "9576:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 4788,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4787,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "9576:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "9576:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4793,
                  "initialValue": {
                    "baseExpression": {
                      "id": 4790,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "9602:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 4792,
                    "indexExpression": {
                      "id": 4791,
                      "name": "_staker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4782,
                      "src": "9613:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9602:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9576:45:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4794,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4789,
                        "src": "9635:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4795,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "vestingReleaseTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4427,
                      "src": "9635:28:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "expression": {
                        "id": 4796,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9667:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 4797,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "9667:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9635:47:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4802,
                  "nodeType": "IfStatement",
                  "src": "9631:86:14",
                  "trueBody": {
                    "id": 4801,
                    "nodeType": "Block",
                    "src": "9684:33:14",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 4799,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9705:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 4786,
                        "id": 4800,
                        "nodeType": "Return",
                        "src": "9698:8:14"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4803,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4789,
                        "src": "9730:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4804,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "vestingReleaseRate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4429,
                      "src": "9730:23:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4805,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9757:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "9730:28:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4811,
                  "nodeType": "IfStatement",
                  "src": "9726:136:14",
                  "trueBody": {
                    "id": 4810,
                    "nodeType": "Block",
                    "src": "9760:102:14",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 4807,
                            "name": "info",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4789,
                            "src": "9841:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                              "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                            }
                          },
                          "id": 4808,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4409,
                          "src": "9841:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 4786,
                        "id": 4809,
                        "nodeType": "Return",
                        "src": "9834:17:14"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    4813
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4813,
                      "mutability": "mutable",
                      "name": "unvestedTokens",
                      "nameLocation": "9879:14:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4833,
                      "src": "9871:22:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4812,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9871:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4823,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4822,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 4814,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4789,
                              "src": "9897:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 4815,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "vestingReleaseTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4427,
                            "src": "9897:28:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "expression": {
                              "id": 4816,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "9928:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 4817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "9928:15:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9897:46:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 4819,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "9896:48:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "expression": {
                        "id": 4820,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4789,
                        "src": "9947:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4821,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "vestingReleaseRate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4429,
                      "src": "9947:23:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9896:74:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9871:99:14"
                },
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4827,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 4824,
                          "name": "info",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4789,
                          "src": "9987:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                            "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                          }
                        },
                        "id": 4825,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4409,
                        "src": "9987:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "id": 4826,
                        "name": "unvestedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4813,
                        "src": "10000:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9987:27:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 4830,
                      "name": "unvestedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4813,
                      "src": "10030:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4831,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "9987:57:14",
                    "trueExpression": {
                      "expression": {
                        "id": 4828,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4789,
                        "src": "10017:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4829,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4409,
                      "src": "10017:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4786,
                  "id": 4832,
                  "nodeType": "Return",
                  "src": "9980:64:14"
                }
              ]
            },
            "documentation": {
              "id": 4780,
              "nodeType": "StructuredDocumentation",
              "src": "9410:77:14",
              "text": " @notice Returns amount of not released yet tokens for staker"
            },
            "functionSelector": "c07b5d8c",
            "id": 4834,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getUnvestedTokens",
            "nameLocation": "9501:17:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4782,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "9527:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4834,
                  "src": "9519:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4781,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9519:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9518:17:14"
            },
            "returnParameters": {
              "id": 4786,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4785,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4834,
                  "src": "9557:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4784,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9557:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9556:9:14"
            },
            "scope": 5258,
            "src": "9492:559:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4931,
              "nodeType": "Block",
              "src": "10536:775:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4860,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 4850,
                              "name": "_stakers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4838,
                              "src": "10554:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            },
                            "id": 4851,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10554:15:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 4852,
                              "name": "_releaseTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4841,
                              "src": "10573:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4853,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10573:24:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10554:43:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4859,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 4855,
                              "name": "_releaseTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4841,
                              "src": "10613:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4856,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10613:24:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 4857,
                              "name": "_releaseRate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4844,
                              "src": "10641:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4858,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10641:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10613:47:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "10554:106:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e70757420617272617973206d75737420686176652073616d65206e756d626572206f6620656c656d656e7473",
                        "id": 4861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10674:48:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_39cb604bc76f2a2530b1987b86568deb9f436b5a50210242c0522ddd57912057",
                          "typeString": "literal_string \"Input arrays must have same number of elements\""
                        },
                        "value": "Input arrays must have same number of elements"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_39cb604bc76f2a2530b1987b86568deb9f436b5a50210242c0522ddd57912057",
                          "typeString": "literal_string \"Input arrays must have same number of elements\""
                        }
                      ],
                      "id": 4849,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10546:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4862,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10546:186:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4863,
                  "nodeType": "ExpressionStatement",
                  "src": "10546:186:14"
                },
                {
                  "body": {
                    "id": 4929,
                    "nodeType": "Block",
                    "src": "10788:517:14",
                    "statements": [
                      {
                        "assignments": [
                          4876
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4876,
                            "mutability": "mutable",
                            "name": "staker",
                            "nameLocation": "10810:6:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 4929,
                            "src": "10802:14:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 4875,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10802:7:14",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4880,
                        "initialValue": {
                          "baseExpression": {
                            "id": 4877,
                            "name": "_stakers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4838,
                            "src": "10819:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 4879,
                          "indexExpression": {
                            "id": 4878,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4865,
                            "src": "10828:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10819:11:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10802:28:14"
                      },
                      {
                        "assignments": [
                          4883
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4883,
                            "mutability": "mutable",
                            "name": "info",
                            "nameLocation": "10863:4:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 4929,
                            "src": "10844:23:14",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                              "typeString": "struct StakingEscrow.StakerInfo"
                            },
                            "typeName": {
                              "id": 4882,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 4881,
                                "name": "StakerInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 4445,
                                "src": "10844:10:14"
                              },
                              "referencedDeclaration": 4445,
                              "src": "10844:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4887,
                        "initialValue": {
                          "baseExpression": {
                            "id": 4884,
                            "name": "stakerInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4465,
                            "src": "10870:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                              "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                            }
                          },
                          "id": 4886,
                          "indexExpression": {
                            "id": 4885,
                            "name": "staker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4876,
                            "src": "10881:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10870:18:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                            "typeString": "struct StakingEscrow.StakerInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10844:44:14"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4892,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 4889,
                                  "name": "info",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4883,
                                  "src": "10910:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                    "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                  }
                                },
                                "id": 4890,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "vestingReleaseTimestamp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4427,
                                "src": "10910:28:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 4891,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10942:1:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "10910:33:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "56657374696e6720706172616d65746572732063616e20626520736574206f6e6c79206f6e6365",
                              "id": 4893,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10945:41:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5ba3e2a12041ff8878c7ef1061632861d0d31599de5484e7026a0874ce9a723f",
                                "typeString": "literal_string \"Vesting parameters can be set only once\""
                              },
                              "value": "Vesting parameters can be set only once"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5ba3e2a12041ff8878c7ef1061632861d0d31599de5484e7026a0874ce9a723f",
                                "typeString": "literal_string \"Vesting parameters can be set only once\""
                              }
                            ],
                            "id": 4888,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10902:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4894,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10902:85:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4895,
                        "nodeType": "ExpressionStatement",
                        "src": "10902:85:14"
                      },
                      {
                        "expression": {
                          "id": 4902,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 4896,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4883,
                              "src": "11001:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 4898,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "vestingReleaseTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4427,
                            "src": "11001:28:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 4899,
                              "name": "_releaseTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4841,
                              "src": "11032:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4901,
                            "indexExpression": {
                              "id": 4900,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4865,
                              "src": "11050:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11032:20:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11001:51:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4903,
                        "nodeType": "ExpressionStatement",
                        "src": "11001:51:14"
                      },
                      {
                        "expression": {
                          "id": 4910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 4904,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4883,
                              "src": "11066:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 4906,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "vestingReleaseRate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4429,
                            "src": "11066:23:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 4907,
                              "name": "_releaseRate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4844,
                              "src": "11092:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4909,
                            "indexExpression": {
                              "id": 4908,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4865,
                              "src": "11105:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11092:15:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11066:41:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4911,
                        "nodeType": "ExpressionStatement",
                        "src": "11066:41:14"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4917,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 4914,
                                    "name": "staker",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4876,
                                    "src": "11147:6:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 4913,
                                  "name": "getUnvestedTokens",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4834,
                                  "src": "11129:17:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 4915,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11129:25:14",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 4916,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11157:1:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11129:29:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "56657374696e6720706172616d6574657273206d757374206265207365742070726f7065726c79",
                              "id": 4918,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11160:41:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e45cb432e044acd170f9513a178a1e917504744b93ae725e9c89eb92d22f4f61",
                                "typeString": "literal_string \"Vesting parameters must be set properly\""
                              },
                              "value": "Vesting parameters must be set properly"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e45cb432e044acd170f9513a178a1e917504744b93ae725e9c89eb92d22f4f61",
                                "typeString": "literal_string \"Vesting parameters must be set properly\""
                              }
                            ],
                            "id": 4912,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "11121:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4919,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11121:81:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4920,
                        "nodeType": "ExpressionStatement",
                        "src": "11121:81:14"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4922,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4876,
                              "src": "11232:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 4923,
                                "name": "info",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4883,
                                "src": "11240:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                }
                              },
                              "id": 4924,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "vestingReleaseTimestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4427,
                              "src": "11240:28:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4925,
                                "name": "info",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4883,
                                "src": "11270:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                }
                              },
                              "id": 4926,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "vestingReleaseRate",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4429,
                              "src": "11270:23:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4921,
                            "name": "VestingSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4400,
                            "src": "11221:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 4927,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11221:73:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4928,
                        "nodeType": "EmitStatement",
                        "src": "11216:78:14"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4868,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4865,
                      "src": "10762:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 4869,
                        "name": "_stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4838,
                        "src": "10766:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      "id": 4870,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "10766:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10762:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4930,
                  "initializationExpression": {
                    "assignments": [
                      4865
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 4865,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "10755:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 4930,
                        "src": "10747:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4864,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10747:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 4867,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 4866,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10759:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "10747:13:14"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 4873,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "10783:3:14",
                      "subExpression": {
                        "id": 4872,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4865,
                        "src": "10783:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4874,
                    "nodeType": "ExpressionStatement",
                    "src": "10783:3:14"
                  },
                  "nodeType": "ForStatement",
                  "src": "10742:563:14"
                }
              ]
            },
            "documentation": {
              "id": 4835,
              "nodeType": "StructuredDocumentation",
              "src": "10057:303:14",
              "text": " @notice Setup vesting parameters\n @param _stakers Array of stakers\n @param _releaseTimestamp Array of timestamps when stake will be released\n @param _releaseRate Array of release rates\n @dev If release rate is 0 then all value will be locked before release timestamp"
            },
            "functionSelector": "db687988",
            "id": 4932,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4847,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4846,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13593,
                  "src": "10526:9:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "10526:9:14"
              }
            ],
            "name": "setupVesting",
            "nameLocation": "10374:12:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4845,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4838,
                  "mutability": "mutable",
                  "name": "_stakers",
                  "nameLocation": "10415:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4932,
                  "src": "10396:27:14",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4836,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "10396:7:14",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 4837,
                    "nodeType": "ArrayTypeName",
                    "src": "10396:9:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4841,
                  "mutability": "mutable",
                  "name": "_releaseTimestamp",
                  "nameLocation": "10452:17:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4932,
                  "src": "10433:36:14",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4839,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10433:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4840,
                    "nodeType": "ArrayTypeName",
                    "src": "10433:9:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4844,
                  "mutability": "mutable",
                  "name": "_releaseRate",
                  "nameLocation": "10498:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4932,
                  "src": "10479:31:14",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4842,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10479:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4843,
                    "nodeType": "ArrayTypeName",
                    "src": "10479:9:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10386:130:14"
            },
            "returnParameters": {
              "id": 4848,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10536:0:14"
            },
            "scope": 5258,
            "src": "10365:946:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4995,
              "nodeType": "Block",
              "src": "11632:518:14",
              "statements": [
                {
                  "assignments": [
                    4946
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4946,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "11661:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4995,
                      "src": "11642:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 4945,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4944,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "11642:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "11642:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4950,
                  "initialValue": {
                    "baseExpression": {
                      "id": 4947,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "11668:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 4949,
                    "indexExpression": {
                      "id": 4948,
                      "name": "_staker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4935,
                      "src": "11679:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "11668:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11642:45:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4971,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4963,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 4958,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4952,
                                "name": "info",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4946,
                                "src": "11718:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                }
                              },
                              "id": 4953,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakingProvider",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4431,
                              "src": "11718:20:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 4956,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11750:1:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 4955,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11742:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 4954,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11742:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4957,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11742:10:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "11718:34:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 4962,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4959,
                                "name": "info",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4946,
                                "src": "11768:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                }
                              },
                              "id": 4960,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakingProvider",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4431,
                              "src": "11768:20:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 4961,
                              "name": "_stakingProvider",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4937,
                              "src": "11792:16:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "11768:40:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11718:90:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4970,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 4966,
                                  "name": "info",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4946,
                                  "src": "11842:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                    "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                  }
                                },
                                "id": 4967,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "stakingProvider",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4431,
                                "src": "11842:20:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 4964,
                                "name": "tStaking",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4454,
                                "src": "11824:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStaking_$13145",
                                  "typeString": "contract IStaking"
                                }
                              },
                              "id": 4965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakedNu",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 13099,
                              "src": "11824:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 4968,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11824:39:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4969,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11867:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11824:44:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "11718:150:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5374616b696e672070726f766964657220616c72656164792073657420666f7220746865207374616b6572",
                        "id": 4972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11882:45:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4044f61d29d6aa3dea8ff21cc56a548f86547c5d09aa1e21d5449b93814285ef",
                          "typeString": "literal_string \"Staking provider already set for the staker\""
                        },
                        "value": "Staking provider already set for the staker"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4044f61d29d6aa3dea8ff21cc56a548f86547c5d09aa1e21d5449b93814285ef",
                          "typeString": "literal_string \"Staking provider already set for the staker\""
                        }
                      ],
                      "id": 4951,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11697:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4973,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11697:240:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4974,
                  "nodeType": "ExpressionStatement",
                  "src": "11697:240:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4975,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4946,
                        "src": "11951:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 4976,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "stakingProvider",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4431,
                      "src": "11951:20:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 4977,
                      "name": "_stakingProvider",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4937,
                      "src": "11975:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11951:40:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4991,
                  "nodeType": "IfStatement",
                  "src": "11947:170:14",
                  "trueBody": {
                    "id": 4990,
                    "nodeType": "Block",
                    "src": "11993:124:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 4983,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 4979,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4946,
                              "src": "12007:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 4981,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "stakingProvider",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4431,
                            "src": "12007:20:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 4982,
                            "name": "_stakingProvider",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4937,
                            "src": "12030:16:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "12007:39:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 4984,
                        "nodeType": "ExpressionStatement",
                        "src": "12007:39:14"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4986,
                              "name": "_staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4935,
                              "src": "12080:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 4987,
                              "name": "_stakingProvider",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4937,
                              "src": "12089:16:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4985,
                            "name": "MergeRequested",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4407,
                            "src": "12065:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 4988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12065:41:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4989,
                        "nodeType": "EmitStatement",
                        "src": "12060:46:14"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "expression": {
                      "id": 4992,
                      "name": "info",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4946,
                      "src": "12133:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                      }
                    },
                    "id": 4993,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 4409,
                    "src": "12133:10:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4943,
                  "id": 4994,
                  "nodeType": "Return",
                  "src": "12126:17:14"
                }
              ]
            },
            "documentation": {
              "id": 4933,
              "nodeType": "StructuredDocumentation",
              "src": "11317:185:14",
              "text": " @notice Request migration to threshold network\n @param _staker Staker address\n @param _stakingProvider Staking provider address\n @return Amount of tokens"
            },
            "functionSelector": "3223ff4b",
            "id": 4996,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4940,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4939,
                  "name": "onlyTStakingContract",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4583,
                  "src": "11589:20:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "11589:20:14"
              }
            ],
            "name": "requestMerge",
            "nameLocation": "11516:12:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4938,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4935,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "11537:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4996,
                  "src": "11529:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4934,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11529:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4937,
                  "mutability": "mutable",
                  "name": "_stakingProvider",
                  "nameLocation": "11554:16:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4996,
                  "src": "11546:24:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4936,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11546:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11528:43:14"
            },
            "returnParameters": {
              "id": 4943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4942,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4996,
                  "src": "11619:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11619:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11618:9:14"
            },
            "scope": 5258,
            "src": "11507:643:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5069,
              "nodeType": "Block",
              "src": "12636:472:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 5013,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 5011,
                          "name": "_penalty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5001,
                          "src": "12654:8:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 5012,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12665:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "12654:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "50656e616c7479206d75737420626520737065636966696564",
                        "id": 5014,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12668:27:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_508e6dd4795fe723e35502d1136cf1ef56b63079463541bd168889b17a54a1f5",
                          "typeString": "literal_string \"Penalty must be specified\""
                        },
                        "value": "Penalty must be specified"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_508e6dd4795fe723e35502d1136cf1ef56b63079463541bd168889b17a54a1f5",
                          "typeString": "literal_string \"Penalty must be specified\""
                        }
                      ],
                      "id": 5010,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "12646:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5015,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12646:50:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5016,
                  "nodeType": "ExpressionStatement",
                  "src": "12646:50:14"
                },
                {
                  "assignments": [
                    5019
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5019,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "12725:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5069,
                      "src": "12706:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 5018,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 5017,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "12706:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "12706:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5023,
                  "initialValue": {
                    "baseExpression": {
                      "id": 5020,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "12732:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 5022,
                    "indexExpression": {
                      "id": 5021,
                      "name": "_staker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4999,
                      "src": "12743:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12732:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12706:45:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5027,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 5024,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5019,
                        "src": "12765:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 5025,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4409,
                      "src": "12765:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "id": 5026,
                      "name": "_penalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5001,
                      "src": "12779:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12765:22:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5034,
                  "nodeType": "IfStatement",
                  "src": "12761:74:14",
                  "trueBody": {
                    "id": 5033,
                    "nodeType": "Block",
                    "src": "12789:46:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 5031,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 5028,
                            "name": "_penalty",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5001,
                            "src": "12803:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 5029,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5019,
                              "src": "12814:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 5030,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4409,
                            "src": "12814:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12803:21:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 5032,
                        "nodeType": "ExpressionStatement",
                        "src": "12803:21:14"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 5039,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 5035,
                        "name": "info",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5019,
                        "src": "12844:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                        }
                      },
                      "id": 5037,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4409,
                      "src": "12844:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 5038,
                      "name": "_penalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5001,
                      "src": "12858:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12844:22:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5040,
                  "nodeType": "ExpressionStatement",
                  "src": "12844:22:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5043,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 5041,
                      "name": "_reward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5005,
                      "src": "12880:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 5042,
                      "name": "_penalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5001,
                      "src": "12890:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12880:18:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5049,
                  "nodeType": "IfStatement",
                  "src": "12876:67:14",
                  "trueBody": {
                    "id": 5048,
                    "nodeType": "Block",
                    "src": "12900:43:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 5046,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 5044,
                            "name": "_reward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5005,
                            "src": "12914:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 5045,
                            "name": "_penalty",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5001,
                            "src": "12924:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12914:18:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 5047,
                        "nodeType": "ExpressionStatement",
                        "src": "12914:18:14"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 5051,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4999,
                        "src": "12966:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 5052,
                        "name": "_penalty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5001,
                        "src": "12975:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 5053,
                        "name": "_investigator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5003,
                        "src": "12985:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 5054,
                        "name": "_reward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5005,
                        "src": "13000:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5050,
                      "name": "Slashed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4391,
                      "src": "12958:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,address,uint256)"
                      }
                    },
                    "id": 5055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12958:50:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5056,
                  "nodeType": "EmitStatement",
                  "src": "12953:55:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5059,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 5057,
                      "name": "_reward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5005,
                      "src": "13022:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 5058,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13032:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "13022:11:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5068,
                  "nodeType": "IfStatement",
                  "src": "13018:84:14",
                  "trueBody": {
                    "id": 5067,
                    "nodeType": "Block",
                    "src": "13035:67:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5063,
                              "name": "_investigator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5003,
                              "src": "13068:13:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 5064,
                              "name": "_reward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5005,
                              "src": "13083:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 5060,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4448,
                              "src": "13049:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_NuCypherToken_$751",
                                "typeString": "contract NuCypherToken"
                              }
                            },
                            "id": 5062,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14266,
                            "src": "13049:18:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$14235_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$14235_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 5065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13049:42:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5066,
                        "nodeType": "ExpressionStatement",
                        "src": "13049:42:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 4997,
              "nodeType": "StructuredDocumentation",
              "src": "12221:234:14",
              "text": " @notice Slash the staker's stake and reward the investigator\n @param _staker Staker's address\n @param _penalty Penalty\n @param _investigator Investigator\n @param _reward Reward for the investigator"
            },
            "functionSelector": "99cc218c",
            "id": 5070,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5008,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5007,
                  "name": "onlyTStakingContract",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4583,
                  "src": "12611:20:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "12611:20:14"
              }
            ],
            "name": "slashStaker",
            "nameLocation": "12469:11:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4999,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "12498:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5070,
                  "src": "12490:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4998,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12490:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5001,
                  "mutability": "mutable",
                  "name": "_penalty",
                  "nameLocation": "12523:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5070,
                  "src": "12515:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5000,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12515:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5003,
                  "mutability": "mutable",
                  "name": "_investigator",
                  "nameLocation": "12549:13:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5070,
                  "src": "12541:21:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5002,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12541:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5005,
                  "mutability": "mutable",
                  "name": "_reward",
                  "nameLocation": "12580:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5070,
                  "src": "12572:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12572:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12480:113:14"
            },
            "returnParameters": {
              "id": 5009,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12636:0:14"
            },
            "scope": 5258,
            "src": "12460:648:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5079,
              "nodeType": "Block",
              "src": "13321:38:14",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 5076,
                      "name": "stakers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4468,
                      "src": "13338:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "id": 5077,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "13338:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 5075,
                  "id": 5078,
                  "nodeType": "Return",
                  "src": "13331:21:14"
                }
              ]
            },
            "documentation": {
              "id": 5071,
              "nodeType": "StructuredDocumentation",
              "src": "13182:66:14",
              "text": " @notice Return the length of the array of stakers"
            },
            "functionSelector": "9fabeb00",
            "id": 5080,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getStakersLength",
            "nameLocation": "13262:16:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13278:2:14"
            },
            "returnParameters": {
              "id": 5075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5074,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5080,
                  "src": "13312:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5073,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13312:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13311:9:14"
            },
            "scope": 5258,
            "src": "13253:106:14",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10
            ],
            "body": {
              "id": 5092,
              "nodeType": "Block",
              "src": "13535:25:14",
              "statements": [
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 5090,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "13552:1:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 5089,
                  "id": 5091,
                  "nodeType": "Return",
                  "src": "13545:8:14"
                }
              ]
            },
            "functionSelector": "ede38421",
            "id": 5093,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalStakedForAt",
            "nameLocation": "13441:16:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5086,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "13508:8:14"
            },
            "parameters": {
              "id": 5085,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5082,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "13466:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5093,
                  "src": "13458:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5081,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13458:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5084,
                  "mutability": "mutable",
                  "name": "_blockNumber",
                  "nameLocation": "13482:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5093,
                  "src": "13474:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5083,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13474:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13457:38:14"
            },
            "returnParameters": {
              "id": 5089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5088,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5093,
                  "src": "13526:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5087,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13526:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13525:9:14"
            },
            "scope": 5258,
            "src": "13432:128:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              17
            ],
            "body": {
              "id": 5105,
              "nodeType": "Block",
              "src": "13650:43:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 5101,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4448,
                        "src": "13667:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_NuCypherToken_$751",
                          "typeString": "contract NuCypherToken"
                        }
                      },
                      "id": 5102,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "totalSupply",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13740,
                      "src": "13667:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                        "typeString": "function () view external returns (uint256)"
                      }
                    },
                    "id": 5103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13667:19:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 5100,
                  "id": 5104,
                  "nodeType": "Return",
                  "src": "13660:26:14"
                }
              ]
            },
            "functionSelector": "c9c53232",
            "id": 5106,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalStakedAt",
            "nameLocation": "13575:13:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5097,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "13623:8:14"
            },
            "parameters": {
              "id": 5096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5095,
                  "mutability": "mutable",
                  "name": "_blockNumber",
                  "nameLocation": "13597:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "13589:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13589:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13588:22:14"
            },
            "returnParameters": {
              "id": 5100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5099,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "13641:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5098,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13641:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13640:9:14"
            },
            "scope": 5258,
            "src": "13566:127:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              22
            ],
            "body": {
              "id": 5114,
              "nodeType": "Block",
              "src": "13764:28:14",
              "statements": [
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 5112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "13781:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 5111,
                  "id": 5113,
                  "nodeType": "Return",
                  "src": "13774:11:14"
                }
              ]
            },
            "functionSelector": "7033e4a6",
            "id": 5115,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsHistory",
            "nameLocation": "13708:15:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5108,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "13740:8:14"
            },
            "parameters": {
              "id": 5107,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13723:2:14"
            },
            "returnParameters": {
              "id": 5111,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5110,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5115,
                  "src": "13758:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5109,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "13758:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13757:6:14"
            },
            "scope": 5258,
            "src": "13699:93:14",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5139,
              "nodeType": "Block",
              "src": "14052:171:14",
              "statements": [
                {
                  "assignments": [
                    5127
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5127,
                      "mutability": "mutable",
                      "name": "memoryAddress",
                      "nameLocation": "14070:13:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5139,
                      "src": "14062:21:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 5126,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "14062:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5137,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 5129,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5118,
                        "src": "14102:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 5130,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "14111:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingEscrow_$5258",
                              "typeString": "contract StakingEscrow"
                            }
                          },
                          "id": 5131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "stakerInfo",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4465,
                          "src": "14111:15:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint256_$_t_uint16_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256,uint16,uint16,uint16,uint16,uint256,uint16,address,uint256,uint256,uint256,address,uint256,uint256)"
                          }
                        },
                        "id": 5132,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "src": "14111:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 5133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14137:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "id": 5134,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5120,
                        "src": "14140:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 5135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14149:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 5128,
                      "name": "delegateGetData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10812,
                      "src": "14086:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (address,bytes4,uint8,bytes32,bytes32) returns (bytes32)"
                      }
                    },
                    "id": 5136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14086:65:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14062:89:14"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "14170:47:14",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "14184:23:14",
                        "value": {
                          "name": "memoryAddress",
                          "nodeType": "YulIdentifier",
                          "src": "14194:13:14"
                        },
                        "variableNames": [
                          {
                            "name": "result",
                            "nodeType": "YulIdentifier",
                            "src": "14184:6:14"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 5127,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "14194:13:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 5124,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "14184:6:14",
                      "valueSize": 1
                    }
                  ],
                  "id": 5138,
                  "nodeType": "InlineAssembly",
                  "src": "14161:56:14"
                }
              ]
            },
            "documentation": {
              "id": 5116,
              "nodeType": "StructuredDocumentation",
              "src": "13864:62:14",
              "text": " @dev Get StakerInfo structure by delegatecall"
            },
            "id": 5140,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delegateGetStakerInfo",
            "nameLocation": "13940:21:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5118,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "13970:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5140,
                  "src": "13962:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5117,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13962:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5120,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "13987:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5140,
                  "src": "13979:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5119,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13979:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13961:34:14"
            },
            "returnParameters": {
              "id": 5125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5124,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "14040:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5140,
                  "src": "14022:24:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                    "typeString": "struct StakingEscrow.StakerInfo"
                  },
                  "typeName": {
                    "id": 5123,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5122,
                      "name": "StakerInfo",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4445,
                      "src": "14022:10:14"
                    },
                    "referencedDeclaration": 4445,
                    "src": "14022:10:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                      "typeString": "struct StakingEscrow.StakerInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14021:26:14"
            },
            "scope": 5258,
            "src": "13931:292:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              10779
            ],
            "body": {
              "id": 5256,
              "nodeType": "Block",
              "src": "14391:895:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 5150,
                        "name": "_testTarget",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5143,
                        "src": "14419:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 5147,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "14401:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_StakingEscrow_$5258_$",
                          "typeString": "type(contract super StakingEscrow)"
                        }
                      },
                      "id": 5149,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "verifyState",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10779,
                      "src": "14401:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 5151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14401:30:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5152,
                  "nodeType": "ExpressionStatement",
                  "src": "14401:30:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 5162,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 5155,
                              "name": "_testTarget",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5143,
                              "src": "14462:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "expression": {
                                  "id": 5156,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "14475:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingEscrow_$5258",
                                    "typeString": "contract StakingEscrow"
                                  }
                                },
                                "id": 5157,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "getStakersLength",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 5080,
                                "src": "14475:21:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 5158,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "src": "14475:30:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            ],
                            "id": 5154,
                            "name": "delegateGet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              10834,
                              10858,
                              10884
                            ],
                            "referencedDeclaration": 10834,
                            "src": "14450:11:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$_t_uint256_$",
                              "typeString": "function (address,bytes4) returns (uint256)"
                            }
                          },
                          "id": 5159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14450:56:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 5160,
                            "name": "stakers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4468,
                            "src": "14510:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 5161,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "14510:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14450:74:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5153,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14442:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14442:83:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5164,
                  "nodeType": "ExpressionStatement",
                  "src": "14442:83:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5168,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 5165,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4468,
                        "src": "14539:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 5166,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "14539:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 5167,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "14557:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "14539:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5171,
                  "nodeType": "IfStatement",
                  "src": "14535:56:14",
                  "trueBody": {
                    "id": 5170,
                    "nodeType": "Block",
                    "src": "14560:31:14",
                    "statements": [
                      {
                        "functionReturnParameters": 5146,
                        "id": 5169,
                        "nodeType": "Return",
                        "src": "14574:7:14"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    5173
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5173,
                      "mutability": "mutable",
                      "name": "stakerAddress",
                      "nameLocation": "14608:13:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5256,
                      "src": "14600:21:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 5172,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14600:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5177,
                  "initialValue": {
                    "baseExpression": {
                      "id": 5174,
                      "name": "stakers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4468,
                      "src": "14624:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "id": 5176,
                    "indexExpression": {
                      "hexValue": "30",
                      "id": 5175,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "14632:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "14624:10:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14600:34:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 5193,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 5184,
                                      "name": "_testTarget",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5143,
                                      "src": "14680:11:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "expression": {
                                        "expression": {
                                          "id": 5185,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "14693:4:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_StakingEscrow_$5258",
                                            "typeString": "contract StakingEscrow"
                                          }
                                        },
                                        "id": 5186,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "stakers",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 4468,
                                        "src": "14693:12:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                                          "typeString": "function (uint256) view external returns (address)"
                                        }
                                      },
                                      "id": 5187,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "14693:21:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    {
                                      "hexValue": "30",
                                      "id": 5188,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "14716:1:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      },
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 5183,
                                    "name": "delegateGet",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [
                                      10834,
                                      10858,
                                      10884
                                    ],
                                    "referencedDeclaration": 10858,
                                    "src": "14668:11:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$_t_bytes32_$returns$_t_uint256_$",
                                      "typeString": "function (address,bytes4,bytes32) returns (uint256)"
                                    }
                                  },
                                  "id": 5189,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "14668:50:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 5182,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "14660:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint160_$",
                                  "typeString": "type(uint160)"
                                },
                                "typeName": {
                                  "id": 5181,
                                  "name": "uint160",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "14660:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 5190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14660:59:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            ],
                            "id": 5180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "14652:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 5179,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "14652:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 5191,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14652:68:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 5192,
                          "name": "stakerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5173,
                          "src": "14724:13:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "14652:85:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5178,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14644:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5194,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14644:94:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5195,
                  "nodeType": "ExpressionStatement",
                  "src": "14644:94:14"
                },
                {
                  "assignments": [
                    5198
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5198,
                      "mutability": "mutable",
                      "name": "info",
                      "nameLocation": "14767:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5256,
                      "src": "14748:23:14",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 5197,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 5196,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "14748:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "14748:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5202,
                  "initialValue": {
                    "baseExpression": {
                      "id": 5199,
                      "name": "stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "14774:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerInfo_$4445_storage_$",
                        "typeString": "mapping(address => struct StakingEscrow.StakerInfo storage ref)"
                      }
                    },
                    "id": 5201,
                    "indexExpression": {
                      "id": 5200,
                      "name": "stakerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5173,
                      "src": "14785:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "14774:25:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage",
                      "typeString": "struct StakingEscrow.StakerInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14748:51:14"
                },
                {
                  "assignments": [
                    5204
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5204,
                      "mutability": "mutable",
                      "name": "staker",
                      "nameLocation": "14817:6:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5256,
                      "src": "14809:14:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 5203,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "14809:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5215,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 5211,
                                "name": "stakerAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5173,
                                "src": "14850:13:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 5210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "14842:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint160_$",
                                "typeString": "type(uint160)"
                              },
                              "typeName": {
                                "id": 5209,
                                "name": "uint160",
                                "nodeType": "ElementaryTypeName",
                                "src": "14842:7:14",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 5212,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14842:22:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          ],
                          "id": 5208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14834:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": {
                            "id": 5207,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "14834:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 5213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14834:31:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5206,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "14826:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes32_$",
                        "typeString": "type(bytes32)"
                      },
                      "typeName": {
                        "id": 5205,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "14826:7:14",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 5214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14826:40:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14809:57:14"
                },
                {
                  "assignments": [
                    5218
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5218,
                      "mutability": "mutable",
                      "name": "infoToCheck",
                      "nameLocation": "14894:11:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 5256,
                      "src": "14876:29:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                        "typeString": "struct StakingEscrow.StakerInfo"
                      },
                      "typeName": {
                        "id": 5217,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 5216,
                          "name": "StakerInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4445,
                          "src": "14876:10:14"
                        },
                        "referencedDeclaration": 4445,
                        "src": "14876:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                          "typeString": "struct StakingEscrow.StakerInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5223,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 5220,
                        "name": "_testTarget",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5143,
                        "src": "14930:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 5221,
                        "name": "staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5204,
                        "src": "14943:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 5219,
                      "name": "delegateGetStakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5140,
                      "src": "14908:21:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_struct$_StakerInfo_$4445_memory_ptr_$",
                        "typeString": "function (address,bytes32) returns (struct StakingEscrow.StakerInfo memory)"
                      }
                    },
                    "id": 5222,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14908:42:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                      "typeString": "struct StakingEscrow.StakerInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14876:74:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 5253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 5247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 5241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 5235,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5229,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 5225,
                                    "name": "infoToCheck",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5218,
                                    "src": "14968:11:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                                      "typeString": "struct StakingEscrow.StakerInfo memory"
                                    }
                                  },
                                  "id": 5226,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4409,
                                  "src": "14968:17:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 5227,
                                    "name": "info",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5198,
                                    "src": "14989:4:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                      "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                    }
                                  },
                                  "id": 5228,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4409,
                                  "src": "14989:10:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14968:31:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5234,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 5230,
                                    "name": "infoToCheck",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5218,
                                    "src": "15015:11:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                                      "typeString": "struct StakingEscrow.StakerInfo memory"
                                    }
                                  },
                                  "id": 5231,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "vestingReleaseTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4427,
                                  "src": "15015:35:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 5232,
                                    "name": "info",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5198,
                                    "src": "15054:4:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                      "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                    }
                                  },
                                  "id": 5233,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "vestingReleaseTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4427,
                                  "src": "15054:28:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "15015:67:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "14968:114:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 5240,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 5236,
                                  "name": "infoToCheck",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 5218,
                                  "src": "15098:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                                    "typeString": "struct StakingEscrow.StakerInfo memory"
                                  }
                                },
                                "id": 5237,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "vestingReleaseRate",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4429,
                                "src": "15098:30:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 5238,
                                  "name": "info",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 5198,
                                  "src": "15132:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                    "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                  }
                                },
                                "id": 5239,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "vestingReleaseRate",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4429,
                                "src": "15132:23:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15098:57:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "14968:187:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 5246,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 5242,
                                "name": "infoToCheck",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5218,
                                "src": "15171:11:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo memory"
                                }
                              },
                              "id": 5243,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakingProvider",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4431,
                              "src": "15171:27:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 5244,
                                "name": "info",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5198,
                                "src": "15202:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                  "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                                }
                              },
                              "id": 5245,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakingProvider",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4431,
                              "src": "15202:20:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "15171:51:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "14968:254:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5252,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 5248,
                              "name": "infoToCheck",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5218,
                              "src": "15238:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_memory_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo memory"
                              }
                            },
                            "id": 5249,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "flags",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4425,
                            "src": "15238:17:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 5250,
                              "name": "info",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5198,
                              "src": "15259:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakerInfo_$4445_storage_ptr",
                                "typeString": "struct StakingEscrow.StakerInfo storage pointer"
                              }
                            },
                            "id": 5251,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "flags",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4425,
                            "src": "15259:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15238:31:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "14968:301:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5224,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14960:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14960:319:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5255,
                  "nodeType": "ExpressionStatement",
                  "src": "14960:319:14"
                }
              ]
            },
            "documentation": {
              "id": 5141,
              "nodeType": "StructuredDocumentation",
              "src": "14229:91:14",
              "text": "@dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`"
            },
            "functionSelector": "b9626d21",
            "id": 5257,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyState",
            "nameLocation": "14334:11:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5145,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "14374:8:14"
            },
            "parameters": {
              "id": 5144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5143,
                  "mutability": "mutable",
                  "name": "_testTarget",
                  "nameLocation": "14354:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5257,
                  "src": "14346:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5142,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14346:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14345:21:14"
            },
            "returnParameters": {
              "id": 5146,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14391:0:14"
            },
            "scope": 5258,
            "src": "14325:961:14",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 5259,
        "src": "2175:13114:14",
        "usedErrors": []
      }
    ],
    "src": "47:15243:14"
  },
  "bytecode": "60e06040523480156200001157600080fd5b506040516200205638038062002056833981016040819052620000349162000280565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000da9190620002d4565b118015620001515750604051634a11fae360e01b8152600060048201526001600160a01b03821690634a11fae390602401602060405180830381865afa15801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f9190620002d4565b155b8015620001e557506001600160a01b0382161580620001e55750826001600160a01b0316826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001da9190620002ee565b6001600160a01b0316145b620002495760405162461bcd60e51b815260206004820152602a60248201527f496e70757420616464726573736573206d757374206265206465706c6f79656460448201526920636f6e74726163747360b01b606482015260840160405180910390fd5b6001600160a01b0392831660805290821660a0521660c05262000315565b6001600160a01b03811681146200027d57600080fd5b50565b6000806000606084860312156200029657600080fd5b8351620002a38162000267565b6020850151909350620002b68162000267565b6040850151909250620002c98162000267565b809150509250925092565b600060208284031215620002e757600080fd5b5051919050565b6000602082840312156200030157600080fd5b81516200030e8162000267565b9392505050565b60805160a05160c051611ccb6200038b60003960008181610454015281816107c4015281816109ab01528181610a4e0152610c4b01526000818161021f0152818161051d0152610b990152600081816104dd015281816106590152818161093e01528181610d8b0152610f4f0152611ccb6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80639fabeb00116100f9578063dbaa0fc611610097578063ede3842111610071578063ede38421146104af578063f2fde38b146104c5578063fc0c546a146104d8578063fd5e6dd1146104ff57600080fd5b8063dbaa0fc61461044f578063e38a303b14610476578063e8dccd061461049c57600080fd5b8063c9c53232116100d3578063c9c5323214610408578063d094adbf1461041b578063d4b8399214610429578063db6879881461043c57600080fd5b80639fabeb00146103da578063b9626d21146103e2578063c07b5d8c146103f557600080fd5b80634b2cd11811610166578063715018a611610140578063715018a61461039b5780638da5cb5b146103a35780638f32d59b146103b457806399cc218c146103c757600080fd5b80634b2cd118146102c45780634e745f1f146102d75780637033e4a61461038857600080fd5b8063204612a8116101a2578063204612a8146102595780632e1a7d4d1461028b5780633223ff4b1461029e57806349e5add4146102b157600080fd5b8063171f03c2146101c9578063178b6de6146101de5780631c7fd5321461021a575b600080fd5b6101dc6101d73660046117e7565b610512565b005b6102076101ec36600461182e565b6001600160a01b031660009081526006602052604090205490565b6040519081526020015b60405180910390f35b6102417f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610211565b60045461027390600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610211565b6101dc610299366004611849565b6106de565b6102076102ac366004611862565b61099e565b6102076102bf3660046118a3565b610b8c565b600254610241906001600160a01b031681565b61036e6102e536600461182e565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008880154600990980154969861ffff8088169962010000808a0483169a6401000000008b0484169a6601000000000000900484169998938416976001600160a01b0392909404821696939590911691908e565b6040516102119e9d9c9b9a999897969594939291906118da565b60015b6040519015158152602001610211565b6101dc610bdf565b6000546001600160a01b0316610241565b6000546001600160a01b0316331461038b565b6101dc6103d5366004611972565b610c40565b600754610207565b6101dc6103f036600461182e565b610db9565b61020761040336600461182e565b610ed0565b610207610416366004611849565b610f4b565b61020761041636600461182e565b600154610241906001600160a01b031681565b6101dc61044a366004611a02565b610fd5565b6102417f000000000000000000000000000000000000000000000000000000000000000081565b60025461048a90600160a01b900460ff1681565b60405160ff9091168152602001610211565b6101dc6104aa36600461182e565b611229565b6102076104bd366004611a9c565b600092915050565b6101dc6104d336600461182e565b611283565b6102417f000000000000000000000000000000000000000000000000000000000000000081565b61024161050d366004611849565b6112a6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105635760405162461bcd60e51b815260040161055a90611ac6565b60405180910390fd5b816105c65760405162461bcd60e51b815260206004820152602d60248201527f416d6f756e74206f6620746f6b656e7320746f206465706f736974206d75737460448201526c081899481cdc1958da599a5959609a1b606482015260840161055a565b6001600160a01b038316600090815260066020526040902080541580156105fb57506001810154640100000000900461ffff16155b1561064c57600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6106816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866112d0565b828160000160008282546106959190611b20565b90915550506040518381526001600160a01b038516907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250505050565b3360009081526006602052604090205461073a5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206d7573742062652061207374616b6572000000000000000000604482015260640161055a565b6000811161078a5760405162461bcd60e51b815260206004820152601760248201527f56616c7565206d75737420626520737065636966696564000000000000000000604482015260640161055a565b3360009081526006602052604090819020805460078201549251634a11fae360e01b81526001600160a01b039384166004820152919290917f000000000000000000000000000000000000000000000000000000000000000090911690634a11fae390602401602060405180830381865afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108319190611b38565b61083b9084611b20565b11156108a25760405162461bcd60e51b815260206004820152603060248201527f4e6f7420656e6f75676820746f6b656e7320756e7374616b656420696e20542060448201526f1cdd185ada5b99c818dbdb9d1c9858dd60821b606482015260840161055a565b80546108ad33610ed0565b6108b79084611b20565b11156109175760405162461bcd60e51b815260206004820152602960248201527f4e6f7420656e6f75676820746f6b656e732072656c656173656420647572696e604482015268672076657374696e6760b81b606482015260840161055a565b8181600001600082825461092b9190611b51565b9091555061096590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611341565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109e85760405162461bcd60e51b815260040161055a90611b68565b6001600160a01b03808416600090815260066020526040902060078101549091161580610a24575060078101546001600160a01b038481169116145b80610abd57506007810154604051634a11fae360e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911690634a11fae390602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190611b38565b155b610b1d5760405162461bcd60e51b815260206004820152602b60248201527f5374616b696e672070726f766964657220616c72656164792073657420666f7260448201526a103a34329039ba30b5b2b960a91b606482015260840161055a565b60078101546001600160a01b03848116911614610b84576007810180546001600160a01b0319166001600160a01b0385811691821790925560405190918616907fe49f168acc1287c0f7b4541660600e72e51f66e70babb33223525a3f87ae603190600090a35b549392505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd65760405162461bcd60e51b815260040161055a90611ac6565b50600092915050565b6000546001600160a01b03163314610bf657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c885760405162461bcd60e51b815260040161055a90611b68565b60008311610cd85760405162461bcd60e51b815260206004820152601960248201527f50656e616c7479206d7573742062652073706563696669656400000000000000604482015260640161055a565b6001600160a01b038416600090815260066020526040902080548410610cfd57805493505b83816000016000828254610d119190611b51565b909155505083821115610d22578391505b826001600160a01b0316856001600160a01b03167f34040fa1c0549c8572589c39cb87ff7638286467446a4790971d58d931c654bb8685604051610d70929190918252602082015260400190565b60405180910390a38115610db257610db26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611341565b5050505050565b610dc281611376565b600754610dd582629fabeb60e81b6113c9565b14610ddf57600080fd5b600754610de95750565b60006007600081548110610dff57610dff611bad565b60009182526020822001546001600160a01b031691508190610e2b90849063fd5e6dd160e01b906113e2565b6001600160a01b031614610e3e57600080fd5b6001600160a01b03811660008181526006602052604081209190610e6285836113fd565b83548151919250148015610e7e57508260050154816101200151145b8015610e9257508260060154816101400151145b8015610eb3575060078301546101608201516001600160a01b039081169116145b8015610ec757508260040154816101000151145b610db257600080fd5b6001600160a01b038116600090815260066020526040812060058101544210610efc5750600092915050565b6006810154610f0c575492915050565b60008160060154428360050154610f239190611b51565b610f2d9190611bc3565b905080826000015410610f405780610f43565b81545b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf9190611b38565b92915050565b6000546001600160a01b03163314610fec57600080fd5b8483148015610ffa57508281145b61105d5760405162461bcd60e51b815260206004820152602e60248201527f496e70757420617272617973206d75737420686176652073616d65206e756d6260448201526d6572206f6620656c656d656e747360901b606482015260840161055a565b60005b8581101561122057600087878381811061107c5761107c611bad565b9050602002016020810190611091919061182e565b6001600160a01b03811660009081526006602052604090206005810154919250901561110f5760405162461bcd60e51b815260206004820152602760248201527f56657374696e6720706172616d65746572732063616e20626520736574206f6e6044820152666c79206f6e636560c81b606482015260840161055a565b86868481811061112157611121611bad565b602002919091013560058301555084848481811061114157611141611bad565b6020029190910135600683015550600061115a83610ed0565b116111b75760405162461bcd60e51b815260206004820152602760248201527f56657374696e6720706172616d6574657273206d757374206265207365742070604482015266726f7065726c7960c81b606482015260840161055a565b816001600160a01b03167ffb8dc35d14cc25e41d680c975bd50a0640415afdf7af584763fa7549c0b8889782600501548360060154604051611203929190918252602082015260400190565b60405180910390a25050808061121890611be2565b915050611060565b50505050505050565b60028054600160a01b900460ff161461124157600080fd5b6040513381526001600160a01b038216907fd55ec27c5c6316913ed8803c18cfd1bfefea953db909dcba6140744a9d8b0d1f906020015b60405180910390a250565b6000546001600160a01b0316331461129a57600080fd5b6112a3816114c1565b50565b600781815481106112b657600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516001600160a01b038085166024830152831660448201526064810182905261133b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261152f565b50505050565b6040516001600160a01b03831660248201526044810182905261137190849063a9059cbb60e01b90606401611304565b505050565b60028054600160a01b900460ff161461138e57600080fd5b6040513381526001600160a01b038216907f1e8d98c1b4a0d9bd2e2371026b632eb2773fcce41742e41f02f574ab69868d4c90602001611278565b6000806113d98484838080611601565b51949350505050565b6000806113f3858560018685611601565b5195945050505050565b6114aa60405180610220016040528060008152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160008152602001600061ffff16815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081525090565b6000610f4384634e745f1f60e01b60018685611601565b6001600160a01b0381166114d457600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611584826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116519092919063ffffffff16565b80519091501561137157808060200190518101906115a29190611bfd565b6113715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161055a565b6040518481528315611614578260048201525b6001841115611624578160248201525b6000808560200260040183895af48015611642573d6000833e611647565b600082fd5b5095945050505050565b6060611660848460008561166a565b90505b9392505050565b6060824710156116cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161055a565b843b6117195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161055a565b600080866001600160a01b031685876040516117359190611c46565b60006040518083038185875af1925050503d8060008114611772576040519150601f19603f3d011682016040523d82523d6000602084013e611777565b606091505b5091509150611787828286611792565b979650505050505050565b606083156117a1575081611663565b8251156117b15782518084602001fd5b8160405162461bcd60e51b815260040161055a9190611c62565b80356001600160a01b03811681146117e257600080fd5b919050565b6000806000606084860312156117fc57600080fd5b611805846117cb565b925060208401359150604084013561ffff8116811461182357600080fd5b809150509250925092565b60006020828403121561184057600080fd5b611663826117cb565b60006020828403121561185b57600080fd5b5035919050565b6000806040838503121561187557600080fd5b61187e836117cb565b915061188c602084016117cb565b90509250929050565b80151581146112a357600080fd5b600080604083850312156118b657600080fd5b6118bf836117cb565b915060208301356118cf81611895565b809150509250929050565b8e815261ffff8e811660208301528d811660408301528c811660608301528b1660808201526101c081018a60a083015261191a60c083018b61ffff169052565b6001600160a01b03891660e08301528761010083015286610120830152856101408301526119546101608301866001600160a01b03169052565b6101808201939093526101a001529c9b505050505050505050505050565b6000806000806080858703121561198857600080fd5b611991856117cb565b9350602085013592506119a6604086016117cb565b9396929550929360600135925050565b60008083601f8401126119c857600080fd5b50813567ffffffffffffffff8111156119e057600080fd5b6020830191508360208260051b85010111156119fb57600080fd5b9250929050565b60008060008060008060608789031215611a1b57600080fd5b863567ffffffffffffffff80821115611a3357600080fd5b611a3f8a838b016119b6565b90985096506020890135915080821115611a5857600080fd5b611a648a838b016119b6565b90965094506040890135915080821115611a7d57600080fd5b50611a8a89828a016119b6565b979a9699509497509295939492505050565b60008060408385031215611aaf57600080fd5b611ab8836117cb565b946020939093013593505050565b60208082526024908201527f43616c6c6572206d7573742062652074686520576f726b4c6f636b20636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b3357611b33611b0a565b500190565b600060208284031215611b4a57600080fd5b5051919050565b600082821015611b6357611b63611b0a565b500390565b60208082526025908201527f43616c6c6572206d757374206265207468652054207374616b696e6720636f6e6040820152641d1c9858dd60da1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611bdd57611bdd611b0a565b500290565b6000600019821415611bf657611bf6611b0a565b5060010190565b600060208284031215611c0f57600080fd5b815161166381611895565b60005b83811015611c35578181015183820152602001611c1d565b8381111561133b5750506000910152565b60008251611c58818460208701611c1a565b9190910192915050565b6020815260008251806020840152611c81816040850160208701611c1a565b601f01601f1916919091016040019291505056fea2646970667358221220617e872007365934b71111f07ec85c8667bf76dd42c67985c0c48019d561505d64736f6c634300080a0033",
  "bytecodeSha1": "1d2e559e89b38c83d820ef5bd3d2b3875a558f69",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "StakingEscrow",
  "coverageMap": {
    "branches": {
      "11": {},
      "14": {
        "StakingEscrow.depositFromWorkLock": {
          "59": [
            8246,
            8257,
            true
          ],
          "60": [
            8415,
            8430,
            false
          ],
          "61": [
            8434,
            8463,
            false
          ]
        },
        "StakingEscrow.getUnvestedTokens": {
          "82": [
            9987,
            10014,
            true
          ]
        },
        "StakingEscrow.requestMerge": {
          "65": [
            11718,
            11752,
            true
          ],
          "66": [
            11768,
            11808,
            true
          ],
          "67": [
            11824,
            11868,
            true
          ],
          "68": [
            11951,
            11991,
            false
          ]
        },
        "StakingEscrow.setWorkMeasurement": {
          "69": [
            6869,
            6900,
            true
          ]
        },
        "StakingEscrow.setupVesting": {
          "83": [
            10554,
            10597,
            false
          ],
          "84": [
            10613,
            10660,
            true
          ],
          "85": [
            10910,
            10943,
            true
          ],
          "86": [
            11129,
            11158,
            true
          ]
        },
        "StakingEscrow.slashStaker": {
          "70": [
            6665,
            6696,
            true
          ],
          "71": [
            12654,
            12666,
            true
          ],
          "72": [
            12765,
            12787,
            false
          ],
          "73": [
            12880,
            12898,
            false
          ],
          "74": [
            13022,
            13033,
            false
          ]
        },
        "StakingEscrow.verifyState": {
          "75": [
            14450,
            14524,
            true
          ],
          "76": [
            14652,
            14737,
            true
          ],
          "77": [
            14968,
            14999,
            false
          ],
          "78": [
            15015,
            15082,
            false
          ],
          "79": [
            15098,
            15155,
            false
          ],
          "80": [
            15171,
            15222,
            false
          ],
          "81": [
            15238,
            15269,
            true
          ]
        },
        "StakingEscrow.withdraw": {
          "62": [
            8861,
            8871,
            true
          ],
          "63": [
            8988,
            9050,
            true
          ],
          "64": [
            9155,
            9207,
            true
          ]
        }
      },
      "20": {},
      "26": {},
      "31": {},
      "34": {
        "Ownable._transferOwnership": {
          "90": [
            2021,
            2043,
            true
          ]
        }
      },
      "36": {},
      "37": {},
      "38": {},
      "39": {
        "SafeERC20._callOptionalReturn": {
          "91": [
            3731,
            3752,
            false
          ],
          "92": [
            3815,
            3845,
            true
          ]
        }
      },
      "40": {
        "Address.functionCallWithValue": {
          "87": [
            4798,
            4828,
            true
          ]
        },
        "Address.verifyCallResult": {
          "88": [
            7388,
            7395,
            false
          ],
          "89": [
            7529,
            7550,
            false
          ]
        }
      },
      "8": {}
    },
    "statements": {
      "11": {},
      "14": {
        "StakingEscrow.depositFromWorkLock": {
          "5": [
            8238,
            8307
          ],
          "6": [
            8479,
            8500
          ],
          "7": [
            8520,
            8577
          ],
          "8": [
            8587,
            8607
          ],
          "9": [
            8618,
            8649
          ]
        },
        "StakingEscrow.getAllTokens": {
          "0": [
            7181,
            7213
          ]
        },
        "StakingEscrow.getStakersLength": {
          "4": [
            13331,
            13352
          ]
        },
        "StakingEscrow.getUnvestedTokens": {
          "33": [
            9698,
            9706
          ],
          "34": [
            9834,
            9851
          ],
          "35": [
            9980,
            10044
          ]
        },
        "StakingEscrow.requestMerge": {
          "16": [
            11697,
            11937
          ],
          "17": [
            12007,
            12046
          ],
          "18": [
            12060,
            12106
          ],
          "19": [
            12126,
            12143
          ]
        },
        "StakingEscrow.setWorkMeasurement": {
          "20": [
            7790,
            7798
          ]
        },
        "StakingEscrow.setupVesting": {
          "37": [
            10546,
            10732
          ],
          "38": [
            10902,
            10987
          ],
          "39": [
            11001,
            11052
          ],
          "40": [
            11066,
            11107
          ],
          "41": [
            11121,
            11202
          ],
          "42": [
            11216,
            11294
          ],
          "43": [
            10783,
            10786
          ]
        },
        "StakingEscrow.slashStaker": {
          "23": [
            12646,
            12696
          ],
          "24": [
            12803,
            12824
          ],
          "25": [
            12844,
            12866
          ],
          "26": [
            12914,
            12932
          ],
          "27": [
            12953,
            13008
          ],
          "28": [
            13049,
            13091
          ]
        },
        "StakingEscrow.supportsHistory": {
          "1": [
            13774,
            13785
          ]
        },
        "StakingEscrow.totalStakedAt": {
          "36": [
            13660,
            13686
          ]
        },
        "StakingEscrow.verifyState": {
          "29": [
            14401,
            14431
          ],
          "30": [
            14442,
            14525
          ],
          "31": [
            14644,
            14738
          ],
          "32": [
            14960,
            15279
          ]
        },
        "StakingEscrow.withdraw": {
          "10": [
            8853,
            8899
          ],
          "11": [
            8967,
            9124
          ],
          "12": [
            9134,
            9274
          ],
          "13": [
            9284,
            9304
          ],
          "14": [
            9315,
            9353
          ],
          "15": [
            9363,
            9397
          ]
        }
      },
      "20": {},
      "26": {
        "Upgradeable.finishUpgrade": {
          "44": [
            2193,
            2234
          ]
        },
        "Upgradeable.verifyState": {
          "48": [
            1923,
            1966
          ]
        }
      },
      "31": {},
      "34": {
        "Ownable._transferOwnership": {
          "49": [
            2013,
            2044
          ],
          "50": [
            2054,
            2097
          ],
          "51": [
            2107,
            2124
          ]
        },
        "Ownable.isOwner": {
          "3": [
            1069,
            1096
          ]
        },
        "Ownable.owner": {
          "2": [
            750,
            763
          ]
        },
        "Ownable.renounceOwnership": {
          "21": [
            1437,
            1482
          ],
          "22": [
            1492,
            1511
          ]
        },
        "Ownable.transferOwnership": {
          "45": [
            1769,
            1797
          ]
        }
      },
      "36": {},
      "37": {},
      "38": {},
      "39": {
        "SafeERC20._callOptionalReturn": {
          "52": [
            3807,
            3892
          ]
        },
        "SafeERC20.safeTransfer": {
          "47": [
            809,
            895
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "46": [
            1046,
            1142
          ]
        }
      },
      "40": {
        "Address.functionCall": {
          "53": [
            3671,
            3730
          ]
        },
        "Address.functionCallWithValue": {
          "54": [
            4790,
            4871
          ],
          "55": [
            4881,
            4941
          ],
          "56": [
            5035,
            5093
          ]
        },
        "Address.verifyCallResult": {
          "57": [
            7411,
            7428
          ],
          "58": [
            7855,
            7875
          ]
        }
      },
      "8": {}
    }
  },
  "dependencies": [
    "Address",
    "Bits",
    "ERC20",
    "ERC20Detailed",
    "IERC20",
    "IERC900History",
    "IStaking",
    "NuCypherToken",
    "Ownable",
    "SafeERC20",
    "TokenRecipient",
    "Upgradeable",
    "WorkLockInterface"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106101c45760003560e01c80639fabeb00116100f9578063dbaa0fc611610097578063ede3842111610071578063ede38421146104af578063f2fde38b146104c5578063fc0c546a146104d8578063fd5e6dd1146104ff57600080fd5b8063dbaa0fc61461044f578063e38a303b14610476578063e8dccd061461049c57600080fd5b8063c9c53232116100d3578063c9c5323214610408578063d094adbf1461041b578063d4b8399214610429578063db6879881461043c57600080fd5b80639fabeb00146103da578063b9626d21146103e2578063c07b5d8c146103f557600080fd5b80634b2cd11811610166578063715018a611610140578063715018a61461039b5780638da5cb5b146103a35780638f32d59b146103b457806399cc218c146103c757600080fd5b80634b2cd118146102c45780634e745f1f146102d75780637033e4a61461038857600080fd5b8063204612a8116101a2578063204612a8146102595780632e1a7d4d1461028b5780633223ff4b1461029e57806349e5add4146102b157600080fd5b8063171f03c2146101c9578063178b6de6146101de5780631c7fd5321461021a575b600080fd5b6101dc6101d73660046117e7565b610512565b005b6102076101ec36600461182e565b6001600160a01b031660009081526006602052604090205490565b6040519081526020015b60405180910390f35b6102417f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610211565b60045461027390600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610211565b6101dc610299366004611849565b6106de565b6102076102ac366004611862565b61099e565b6102076102bf3660046118a3565b610b8c565b600254610241906001600160a01b031681565b61036e6102e536600461182e565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008880154600990980154969861ffff8088169962010000808a0483169a6401000000008b0484169a6601000000000000900484169998938416976001600160a01b0392909404821696939590911691908e565b6040516102119e9d9c9b9a999897969594939291906118da565b60015b6040519015158152602001610211565b6101dc610bdf565b6000546001600160a01b0316610241565b6000546001600160a01b0316331461038b565b6101dc6103d5366004611972565b610c40565b600754610207565b6101dc6103f036600461182e565b610db9565b61020761040336600461182e565b610ed0565b610207610416366004611849565b610f4b565b61020761041636600461182e565b600154610241906001600160a01b031681565b6101dc61044a366004611a02565b610fd5565b6102417f000000000000000000000000000000000000000000000000000000000000000081565b60025461048a90600160a01b900460ff1681565b60405160ff9091168152602001610211565b6101dc6104aa36600461182e565b611229565b6102076104bd366004611a9c565b600092915050565b6101dc6104d336600461182e565b611283565b6102417f000000000000000000000000000000000000000000000000000000000000000081565b61024161050d366004611849565b6112a6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105635760405162461bcd60e51b815260040161055a90611ac6565b60405180910390fd5b816105c65760405162461bcd60e51b815260206004820152602d60248201527f416d6f756e74206f6620746f6b656e7320746f206465706f736974206d75737460448201526c081899481cdc1958da599a5959609a1b606482015260840161055a565b6001600160a01b038316600090815260066020526040902080541580156105fb57506001810154640100000000900461ffff16155b1561064c57600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0386161790555b6106816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866112d0565b828160000160008282546106959190611b20565b90915550506040518381526001600160a01b038516907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250505050565b3360009081526006602052604090205461073a5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206d7573742062652061207374616b6572000000000000000000604482015260640161055a565b6000811161078a5760405162461bcd60e51b815260206004820152601760248201527f56616c7565206d75737420626520737065636966696564000000000000000000604482015260640161055a565b3360009081526006602052604090819020805460078201549251634a11fae360e01b81526001600160a01b039384166004820152919290917f000000000000000000000000000000000000000000000000000000000000000090911690634a11fae390602401602060405180830381865afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108319190611b38565b61083b9084611b20565b11156108a25760405162461bcd60e51b815260206004820152603060248201527f4e6f7420656e6f75676820746f6b656e7320756e7374616b656420696e20542060448201526f1cdd185ada5b99c818dbdb9d1c9858dd60821b606482015260840161055a565b80546108ad33610ed0565b6108b79084611b20565b11156109175760405162461bcd60e51b815260206004820152602960248201527f4e6f7420656e6f75676820746f6b656e732072656c656173656420647572696e604482015268672076657374696e6760b81b606482015260840161055a565b8181600001600082825461092b9190611b51565b9091555061096590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611341565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109e85760405162461bcd60e51b815260040161055a90611b68565b6001600160a01b03808416600090815260066020526040902060078101549091161580610a24575060078101546001600160a01b038481169116145b80610abd57506007810154604051634a11fae360e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911690634a11fae390602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190611b38565b155b610b1d5760405162461bcd60e51b815260206004820152602b60248201527f5374616b696e672070726f766964657220616c72656164792073657420666f7260448201526a103a34329039ba30b5b2b960a91b606482015260840161055a565b60078101546001600160a01b03848116911614610b84576007810180546001600160a01b0319166001600160a01b0385811691821790925560405190918616907fe49f168acc1287c0f7b4541660600e72e51f66e70babb33223525a3f87ae603190600090a35b549392505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd65760405162461bcd60e51b815260040161055a90611ac6565b50600092915050565b6000546001600160a01b03163314610bf657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c885760405162461bcd60e51b815260040161055a90611b68565b60008311610cd85760405162461bcd60e51b815260206004820152601960248201527f50656e616c7479206d7573742062652073706563696669656400000000000000604482015260640161055a565b6001600160a01b038416600090815260066020526040902080548410610cfd57805493505b83816000016000828254610d119190611b51565b909155505083821115610d22578391505b826001600160a01b0316856001600160a01b03167f34040fa1c0549c8572589c39cb87ff7638286467446a4790971d58d931c654bb8685604051610d70929190918252602082015260400190565b60405180910390a38115610db257610db26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611341565b5050505050565b610dc281611376565b600754610dd582629fabeb60e81b6113c9565b14610ddf57600080fd5b600754610de95750565b60006007600081548110610dff57610dff611bad565b60009182526020822001546001600160a01b031691508190610e2b90849063fd5e6dd160e01b906113e2565b6001600160a01b031614610e3e57600080fd5b6001600160a01b03811660008181526006602052604081209190610e6285836113fd565b83548151919250148015610e7e57508260050154816101200151145b8015610e9257508260060154816101400151145b8015610eb3575060078301546101608201516001600160a01b039081169116145b8015610ec757508260040154816101000151145b610db257600080fd5b6001600160a01b038116600090815260066020526040812060058101544210610efc5750600092915050565b6006810154610f0c575492915050565b60008160060154428360050154610f239190611b51565b610f2d9190611bc3565b905080826000015410610f405780610f43565b81545b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf9190611b38565b92915050565b6000546001600160a01b03163314610fec57600080fd5b8483148015610ffa57508281145b61105d5760405162461bcd60e51b815260206004820152602e60248201527f496e70757420617272617973206d75737420686176652073616d65206e756d6260448201526d6572206f6620656c656d656e747360901b606482015260840161055a565b60005b8581101561122057600087878381811061107c5761107c611bad565b9050602002016020810190611091919061182e565b6001600160a01b03811660009081526006602052604090206005810154919250901561110f5760405162461bcd60e51b815260206004820152602760248201527f56657374696e6720706172616d65746572732063616e20626520736574206f6e6044820152666c79206f6e636560c81b606482015260840161055a565b86868481811061112157611121611bad565b602002919091013560058301555084848481811061114157611141611bad565b6020029190910135600683015550600061115a83610ed0565b116111b75760405162461bcd60e51b815260206004820152602760248201527f56657374696e6720706172616d6574657273206d757374206265207365742070604482015266726f7065726c7960c81b606482015260840161055a565b816001600160a01b03167ffb8dc35d14cc25e41d680c975bd50a0640415afdf7af584763fa7549c0b8889782600501548360060154604051611203929190918252602082015260400190565b60405180910390a25050808061121890611be2565b915050611060565b50505050505050565b60028054600160a01b900460ff161461124157600080fd5b6040513381526001600160a01b038216907fd55ec27c5c6316913ed8803c18cfd1bfefea953db909dcba6140744a9d8b0d1f906020015b60405180910390a250565b6000546001600160a01b0316331461129a57600080fd5b6112a3816114c1565b50565b600781815481106112b657600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516001600160a01b038085166024830152831660448201526064810182905261133b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261152f565b50505050565b6040516001600160a01b03831660248201526044810182905261137190849063a9059cbb60e01b90606401611304565b505050565b60028054600160a01b900460ff161461138e57600080fd5b6040513381526001600160a01b038216907f1e8d98c1b4a0d9bd2e2371026b632eb2773fcce41742e41f02f574ab69868d4c90602001611278565b6000806113d98484838080611601565b51949350505050565b6000806113f3858560018685611601565b5195945050505050565b6114aa60405180610220016040528060008152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160008152602001600061ffff16815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081525090565b6000610f4384634e745f1f60e01b60018685611601565b6001600160a01b0381166114d457600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611584826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116519092919063ffffffff16565b80519091501561137157808060200190518101906115a29190611bfd565b6113715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161055a565b6040518481528315611614578260048201525b6001841115611624578160248201525b6000808560200260040183895af48015611642573d6000833e611647565b600082fd5b5095945050505050565b6060611660848460008561166a565b90505b9392505050565b6060824710156116cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161055a565b843b6117195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161055a565b600080866001600160a01b031685876040516117359190611c46565b60006040518083038185875af1925050503d8060008114611772576040519150601f19603f3d011682016040523d82523d6000602084013e611777565b606091505b5091509150611787828286611792565b979650505050505050565b606083156117a1575081611663565b8251156117b15782518084602001fd5b8160405162461bcd60e51b815260040161055a9190611c62565b80356001600160a01b03811681146117e257600080fd5b919050565b6000806000606084860312156117fc57600080fd5b611805846117cb565b925060208401359150604084013561ffff8116811461182357600080fd5b809150509250925092565b60006020828403121561184057600080fd5b611663826117cb565b60006020828403121561185b57600080fd5b5035919050565b6000806040838503121561187557600080fd5b61187e836117cb565b915061188c602084016117cb565b90509250929050565b80151581146112a357600080fd5b600080604083850312156118b657600080fd5b6118bf836117cb565b915060208301356118cf81611895565b809150509250929050565b8e815261ffff8e811660208301528d811660408301528c811660608301528b1660808201526101c081018a60a083015261191a60c083018b61ffff169052565b6001600160a01b03891660e08301528761010083015286610120830152856101408301526119546101608301866001600160a01b03169052565b6101808201939093526101a001529c9b505050505050505050505050565b6000806000806080858703121561198857600080fd5b611991856117cb565b9350602085013592506119a6604086016117cb565b9396929550929360600135925050565b60008083601f8401126119c857600080fd5b50813567ffffffffffffffff8111156119e057600080fd5b6020830191508360208260051b85010111156119fb57600080fd5b9250929050565b60008060008060008060608789031215611a1b57600080fd5b863567ffffffffffffffff80821115611a3357600080fd5b611a3f8a838b016119b6565b90985096506020890135915080821115611a5857600080fd5b611a648a838b016119b6565b90965094506040890135915080821115611a7d57600080fd5b50611a8a89828a016119b6565b979a9699509497509295939492505050565b60008060408385031215611aaf57600080fd5b611ab8836117cb565b946020939093013593505050565b60208082526024908201527f43616c6c6572206d7573742062652074686520576f726b4c6f636b20636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b3357611b33611b0a565b500190565b600060208284031215611b4a57600080fd5b5051919050565b600082821015611b6357611b63611b0a565b500390565b60208082526025908201527f43616c6c6572206d757374206265207468652054207374616b696e6720636f6e6040820152641d1c9858dd60da1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611bdd57611bdd611b0a565b500290565b6000600019821415611bf657611bf6611b0a565b5060010190565b600060208284031215611c0f57600080fd5b815161166381611895565b60005b83811015611c35578181015183820152602001611c1d565b8381111561133b5750506000910152565b60008251611c58818460208701611c1a565b9190910192915050565b6020815260008251806020840152611c81816040850160208701611c1a565b601f01601f1916919091016040019291505056fea2646970667358221220617e872007365934b71111f07ec85c8667bf76dd42c67985c0c48019d561505d64736f6c634300080a0033",
  "deployedSourceMap": "2175:13114:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8075:581;;;;;;:::i;:::-;;:::i;:::-;;7100:120;;;;;;:::i;:::-;-1:-1:-1;;;;;7188:19:14;7162:7;7188:19;;;:10;:19;;;;;:25;;7100:120;;;;948:25:41;;;936:2;921:18;7100:120:14;;;;;;;;4754:43;;;;;;;;-1:-1:-1;;;;;1174:32:41;;;1156:51;;1144:2;1129:18;4754:43:14;984:229:41;4911:34:14;;;;;-1:-1:-1;;;4911:34:14;;-1:-1:-1;;;;;4911:34:14;;;;;;-1:-1:-1;;;;;1382:47:41;;;1364:66;;1352:2;1337:18;4911:34:14;1218:218:41;8789:615:14;;;;;;:::i;:::-;;:::i;11507:643::-;;;;;;:::i;:::-;;:::i;7664:141::-;;;;;;:::i;:::-;;:::i;1026:29:26:-;;;;;-1:-1:-1;;;;;1026:29:26;;;5044:49:14;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5044:49:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;13699:93::-;13781:4;13699:93;;;4110:14:41;;4103:22;4085:41;;4073:2;4058:18;13699:93:14;3945:187:41;1381:137:34;;;:::i;693:77::-;731:7;757:6;-1:-1:-1;;;;;757:6:34;693:77;;1013:90;1053:4;1090:6;-1:-1:-1;;;;;1090:6:34;1076:10;:20;1013:90;;12460:648:14;;;;;;:::i;:::-;;:::i;13253:106::-;13338:7;:14;13253:106;;14325:961;;;;;;:::i;:::-;;:::i;9492:559::-;;;;;;:::i;:::-;;:::i;13566:127::-;;;;;;:::i;:::-;;:::i;7293:118::-;;;;;;:::i;912:21:26:-;;;;;-1:-1:-1;;;;;912:21:26;;;10365:946:14;;;;;;:::i;:::-;;:::i;4803:34::-;;;;;1185:22:26;;;;;-1:-1:-1;;;1185:22:26;;;;;;;;;6402:4:41;6390:17;;;6372:36;;6360:2;6345:18;1185:22:26;6230:184:41;2109:132:26;;;;;;:::i;:::-;;:::i;13432:128:14:-;;;;;;:::i;:::-;13526:7;13432:128;;;;;1689:115:34;;;;;;:::i;:::-;;:::i;4712:36:14:-;;;;;5099:24;;;;;;:::i;:::-;;:::i;8075:581::-;6869:10;-1:-1:-1;;;;;6891:8:14;6869:31;;6861:80;;;;-1:-1:-1;;;6861:80:14;;;;;;;:::i;:::-;;;;;;;;;8246:11;8238:69:::1;;;::::0;-1:-1:-1;;;8238:69:14;;7514:2:41;8238:69:14::1;::::0;::::1;7496:21:41::0;7553:2;7533:18;;;7526:30;7592:34;7572:18;;;7565:62;-1:-1:-1;;;7643:18:41;;;7636:43;7696:19;;8238:69:14::1;7312:409:41::0;8238:69:14::1;-1:-1:-1::0;;;;;8343:19:14;::::1;8317:23;8343:19:::0;;;:10:::1;:19;::::0;;;;8415:10;;:15;:48;::::1;;;-1:-1:-1::0;8434:24:14::1;::::0;::::1;::::0;;;::::1;;;:29:::0;8415:48:::1;8411:100;;;8479:7;:21:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;8479:21:14;;;;;::::1;::::0;;-1:-1:-1;;;;;;8479:21:14::1;-1:-1:-1::0;;;;;8479:21:14;::::1;;::::0;;8411:100:::1;8520:57;-1:-1:-1::0;;;;;8520:5:14::1;:22;8543:10;8563:4;8570:6:::0;8520:22:::1;:57::i;:::-;8601:6;8587:4;:10;;;:20;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;8623:26:14::1;::::0;948:25:41;;;-1:-1:-1;;;;;8623:26:14;::::1;::::0;::::1;::::0;936:2:41;921:18;8623:26:14::1;;;;;;;8228:428;8075:581:::0;;;:::o;8789:615::-;6476:10;6496:1;6465:22;;;:10;:22;;;;;:28;6457:68;;;;-1:-1:-1;;;6457:68:14;;8193:2:41;6457:68:14;;;8175:21:41;8232:2;8212:18;;;8205:30;8271:25;8251:18;;;8244:53;8314:18;;6457:68:14;7991:347:41;6457:68:14;8870:1:::1;8861:6;:10;8853:46;;;::::0;-1:-1:-1;;;8853:46:14;;8545:2:41;8853:46:14::1;::::0;::::1;8527:21:41::0;8584:2;8564:18;;;8557:30;8623:25;8603:18;;;8596:53;8666:18;;8853:46:14::1;8343:347:41::0;8853:46:14::1;8946:10;8909:23;8935:22:::0;;;:10:::1;:22;::::0;;;;;;9040:10;;9015:20:::1;::::0;::::1;::::0;8997:39;;-1:-1:-1;;;8997:39:14;;-1:-1:-1;;;;;9015:20:14;;::::1;8997:39;::::0;::::1;1156:51:41::0;8935:22:14;;9040:10;;8997:8:::1;:17:::0;;::::1;::::0;::::1;::::0;1129:18:41;;8997:39:14::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8988:48;::::0;:6;:48:::1;:::i;:::-;:62;;8967:157;;;::::0;-1:-1:-1;;;8967:157:14;;9086:2:41;8967:157:14::1;::::0;::::1;9068:21:41::0;9125:2;9105:18;;;9098:30;9164:34;9144:18;;;9137:62;-1:-1:-1;;;9215:18:41;;;9208:46;9271:19;;8967:157:14::1;8884:412:41::0;8967:157:14::1;9197:10:::0;;9164:29:::1;9182:10;9164:17;:29::i;:::-;9155:38;::::0;:6;:38:::1;:::i;:::-;:52;;9134:140;;;::::0;-1:-1:-1;;;9134:140:14;;9503:2:41;9134:140:14::1;::::0;::::1;9485:21:41::0;9542:2;9522:18;;;9515:30;9581:34;9561:18;;;9554:62;-1:-1:-1;;;9632:18:41;;;9625:39;9681:19;;9134:140:14::1;9301:405:41::0;9134:140:14::1;9298:6;9284:4;:10;;;:20;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;9315:38:14::1;::::0;-1:-1:-1;;;;;;9315:5:14::1;:18;9334:10;9346:6:::0;9315:18:::1;:38::i;:::-;9368:29;::::0;948:25:41;;;9378:10:14::1;::::0;9368:29:::1;::::0;936:2:41;921:18;9368:29:14::1;;;;;;;8843:561;8789:615:::0;:::o;11507:643::-;11619:7;6665:10;-1:-1:-1;;;;;6687:8:14;6665:31;;6657:81;;;;-1:-1:-1;;;6657:81:14;;;;;;;:::i;:::-;-1:-1:-1;;;;;11668:19:14;;::::1;11642:23;11668:19:::0;;;:10:::1;:19;::::0;;;;11718:20:::1;::::0;::::1;::::0;11668:19;;11718:20:::1;:34:::0;;:90:::1;;-1:-1:-1::0;11768:20:14::1;::::0;::::1;::::0;-1:-1:-1;;;;;11768:40:14;;::::1;:20:::0;::::1;:40;11718:90;:150;;;-1:-1:-1::0;11842:20:14::1;::::0;::::1;::::0;11824:39:::1;::::0;-1:-1:-1;;;11824:39:14;;-1:-1:-1;;;;;11842:20:14;;::::1;11824:39;::::0;::::1;1156:51:41::0;11824:8:14::1;:17:::0;;::::1;::::0;::::1;::::0;1129:18:41;;11824:39:14::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44:::0;11718:150:::1;11697:240;;;::::0;-1:-1:-1;;;11697:240:14;;10449:2:41;11697:240:14::1;::::0;::::1;10431:21:41::0;10488:2;10468:18;;;10461:30;10527:34;10507:18;;;10500:62;-1:-1:-1;;;10578:18:41;;;10571:41;10629:19;;11697:240:14::1;10247:407:41::0;11697:240:14::1;11951:20;::::0;::::1;::::0;-1:-1:-1;;;;;11951:40:14;;::::1;:20:::0;::::1;:40;11947:170;;12007:20;::::0;::::1;:39:::0;;-1:-1:-1;;;;;;12007:39:14::1;-1:-1:-1::0;;;;;12007:39:14;;::::1;::::0;;::::1;::::0;;;12065:41:::1;::::0;12007:39;;12065:41;::::1;::::0;::::1;::::0;-1:-1:-1;;12065:41:14::1;11947:170;12133:10:::0;;11507:643;-1:-1:-1;;;11507:643:14:o;7664:141::-;7767:7;6869:10;-1:-1:-1;;;;;6891:8:14;6869:31;;6861:80;;;;-1:-1:-1;;;6861:80:14;;;;;;;:::i;:::-;-1:-1:-1;7797:1:14::1;7664:141:::0;;;;:::o;1381:137:34:-;1053:4;1090:6;-1:-1:-1;;;;;1090:6:34;1076:10;:20;889:18;;;;;;1479:1:::1;1463:6:::0;;1442:40:::1;::::0;-1:-1:-1;;;;;1463:6:34;;::::1;::::0;1442:40:::1;::::0;1479:1;;1442:40:::1;1509:1;1492:19:::0;;-1:-1:-1;;;;;;1492:19:34::1;::::0;;1381:137::o;12460:648:14:-;6665:10;-1:-1:-1;;;;;6687:8:14;6665:31;;6657:81;;;;-1:-1:-1;;;6657:81:14;;;;;;;:::i;:::-;12665:1:::1;12654:8;:12;12646:50;;;::::0;-1:-1:-1;;;12646:50:14;;10861:2:41;12646:50:14::1;::::0;::::1;10843:21:41::0;10900:2;10880:18;;;10873:30;10939:27;10919:18;;;10912:55;10984:18;;12646:50:14::1;10659:349:41::0;12646:50:14::1;-1:-1:-1::0;;;;;12732:19:14;::::1;12706:23;12732:19:::0;;;:10:::1;:19;::::0;;;;12765:10;;:22;-1:-1:-1;12761:74:14::1;;12814:10:::0;;;-1:-1:-1;12761:74:14::1;12858:8;12844:4;:10;;;:22;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;12880:18:14;;::::1;12876:67;;;12924:8;12914:18;;12876:67;12985:13;-1:-1:-1::0;;;;;12958:50:14::1;12966:7;-1:-1:-1::0;;;;;12958:50:14::1;;12975:8;13000:7;12958:50;;;;;;11187:25:41::0;;;11243:2;11228:18;;11221:34;11175:2;11160:18;;11013:248;12958:50:14::1;;;;;;;;13022:11:::0;;13018:84:::1;;13049:42;-1:-1:-1::0;;;;;13049:5:14::1;:18;13068:13:::0;13083:7;13049:18:::1;:42::i;:::-;12636:472;12460:648:::0;;;;:::o;14325:961::-;14401:30;14419:11;14401:17;:30::i;:::-;14510:7;:14;14450:56;14462:11;-1:-1:-1;;;14450:11:14;:56::i;:::-;:74;14442:83;;;;;;14539:7;:14;14535:56;;14325:961;:::o;14535:56::-;14600:21;14624:7;14632:1;14624:10;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;14624:10:14;;-1:-1:-1;14624:10:14;;14668:50;;14680:11;;-1:-1:-1;;;14693:21:14;14668:11;:50::i;:::-;-1:-1:-1;;;;;14652:85:14;;14644:94;;;;;;-1:-1:-1;;;;;14774:25:14;;14748:23;14774:25;;;:10;:25;;;;;;;14908:42;14930:11;14774:25;14908:21;:42::i;:::-;14989:10;;14968:17;;14876:74;;-1:-1:-1;14968:31:14;:114;;;;;15054:4;:28;;;15015:11;:35;;;:67;14968:114;:187;;;;;15132:4;:23;;;15098:11;:30;;;:57;14968:187;:254;;;;-1:-1:-1;15202:20:14;;;;15171:27;;;;-1:-1:-1;;;;;15171:51:14;;;15202:20;;15171:51;14968:254;:301;;;;;15259:4;:10;;;15238:11;:17;;;:31;14968:301;14960:319;;;;;9492:559;-1:-1:-1;;;;;9602:19:14;;9557:7;9602:19;;;:10;:19;;;;;9635:28;;;;9667:15;-1:-1:-1;9631:86:14;;-1:-1:-1;9705:1:14;;9492:559;-1:-1:-1;;9492:559:14:o;9631:86::-;9730:23;;;;9726:136;;9841:10;;9492:559;-1:-1:-1;;9492:559:14:o;9726:136::-;9871:22;9947:4;:23;;;9928:15;9897:4;:28;;;:46;;;;:::i;:::-;9896:74;;;;:::i;:::-;9871:99;;10000:14;9987:4;:10;;;:27;:57;;10030:14;9987:57;;;10017:10;;9987:57;9980:64;9492:559;-1:-1:-1;;;;9492:559:14:o;13566:127::-;13641:7;13667:5;-1:-1:-1;;;;;13667:17:14;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13660:26;13566:127;-1:-1:-1;;13566:127:14:o;10365:946::-;1053:4:34;1090:6;-1:-1:-1;;;;;1090:6:34;1076:10;:20;889:18;;;;;;10554:43:14;;::::1;:106:::0;::::1;;;-1:-1:-1::0;10613:47:14;;::::1;10554:106;10546:186;;;::::0;-1:-1:-1;;;10546:186:14;;11773:2:41;10546:186:14::1;::::0;::::1;11755:21:41::0;11812:2;11792:18;;;11785:30;11851:34;11831:18;;;11824:62;-1:-1:-1;;;11902:18:41;;;11895:44;11956:19;;10546:186:14::1;11571:410:41::0;10546:186:14::1;10747:9;10742:563;10762:19:::0;;::::1;10742:563;;;10802:14;10819:8;;10828:1;10819:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;10870:18:14;::::1;10844:23;10870:18:::0;;;:10:::1;:18;::::0;;;;10910:28:::1;::::0;::::1;::::0;10802;;-1:-1:-1;10870:18:14;10910:33;10902:85:::1;;;::::0;-1:-1:-1;;;10902:85:14;;12188:2:41;10902:85:14::1;::::0;::::1;12170:21:41::0;12227:2;12207:18;;;12200:30;12266:34;12246:18;;;12239:62;-1:-1:-1;;;12317:18:41;;;12310:37;12364:19;;10902:85:14::1;11986:403:41::0;10902:85:14::1;11032:17;;11050:1;11032:20;;;;;;;:::i;:::-;;;::::0;;;::::1;;11001:28;::::0;::::1;:51:::0;-1:-1:-1;11092:12:14;;11105:1;11092:15;;::::1;;;;;:::i;:::-;;;::::0;;;::::1;;11066:23;::::0;::::1;:41:::0;-1:-1:-1;11157:1:14::1;11129:25;11147:6:::0;11129:17:::1;:25::i;:::-;:29;11121:81;;;::::0;-1:-1:-1;;;11121:81:14;;12596:2:41;11121:81:14::1;::::0;::::1;12578:21:41::0;12635:2;12615:18;;;12608:30;12674:34;12654:18;;;12647:62;-1:-1:-1;;;12725:18:41;;;12718:37;12772:19;;11121:81:14::1;12394:403:41::0;11121:81:14::1;11232:6;-1:-1:-1::0;;;;;11221:73:14::1;;11240:4;:28;;;11270:4;:23;;;11221:73;;;;;;11187:25:41::0;;;11243:2;11228:18;;11221:34;11175:2;11160:18;;11013:248;11221:73:14::1;;;;;;;;10788:517;;10783:3;;;;;:::i;:::-;;;;10742:563;;;;10365:946:::0;;;;;;:::o;2109:132:26:-;1451:1;1653:9;;-1:-1:-1;;;1653:9:26;;:25;:9;:25;1645:34;;;;;;2198:36:::1;::::0;2223:10:::1;1156:51:41::0;;-1:-1:-1;;;;;2198:36:26;::::1;::::0;::::1;::::0;1144:2:41;1129:18;2198:36:26::1;;;;;;;;2109:132:::0;:::o;1689:115:34:-;1053:4;1090:6;-1:-1:-1;;;;;1090:6:34;1076:10;:20;889:18;;;;;;1769:28:::1;1788:8;1769:18;:28::i;:::-;1689:115:::0;:::o;5099:24:14:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5099:24:14;;-1:-1:-1;5099:24:14;:::o;908:241:39:-;1073:68;;-1:-1:-1;;;;;13200:15:41;;;1073:68:39;;;13182:34:41;13252:15;;13232:18;;;13225:43;13284:18;;;13277:34;;;1046:96:39;;1066:5;;-1:-1:-1;;;1096:27:39;13117:18:41;;1073:68:39;;;;-1:-1:-1;;1073:68:39;;;;;;;;;;;;;;-1:-1:-1;;;;;1073:68:39;-1:-1:-1;;;;;;1073:68:39;;;;;;;;;;1046:19;:96::i;:::-;908:241;;;;:::o;697:205::-;836:58;;-1:-1:-1;;;;;13514:32:41;;836:58:39;;;13496:51:41;13563:18;;;13556:34;;;809:86:39;;829:5;;-1:-1:-1;;;859:23:39;13469:18:41;;836:58:39;13322:274:41;809:86:39;697:205;;;:::o;1837:136:26:-;1451:1;1653:9;;-1:-1:-1;;;1653:9:26;;:25;:9;:25;1645:34;;;;;;1928:38:::1;::::0;1955:10:::1;1156:51:41::0;;-1:-1:-1;;;;;1928:38:26;::::1;::::0;::::1;::::0;1144:2:41;1129:18;1928:38:26::1;984:229:41::0;3599:259:26;3681:14;;3735:44;3751:7;3760:9;3681:14;;;3735:15;:44::i;:::-;3822:20;;3599:259;-1:-1:-1;;;;3599:259:26:o;3964:286::-;4065:14;;4119:52;4135:7;4144:9;4155:1;4158:9;4065:14;4119:15;:52::i;:::-;4214:20;;3964:286;-1:-1:-1;;;;;3964:286:26:o;13931:292:14:-;14022:24;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14022:24:14;14062:21;14086:65;14102:7;-1:-1:-1;;;14137:1:14;14140:7;14062:21;14086:15;:65::i;1948:183:34:-;-1:-1:-1;;;;;2021:22:34;;2013:31;;;;;;2080:6;;;2059:38;;-1:-1:-1;;;;;2059:38:34;;;;2080:6;;;2059:38;;;2107:6;:17;;-1:-1:-1;;;;;;2107:17:34;-1:-1:-1;;;;;2107:17:34;;;;;;;;;;1948:183::o;3203:706:39:-;3622:23;3648:69;3676:4;3648:69;;;;;;;;;;;;;;;;;3656:5;-1:-1:-1;;;;;3648:27:39;;;:69;;;;;:::i;:::-;3731:17;;3622:95;;-1:-1:-1;3731:21:39;3727:176;;3826:10;3815:30;;;;;;;;;;;;:::i;:::-;3807:85;;;;-1:-1:-1;;;3807:85:39;;14053:2:41;3807:85:39;;;14035:21:41;14092:2;14072:18;;;14065:30;14131:34;14111:18;;;14104:62;-1:-1:-1;;;14182:18:41;;;14175:40;14232:19;;3807:85:39;13851:406:41;2594:899:26;2875:4;2869:11;2893:32;;;2941:25;;2938:105;;3018:10;3011:4;2996:13;2992:24;2985:44;2938:105;3082:1;3062:18;3059:25;3056:105;;;3136:10;3129:4;3114:13;3110:24;3103:44;3056:105;3270:1;3267;3245:18;3239:4;3235:29;3229:4;3225:40;3210:13;3201:7;3194:5;3181:91;3289:71;;;;3442:16;3437:3;3422:13;3407:52;3174:303;;3289:71;3340:1;3325:13;3318:24;3174:303;;2594:899;;;;;;;:::o;3514:223:40:-;3647:12;3678:52;3700:6;3708:4;3714:1;3717:12;3678:21;:52::i;:::-;3671:59;;3514:223;;;;;;:::o;4601:499::-;4766:12;4823:5;4798:21;:30;;4790:81;;;;-1:-1:-1;;;4790:81:40;;14464:2:41;4790:81:40;;;14446:21:41;14503:2;14483:18;;;14476:30;14542:34;14522:18;;;14515:62;-1:-1:-1;;;14593:18:41;;;14586:36;14639:19;;4790:81:40;14262:402:41;4790:81:40;1087:20;;4881:60;;;;-1:-1:-1;;;4881:60:40;;14871:2:41;4881:60:40;;;14853:21:41;14910:2;14890:18;;;14883:30;14949:31;14929:18;;;14922:59;14998:18;;4881:60:40;14669:353:41;4881:60:40;4953:12;4967:23;4994:6;-1:-1:-1;;;;;4994:11:40;5013:5;5020:4;4994:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4952:73;;;;5042:51;5059:7;5068:10;5080:12;5042:16;:51::i;:::-;5035:58;4601:499;-1:-1:-1;;;;;;;4601:499:40:o;7214:692::-;7360:12;7388:7;7384:516;;;-1:-1:-1;7418:10:40;7411:17;;7384:516;7529:17;;:21;7525:365;;7723:10;7717:17;7783:15;7770:10;7766:2;7762:19;7755:44;7525:365;7862:12;7855:20;;-1:-1:-1;;;7855:20:40;;;;;;;;:::i;14:173:41:-;82:20;;-1:-1:-1;;;;;131:31:41;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:414::-;268:6;276;284;337:2;325:9;316:7;312:23;308:32;305:52;;;353:1;350;343:12;305:52;376:29;395:9;376:29;:::i;:::-;366:39;;452:2;441:9;437:18;424:32;414:42;;506:2;495:9;491:18;478:32;550:6;543:5;539:18;532:5;529:29;519:57;;572:1;569;562:12;519:57;595:5;585:15;;;192:414;;;;;:::o;611:186::-;670:6;723:2;711:9;702:7;698:23;694:32;691:52;;;739:1;736;729:12;691:52;762:29;781:9;762:29;:::i;1441:180::-;1500:6;1553:2;1541:9;1532:7;1528:23;1524:32;1521:52;;;1569:1;1566;1559:12;1521:52;-1:-1:-1;1592:23:41;;1441:180;-1:-1:-1;1441:180:41:o;1626:260::-;1694:6;1702;1755:2;1743:9;1734:7;1730:23;1726:32;1723:52;;;1771:1;1768;1761:12;1723:52;1794:29;1813:9;1794:29;:::i;:::-;1784:39;;1842:38;1876:2;1865:9;1861:18;1842:38;:::i;:::-;1832:48;;1626:260;;;;;:::o;1891:118::-;1977:5;1970:13;1963:21;1956:5;1953:32;1943:60;;1999:1;1996;1989:12;2014:315;2079:6;2087;2140:2;2128:9;2119:7;2115:23;2111:32;2108:52;;;2156:1;2153;2146:12;2108:52;2179:29;2198:9;2179:29;:::i;:::-;2169:39;;2258:2;2247:9;2243:18;2230:32;2271:28;2293:5;2271:28;:::i;:::-;2318:5;2308:15;;;2014:315;;;;;:::o;2746:1194::-;3251:25;;;3324:6;3312:19;;;3307:2;3292:18;;3285:47;3368:19;;;3363:2;3348:18;;3341:47;3424:19;;;3419:2;3404:18;;3397:47;2716:18;;3494:3;3479:19;;2704:31;3238:3;3223:19;;3536:6;3530:3;3519:9;3515:19;3508:35;3552:46;3593:3;3582:9;3578:19;3570:6;2727;2716:18;2704:31;;2651:90;3552:46;-1:-1:-1;;;;;2400:31:41;;3649:3;3634:19;;2388:44;3691:6;3685:3;3674:9;3670:19;3663:35;3735:6;3729:3;3718:9;3714:19;3707:35;3779:7;3773:3;3762:9;3758:19;3751:36;3796:48;3839:3;3828:9;3824:19;3815:7;-1:-1:-1;;;;;2400:31:41;2388:44;;2334:104;3796:48;3875:3;3860:19;;3853:36;;;;3920:3;3905:19;3898:36;2746:1194;;-1:-1:-1;;;;;;;;;;;;2746:1194:41:o;4137:397::-;4223:6;4231;4239;4247;4300:3;4288:9;4279:7;4275:23;4271:33;4268:53;;;4317:1;4314;4307:12;4268:53;4340:29;4359:9;4340:29;:::i;:::-;4330:39;;4416:2;4405:9;4401:18;4388:32;4378:42;;4439:38;4473:2;4462:9;4458:18;4439:38;:::i;:::-;4137:397;;;;-1:-1:-1;4429:48:41;;4524:2;4509:18;4496:32;;-1:-1:-1;;4137:397:41:o;4539:367::-;4602:8;4612:6;4666:3;4659:4;4651:6;4647:17;4643:27;4633:55;;4684:1;4681;4674:12;4633:55;-1:-1:-1;4707:20:41;;4750:18;4739:30;;4736:50;;;4782:1;4779;4772:12;4736:50;4819:4;4811:6;4807:17;4795:29;;4879:3;4872:4;4862:6;4859:1;4855:14;4847:6;4843:27;4839:38;4836:47;4833:67;;;4896:1;4893;4886:12;4833:67;4539:367;;;;;:::o;4911:1088::-;5069:6;5077;5085;5093;5101;5109;5162:2;5150:9;5141:7;5137:23;5133:32;5130:52;;;5178:1;5175;5168:12;5130:52;5218:9;5205:23;5247:18;5288:2;5280:6;5277:14;5274:34;;;5304:1;5301;5294:12;5274:34;5343:70;5405:7;5396:6;5385:9;5381:22;5343:70;:::i;:::-;5432:8;;-1:-1:-1;5317:96:41;-1:-1:-1;5520:2:41;5505:18;;5492:32;;-1:-1:-1;5536:16:41;;;5533:36;;;5565:1;5562;5555:12;5533:36;5604:72;5668:7;5657:8;5646:9;5642:24;5604:72;:::i;:::-;5695:8;;-1:-1:-1;5578:98:41;-1:-1:-1;5783:2:41;5768:18;;5755:32;;-1:-1:-1;5799:16:41;;;5796:36;;;5828:1;5825;5818:12;5796:36;;5867:72;5931:7;5920:8;5909:9;5905:24;5867:72;:::i;:::-;4911:1088;;;;-1:-1:-1;4911:1088:41;;-1:-1:-1;4911:1088:41;;5958:8;;4911:1088;-1:-1:-1;;;4911:1088:41:o;6419:254::-;6487:6;6495;6548:2;6536:9;6527:7;6523:23;6519:32;6516:52;;;6564:1;6561;6554:12;6516:52;6587:29;6606:9;6587:29;:::i;:::-;6577:39;6663:2;6648:18;;;;6635:32;;-1:-1:-1;;;6419:254:41:o;6907:400::-;7109:2;7091:21;;;7148:2;7128:18;;;7121:30;7187:34;7182:2;7167:18;;7160:62;-1:-1:-1;;;7253:2:41;7238:18;;7231:34;7297:3;7282:19;;6907:400::o;7726:127::-;7787:10;7782:3;7778:20;7775:1;7768:31;7818:4;7815:1;7808:15;7842:4;7839:1;7832:15;7858:128;7898:3;7929:1;7925:6;7922:1;7919:13;7916:39;;;7935:18;;:::i;:::-;-1:-1:-1;7971:9:41;;7858:128::o;8695:184::-;8765:6;8818:2;8806:9;8797:7;8793:23;8789:32;8786:52;;;8834:1;8831;8824:12;8786:52;-1:-1:-1;8857:16:41;;8695:184;-1:-1:-1;8695:184:41:o;9711:125::-;9751:4;9779:1;9776;9773:8;9770:34;;;9784:18;;:::i;:::-;-1:-1:-1;9821:9:41;;9711:125::o;9841:401::-;10043:2;10025:21;;;10082:2;10062:18;;;10055:30;10121:34;10116:2;10101:18;;10094:62;-1:-1:-1;;;10187:2:41;10172:18;;10165:35;10232:3;10217:19;;9841:401::o;11266:127::-;11327:10;11322:3;11318:20;11315:1;11308:31;11358:4;11355:1;11348:15;11382:4;11379:1;11372:15;11398:168;11438:7;11504:1;11500;11496:6;11492:14;11489:1;11486:21;11481:1;11474:9;11467:17;11463:45;11460:71;;;11511:18;;:::i;:::-;-1:-1:-1;11551:9:41;;11398:168::o;12802:135::-;12841:3;-1:-1:-1;;12862:17:41;;12859:43;;;12882:18;;:::i;:::-;-1:-1:-1;12929:1:41;12918:13;;12802:135::o;13601:245::-;13668:6;13721:2;13709:9;13700:7;13696:23;13692:32;13689:52;;;13737:1;13734;13727:12;13689:52;13769:9;13763:16;13788:28;13810:5;13788:28;:::i;15027:258::-;15099:1;15109:113;15123:6;15120:1;15117:13;15109:113;;;15199:11;;;15193:18;15180:11;;;15173:39;15145:2;15138:10;15109:113;;;15240:6;15237:1;15234:13;15231:48;;;-1:-1:-1;;15275:1:41;15257:16;;15250:27;15027:258::o;15290:274::-;15419:3;15457:6;15451:13;15473:53;15519:6;15514:3;15507:4;15499:6;15495:17;15473:53;:::i;:::-;15542:16;;;;;15290:274;-1:-1:-1;;15290:274:41:o;15569:383::-;15718:2;15707:9;15700:21;15681:4;15750:6;15744:13;15793:6;15788:2;15777:9;15773:18;15766:34;15809:66;15868:6;15863:2;15852:9;15848:18;15843:2;15835:6;15831:15;15809:66;:::i;:::-;15936:2;15915:15;-1:-1:-1;;15911:29:41;15896:45;;;;15943:2;15892:54;;15569:383;-1:-1:-1;;15569:383:41:o",
  "language": "Solidity",
  "natspec": {
    "details": "|v6.2.2|",
    "events": {
      "Deposited(address,uint256)": {
        "params": {
          "staker": "Staker address",
          "value": "Amount deposited (in NuNits)"
        }
      },
      "MergeRequested(address,address)": {
        "params": {
          "staker": "Staker address",
          "stakingProvider": "Staking provider address"
        }
      },
      "Slashed(address,uint256,address,uint256)": {
        "params": {
          "investigator": "Investigator address",
          "penalty": "Slashing penalty",
          "reward": "Value of reward provided to investigator (in NuNits)",
          "staker": "Staker address"
        }
      },
      "VestingSet(address,uint256,uint256)": {
        "params": {
          "releaseRate": "Release rate",
          "releaseTimestamp": "Release timestamp",
          "staker": "Staker address"
        }
      },
      "Withdrawn(address,uint256)": {
        "params": {
          "staker": "Staker address",
          "value": "Amount withdraws (in NuNits)"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "notice": "Constructor sets address of token contract and parameters for staking",
        "params": {
          "_tStaking": "T token staking contract",
          "_token": "NuCypher token contract",
          "_workLock": "WorkLock contract. Zero address if there is no WorkLock"
        }
      },
      "depositFromWorkLock(address,uint256,uint16)": {
        "notice": "Deposit tokens from WorkLock contract",
        "params": {
          "_staker": "Staker address",
          "_unlockingDuration": "Amount of periods during which tokens will be unlocked when wind down is enabled",
          "_value": "Amount of tokens to deposit"
        }
      },
      "finishUpgrade(address)": {
        "details": "Copy values from the new target to the current storage",
        "params": {
          "_target": "New target contract address"
        }
      },
      "getAllTokens(address)": {
        "notice": "Get all tokens belonging to the staker"
      },
      "getCompletedWork(address)": {
        "notice": "Get work that completed by the staker"
      },
      "getStakersLength()": {
        "notice": "Return the length of the array of stakers"
      },
      "getUnvestedTokens(address)": {
        "notice": "Returns amount of not released yet tokens for staker"
      },
      "isOwner()": {
        "returns": {
          "_0": "true if `msg.sender` is the owner of the contract."
        }
      },
      "owner()": {
        "returns": {
          "_0": "the address of the owner."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract.",
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      },
      "requestMerge(address,address)": {
        "notice": "Request migration to threshold network",
        "params": {
          "_staker": "Staker address",
          "_stakingProvider": "Staking provider address"
        },
        "returns": {
          "_0": "Amount of tokens"
        }
      },
      "setWorkMeasurement(address,bool)": {
        "notice": "Stub for WorkLock",
        "params": {
          "_measureWork": "Value for `measureWork` parameter",
          "_staker": "Staker"
        },
        "returns": {
          "_0": "Work that was previously done"
        }
      },
      "setupVesting(address[],uint256[],uint256[])": {
        "details": "If release rate is 0 then all value will be locked before release timestamp",
        "notice": "Setup vesting parameters",
        "params": {
          "_releaseRate": "Array of release rates",
          "_releaseTimestamp": "Array of timestamps when stake will be released",
          "_stakers": "Array of stakers"
        }
      },
      "slashStaker(address,uint256,address,uint256)": {
        "notice": "Slash the staker's stake and reward the investigator",
        "params": {
          "_investigator": "Investigator",
          "_penalty": "Penalty",
          "_reward": "Reward for the investigator",
          "_staker": "Staker's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "verifyState(address)": {
        "details": "the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw available amount of NU tokens to staker",
        "params": {
          "_value": "Amount of tokens to withdraw"
        }
      }
    },
    "notice": "Contract holds and locks stakers tokens. Each staker that locks their tokens will receive some compensation",
    "title": "StakingEscrow",
    "version": 1
  },
  "offset": [
    2175,
    15289
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9FABEB00 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xDBAA0FC6 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEDE38421 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEDE38421 EQ PUSH2 0x4AF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4C5 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x4D8 JUMPI DUP1 PUSH4 0xFD5E6DD1 EQ PUSH2 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDBAA0FC6 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0xE38A303B EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0xE8DCCD06 EQ PUSH2 0x49C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC9C53232 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC9C53232 EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0xD094ADBF EQ PUSH2 0x41B JUMPI DUP1 PUSH4 0xD4B83992 EQ PUSH2 0x429 JUMPI DUP1 PUSH4 0xDB687988 EQ PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9FABEB00 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0xB9626D21 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0xC07B5D8C EQ PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4B2CD118 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x39B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x99CC218C EQ PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4B2CD118 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x4E745F1F EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0x7033E4A6 EQ PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x204612A8 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x204612A8 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x3223FF4B EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x49E5ADD4 EQ PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x171F03C2 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x178B6DE6 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x1C7FD532 EQ PUSH2 0x21A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x17E7 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x207 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x241 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x273 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x1849 JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x207 PUSH2 0x2AC CALLDATASIZE PUSH1 0x4 PUSH2 0x1862 JUMP JUMPDEST PUSH2 0x99E JUMP JUMPDEST PUSH2 0x207 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD SWAP7 DUP7 ADD SLOAD PUSH1 0x7 DUP8 ADD SLOAD PUSH1 0x8 DUP9 ADD SLOAD PUSH1 0x9 SWAP1 SWAP9 ADD SLOAD SWAP7 SWAP9 PUSH2 0xFFFF DUP1 DUP9 AND SWAP10 PUSH3 0x10000 DUP1 DUP11 DIV DUP4 AND SWAP11 PUSH5 0x100000000 DUP12 DIV DUP5 AND SWAP11 PUSH7 0x1000000000000 SWAP1 DIV DUP5 AND SWAP10 SWAP9 SWAP4 DUP5 AND SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP5 DIV DUP3 AND SWAP7 SWAP4 SWAP6 SWAP1 SWAP2 AND SWAP2 SWAP1 DUP15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x241 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x38B JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1972 JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x207 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x207 PUSH2 0x403 CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x207 PUSH2 0x416 CALLDATASIZE PUSH1 0x4 PUSH2 0x1849 JUMP JUMPDEST PUSH2 0xF4B JUMP JUMPDEST PUSH2 0x207 PUSH2 0x416 CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0x241 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x48A SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x4AA CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH2 0x1229 JUMP JUMPDEST PUSH2 0x207 PUSH2 0x4BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9C JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x4D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x182E JUMP JUMPDEST PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x241 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x241 PUSH2 0x50D CALLDATASIZE PUSH1 0x4 PUSH2 0x1849 JUMP JUMPDEST PUSH2 0x12A6 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55A SWAP1 PUSH2 0x1AC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206F6620746F6B656E7320746F206465706F736974206D757374 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x81899481CDC1958DA599A5959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO DUP1 ISZERO PUSH2 0x5FB JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH2 0xFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x64C JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x681 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS DUP7 PUSH2 0x12D0 JUMP JUMPDEST DUP3 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x695 SWAP2 SWAP1 PUSH2 0x1B20 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0x2DA466A7B24304F47E87FA2E1E5A81B9831CE54FEC19055CE277CA2F39BA42C4 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x73A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206D7573742062652061207374616B6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x78A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56616C7565206D75737420626520737065636966696564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x7 DUP3 ADD SLOAD SWAP3 MLOAD PUSH4 0x4A11FAE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x4A11FAE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x80D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x831 SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH2 0x83B SWAP1 DUP5 PUSH2 0x1B20 JUMP JUMPDEST GT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E7320756E7374616B656420696E205420 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1CDD185ADA5B99C818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST DUP1 SLOAD PUSH2 0x8AD CALLER PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 DUP5 PUSH2 0x1B20 JUMP JUMPDEST GT ISZERO PUSH2 0x917 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072656C656173656420647572696E PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x672076657374696E67 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x92B SWAP2 SWAP1 PUSH2 0x1B51 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x965 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP5 PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x9E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55A SWAP1 PUSH2 0x1B68 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD SLOAD SWAP1 SWAP2 AND ISZERO DUP1 PUSH2 0xA24 JUMPI POP PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 0xABD JUMPI POP PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x4A11FAE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x4A11FAE3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA97 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xABB SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0xB1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B696E672070726F766964657220616C72656164792073657420666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x103A34329039BA30B5B2B9 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0xB84 JUMPI PUSH1 0x7 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP7 AND SWAP1 PUSH32 0xE49F168ACC1287C0F7B4541660600E72E51F66E70BABB33223525A3F87AE6031 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xBD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55A SWAP1 PUSH2 0x1AC6 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xC88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55A SWAP1 PUSH2 0x1B68 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0xCD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50656E616C7479206D7573742062652073706563696669656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 LT PUSH2 0xCFD JUMPI DUP1 SLOAD SWAP4 POP JUMPDEST DUP4 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xD11 SWAP2 SWAP1 PUSH2 0x1B51 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP4 DUP3 GT ISZERO PUSH2 0xD22 JUMPI DUP4 SWAP2 POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x34040FA1C0549C8572589C39CB87FF7638286467446A4790971D58D931C654BB DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0xD70 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 ISZERO PUSH2 0xDB2 JUMPI PUSH2 0xDB2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP5 DUP5 PUSH2 0x1341 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDC2 DUP2 PUSH2 0x1376 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0xDD5 DUP3 PUSH3 0x9FABEB PUSH1 0xE8 SHL PUSH2 0x13C9 JUMP JUMPDEST EQ PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH2 0xDE9 JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xDFF JUMPI PUSH2 0xDFF PUSH2 0x1BAD JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP2 SWAP1 PUSH2 0xE2B SWAP1 DUP5 SWAP1 PUSH4 0xFD5E6DD1 PUSH1 0xE0 SHL SWAP1 PUSH2 0x13E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 PUSH2 0xE62 DUP6 DUP4 PUSH2 0x13FD JUMP JUMPDEST DUP4 SLOAD DUP2 MLOAD SWAP2 SWAP3 POP EQ DUP1 ISZERO PUSH2 0xE7E JUMPI POP DUP3 PUSH1 0x5 ADD SLOAD DUP2 PUSH2 0x120 ADD MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0xE92 JUMPI POP DUP3 PUSH1 0x6 ADD SLOAD DUP2 PUSH2 0x140 ADD MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0xEB3 JUMPI POP PUSH1 0x7 DUP4 ADD SLOAD PUSH2 0x160 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 ISZERO PUSH2 0xEC7 JUMPI POP DUP3 PUSH1 0x4 ADD SLOAD DUP2 PUSH2 0x100 ADD MLOAD EQ JUMPDEST PUSH2 0xDB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD TIMESTAMP LT PUSH2 0xEFC JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 ADD SLOAD PUSH2 0xF0C JUMPI SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x6 ADD SLOAD TIMESTAMP DUP4 PUSH1 0x5 ADD SLOAD PUSH2 0xF23 SWAP2 SWAP1 PUSH2 0x1B51 JUMP JUMPDEST PUSH2 0xF2D SWAP2 SWAP1 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x0 ADD SLOAD LT PUSH2 0xF40 JUMPI DUP1 PUSH2 0xF43 JUMP JUMPDEST DUP2 SLOAD JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFCF SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP4 EQ DUP1 ISZERO PUSH2 0xFFA JUMPI POP DUP3 DUP2 EQ JUMPDEST PUSH2 0x105D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E70757420617272617973206D75737420686176652073616D65206E756D62 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6572206F6620656C656D656E7473 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1220 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x107C JUMPI PUSH2 0x107C PUSH2 0x1BAD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1091 SWAP2 SWAP1 PUSH2 0x182E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD SWAP2 SWAP3 POP SWAP1 ISZERO PUSH2 0x110F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56657374696E6720706172616D65746572732063616E20626520736574206F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x6C79206F6E6365 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1121 JUMPI PUSH2 0x1121 PUSH2 0x1BAD JUMP JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x5 DUP4 ADD SSTORE POP DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1141 JUMPI PUSH2 0x1141 PUSH2 0x1BAD JUMP JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x6 DUP4 ADD SSTORE POP PUSH1 0x0 PUSH2 0x115A DUP4 PUSH2 0xED0 JUMP JUMPDEST GT PUSH2 0x11B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56657374696E6720706172616D6574657273206D757374206265207365742070 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x726F7065726C79 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xFB8DC35D14CC25E41D680C975BD50A0640415AFDF7AF584763FA7549C0B88897 DUP3 PUSH1 0x5 ADD SLOAD DUP4 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x1203 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP DUP1 DUP1 PUSH2 0x1218 SWAP1 PUSH2 0x1BE2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1060 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND EQ PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xD55EC27C5C6316913ED8803C18CFD1BFEFEA953DB909DCBA6140744A9D8B0D1F SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x129A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A3 DUP2 PUSH2 0x14C1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x133B SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x152F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1371 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x1304 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND EQ PUSH2 0x138E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0x1E8D98C1B4A0D9BD2E2371026B632EB2773FCCE41742E41F02F574AB69868D4C SWAP1 PUSH1 0x20 ADD PUSH2 0x1278 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13D9 DUP5 DUP5 DUP4 DUP1 DUP1 PUSH2 0x1601 JUMP JUMPDEST MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13F3 DUP6 DUP6 PUSH1 0x1 DUP7 DUP6 PUSH2 0x1601 JUMP JUMPDEST MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x14AA PUSH1 0x40 MLOAD DUP1 PUSH2 0x220 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF43 DUP5 PUSH4 0x4E745F1F PUSH1 0xE0 SHL PUSH1 0x1 DUP7 DUP6 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x14D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1584 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1651 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1371 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x15A2 SWAP2 SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH2 0x1371 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP4 ISZERO PUSH2 0x1614 JUMPI DUP3 PUSH1 0x4 DUP3 ADD MSTORE JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x1624 JUMPI DUP2 PUSH1 0x24 DUP3 ADD MSTORE JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x20 MUL PUSH1 0x4 ADD DUP4 DUP10 GAS DELEGATECALL DUP1 ISZERO PUSH2 0x1642 JUMPI RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x0 DUP3 REVERT JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1660 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x166A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55A JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x1719 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1735 SWAP2 SWAP1 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1772 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1777 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1787 DUP3 DUP3 DUP7 PUSH2 0x1792 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x17A1 JUMPI POP DUP2 PUSH2 0x1663 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x17B1 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55A SWAP2 SWAP1 PUSH2 0x1C62 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1805 DUP5 PUSH2 0x17CB JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1663 DUP3 PUSH2 0x17CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x185B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x187E DUP4 PUSH2 0x17CB JUMP JUMPDEST SWAP2 POP PUSH2 0x188C PUSH1 0x20 DUP5 ADD PUSH2 0x17CB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x12A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18BF DUP4 PUSH2 0x17CB JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18CF DUP2 PUSH2 0x1895 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP15 DUP2 MSTORE PUSH2 0xFFFF DUP15 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP14 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP12 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1C0 DUP2 ADD DUP11 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x191A PUSH1 0xC0 DUP4 ADD DUP12 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0xE0 DUP4 ADD MSTORE DUP8 PUSH2 0x100 DUP4 ADD MSTORE DUP7 PUSH2 0x120 DUP4 ADD MSTORE DUP6 PUSH2 0x140 DUP4 ADD MSTORE PUSH2 0x1954 PUSH2 0x160 DUP4 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x180 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x1A0 ADD MSTORE SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1991 DUP6 PUSH2 0x17CB JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x19A6 PUSH1 0x40 DUP7 ADD PUSH2 0x17CB JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x19FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1A1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A3F DUP11 DUP4 DUP12 ADD PUSH2 0x19B6 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A64 DUP11 DUP4 DUP12 ADD PUSH2 0x19B6 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A8A DUP10 DUP3 DUP11 ADD PUSH2 0x19B6 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AB8 DUP4 PUSH2 0x17CB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206D7573742062652074686520576F726B4C6F636B20636F6E74 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1C9858DD PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B33 JUMPI PUSH2 0x1B33 PUSH2 0x1B0A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B63 JUMPI PUSH2 0x1B63 PUSH2 0x1B0A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206D757374206265207468652054207374616B696E6720636F6E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1BDD JUMPI PUSH2 0x1BDD PUSH2 0x1B0A JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1BF6 JUMPI PUSH2 0x1BF6 PUSH2 0x1B0A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1663 DUP2 PUSH2 0x1895 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C35 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C1D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x133B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C58 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C1A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C81 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C1A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x7E87 KECCAK256 SMOD CALLDATASIZE MSIZE CALLVALUE 0xB7 GT GT CREATE PUSH31 0xC85C8667BF76DD42C67985C0C48019D561505D64736F6C634300080A003300 ",
  "pcMap": {
    "0": {
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "5": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "CALLVALUE",
      "path": "14"
    },
    "6": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "7": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "8": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "12": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "16": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "17": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "POP",
      "path": "14"
    },
    "18": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "21": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "LT",
      "path": "14"
    },
    "22": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1C4"
    },
    "25": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "26": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "29": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "SHR",
      "path": "14"
    },
    "32": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "33": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x9FABEB00"
    },
    "38": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "39": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF9"
    },
    "42": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "43": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "44": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xDBAA0FC6"
    },
    "49": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "50": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x97"
    },
    "53": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "54": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "55": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xEDE38421"
    },
    "60": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "61": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x71"
    },
    "64": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "65": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "66": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xEDE38421"
    },
    "71": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "72": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x4AF"
    },
    "75": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "76": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "77": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xF2FDE38B"
    },
    "82": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "83": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x4C5"
    },
    "86": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "87": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "88": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xFC0C546A"
    },
    "93": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "94": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x4D8"
    },
    "97": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "98": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "99": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xFD5E6DD1"
    },
    "104": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "105": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x4FF"
    },
    "108": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "109": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "112": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "113": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "114": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "115": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xDBAA0FC6"
    },
    "120": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "121": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x44F"
    },
    "124": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "125": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "126": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xE38A303B"
    },
    "131": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "132": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x476"
    },
    "135": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "136": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "137": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xE8DCCD06"
    },
    "142": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "143": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x49C"
    },
    "146": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "147": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "150": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "151": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "152": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "153": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xC9C53232"
    },
    "158": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "159": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xD3"
    },
    "162": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "163": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "164": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xC9C53232"
    },
    "169": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "170": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x408"
    },
    "173": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "174": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "175": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xD094ADBF"
    },
    "180": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "181": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x41B"
    },
    "184": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "185": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "186": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xD4B83992"
    },
    "191": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "192": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x429"
    },
    "195": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "196": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "197": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xDB687988"
    },
    "202": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "203": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x43C"
    },
    "206": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "207": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "209": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "210": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "211": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "212": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "213": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x9FABEB00"
    },
    "218": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "219": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3DA"
    },
    "222": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "223": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "224": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xB9626D21"
    },
    "229": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "230": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3E2"
    },
    "233": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "234": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "235": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xC07B5D8C"
    },
    "240": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "241": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3F5"
    },
    "244": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "245": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "247": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "248": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "249": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "250": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "251": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x4B2CD118"
    },
    "256": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "257": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x166"
    },
    "260": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "261": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "262": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x715018A6"
    },
    "267": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "268": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x140"
    },
    "271": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "272": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "273": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x715018A6"
    },
    "278": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "279": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x39B"
    },
    "282": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "283": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "284": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x8DA5CB5B"
    },
    "289": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "290": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3A3"
    },
    "293": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "294": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "295": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x8F32D59B"
    },
    "300": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "301": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3B4"
    },
    "304": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "305": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "306": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x99CC218C"
    },
    "311": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "312": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3C7"
    },
    "315": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "316": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "318": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "319": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "320": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "321": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "322": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x4B2CD118"
    },
    "327": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "328": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2C4"
    },
    "331": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "332": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "333": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x4E745F1F"
    },
    "338": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "339": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2D7"
    },
    "342": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "343": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "344": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x7033E4A6"
    },
    "349": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "350": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x388"
    },
    "353": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "354": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "356": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "357": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "358": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "359": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "360": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x204612A8"
    },
    "365": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "GT",
      "path": "14"
    },
    "366": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1A2"
    },
    "369": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "370": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "371": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x204612A8"
    },
    "376": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "377": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x259"
    },
    "380": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "381": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "382": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x2E1A7D4D"
    },
    "387": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "388": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x28B"
    },
    "391": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "392": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "393": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x3223FF4B"
    },
    "398": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "399": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x29E"
    },
    "402": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "403": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "404": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x49E5ADD4"
    },
    "409": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "410": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2B1"
    },
    "413": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "414": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "416": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "417": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "418": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "419": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "420": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x171F03C2"
    },
    "425": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "426": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1C9"
    },
    "429": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "430": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "431": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x178B6DE6"
    },
    "436": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "437": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DE"
    },
    "440": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "441": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "442": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x1C7FD532"
    },
    "447": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "EQ",
      "path": "14"
    },
    "448": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x21A"
    },
    "451": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "452": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "453": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "455": {
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "DUP1",
      "path": "14"
    },
    "456": {
      "first_revert": true,
      "fn": null,
      "offset": [
        2175,
        15289
      ],
      "op": "REVERT",
      "path": "14"
    },
    "457": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "458": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DC"
    },
    "461": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1D7"
    },
    "464": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "465": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "467": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x17E7"
    },
    "470": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "i",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMP",
      "path": "14"
    },
    "471": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "472": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x512"
    },
    "475": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "i",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMP",
      "path": "14"
    },
    "476": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "477": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "STOP",
      "path": "14"
    },
    "478": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "479": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "482": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1EC"
    },
    "485": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "486": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "488": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "491": {
      "fn": "StakingEscrow.getAllTokens",
      "jump": "i",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMP",
      "path": "14"
    },
    "492": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "495": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "497": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "499": {
      "op": "SHL"
    },
    "500": {
      "op": "SUB"
    },
    "501": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "AND",
      "path": "14",
      "statement": 0
    },
    "502": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7162,
        7169
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "504": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "505": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "DUP2",
      "path": "14"
    },
    "506": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "507": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7198
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "509": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "511": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "512": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "514": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "515": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7207
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "516": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7213
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "517": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7188,
        7213
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "518": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMP",
      "path": "14"
    },
    "519": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "520": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "522": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "523": {
      "op": "SWAP1"
    },
    "524": {
      "op": "DUP2"
    },
    "525": {
      "op": "MSTORE"
    },
    "526": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "528": {
      "op": "ADD"
    },
    "529": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "530": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "532": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "533": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "DUP1",
      "path": "14"
    },
    "534": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "535": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "SUB",
      "path": "14"
    },
    "536": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "537": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        7100,
        7220
      ],
      "op": "RETURN",
      "path": "14"
    },
    "538": {
      "offset": [
        4754,
        4797
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "539": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x241"
    },
    "542": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "575": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "DUP2",
      "path": "14"
    },
    "576": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "JUMP",
      "path": "14"
    },
    "577": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "578": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "580": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4754,
        4797
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "581": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "583": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "585": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "587": {
      "op": "SHL"
    },
    "588": {
      "op": "SUB"
    },
    "589": {
      "op": "SWAP1"
    },
    "590": {
      "op": "SWAP2"
    },
    "591": {
      "op": "AND"
    },
    "592": {
      "op": "DUP2"
    },
    "593": {
      "op": "MSTORE"
    },
    "594": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "596": {
      "op": "ADD"
    },
    "597": {
      "offset": [
        4754,
        4797
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x211"
    },
    "600": {
      "op": "JUMP"
    },
    "601": {
      "offset": [
        4911,
        4945
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "602": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "604": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "605": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x273"
    },
    "608": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "609": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "611": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "613": {
      "op": "SHL"
    },
    "614": {
      "offset": [
        4911,
        4945
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "615": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "DIV",
      "path": "14"
    },
    "616": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "618": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "620": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "622": {
      "op": "SHL"
    },
    "623": {
      "op": "SUB"
    },
    "624": {
      "offset": [
        4911,
        4945
      ],
      "op": "AND",
      "path": "14"
    },
    "625": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "DUP2",
      "path": "14"
    },
    "626": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "JUMP",
      "path": "14"
    },
    "627": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "628": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "630": {
      "fn": "StakingEscrow.getAllTokens",
      "offset": [
        4911,
        4945
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "635": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "637": {
      "op": "SHL"
    },
    "638": {
      "op": "SUB"
    },
    "639": {
      "op": "SWAP1"
    },
    "640": {
      "op": "SWAP2"
    },
    "641": {
      "op": "AND"
    },
    "642": {
      "op": "DUP2"
    },
    "643": {
      "op": "MSTORE"
    },
    "644": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "646": {
      "op": "ADD"
    },
    "647": {
      "offset": [
        4911,
        4945
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x211"
    },
    "650": {
      "op": "JUMP"
    },
    "651": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "652": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DC"
    },
    "655": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x299"
    },
    "658": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "659": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "661": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1849"
    },
    "664": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMP",
      "path": "14"
    },
    "665": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "666": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x6DE"
    },
    "669": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMP",
      "path": "14"
    },
    "670": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "671": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "674": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2AC"
    },
    "677": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "678": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "680": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1862"
    },
    "683": {
      "fn": "StakingEscrow.requestMerge",
      "jump": "i",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMP",
      "path": "14"
    },
    "684": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "685": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x99E"
    },
    "688": {
      "fn": "StakingEscrow.requestMerge",
      "jump": "i",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMP",
      "path": "14"
    },
    "689": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "690": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "693": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2BF"
    },
    "696": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "697": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "699": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x18A3"
    },
    "702": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "i",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMP",
      "path": "14"
    },
    "703": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "704": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xB8C"
    },
    "707": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "i",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMP",
      "path": "14"
    },
    "708": {
      "offset": [
        1026,
        1055
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "709": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x2"
    },
    "711": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "SLOAD",
      "path": "26"
    },
    "712": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x241"
    },
    "715": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "716": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "720": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "722": {
      "op": "SHL"
    },
    "723": {
      "op": "SUB"
    },
    "724": {
      "offset": [
        1026,
        1055
      ],
      "op": "AND",
      "path": "26"
    },
    "725": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "DUP2",
      "path": "26"
    },
    "726": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        1026,
        1055
      ],
      "op": "JUMP",
      "path": "26"
    },
    "727": {
      "offset": [
        5044,
        5093
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "728": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x36E"
    },
    "731": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2E5"
    },
    "734": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "735": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "737": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "740": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "i",
      "offset": [
        5044,
        5093
      ],
      "op": "JUMP",
      "path": "14"
    },
    "741": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "742": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "744": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "746": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP2",
      "path": "14"
    },
    "747": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "748": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "749": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "751": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "752": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP3",
      "path": "14"
    },
    "753": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "754": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "756": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "757": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "758": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "759": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP1",
      "path": "14"
    },
    "760": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "761": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "763": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP3",
      "path": "14"
    },
    "764": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "765": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "766": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x2"
    },
    "768": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP4",
      "path": "14"
    },
    "769": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "770": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "771": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x3"
    },
    "773": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP5",
      "path": "14"
    },
    "774": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "775": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "776": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "778": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP6",
      "path": "14"
    },
    "779": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "780": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "781": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "783": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP7",
      "path": "14"
    },
    "784": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "785": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "786": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "787": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP7",
      "path": "14"
    },
    "788": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "789": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "790": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "792": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP8",
      "path": "14"
    },
    "793": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "794": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "795": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x8"
    },
    "797": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP9",
      "path": "14"
    },
    "798": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "799": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "800": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x9"
    },
    "802": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "803": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP9",
      "path": "14"
    },
    "804": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "ADD",
      "path": "14"
    },
    "805": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "806": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "807": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP9",
      "path": "14"
    },
    "808": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFFFF"
    },
    "811": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP1",
      "path": "14"
    },
    "812": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP9",
      "path": "14"
    },
    "813": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "814": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP10",
      "path": "14"
    },
    "815": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH3",
      "path": "14",
      "value": "0x10000"
    },
    "819": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP1",
      "path": "14"
    },
    "820": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP11",
      "path": "14"
    },
    "821": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DIV",
      "path": "14"
    },
    "822": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP4",
      "path": "14"
    },
    "823": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "824": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP11",
      "path": "14"
    },
    "825": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH5",
      "path": "14",
      "value": "0x100000000"
    },
    "831": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP12",
      "path": "14"
    },
    "832": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DIV",
      "path": "14"
    },
    "833": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP5",
      "path": "14"
    },
    "834": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "835": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP11",
      "path": "14"
    },
    "836": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH7",
      "path": "14",
      "value": "0x1000000000000"
    },
    "844": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "845": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DIV",
      "path": "14"
    },
    "846": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP5",
      "path": "14"
    },
    "847": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "848": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP10",
      "path": "14"
    },
    "849": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP9",
      "path": "14"
    },
    "850": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "851": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP5",
      "path": "14"
    },
    "852": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "853": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP8",
      "path": "14"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "860": {
      "op": "SHL"
    },
    "861": {
      "op": "SUB"
    },
    "862": {
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "863": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "864": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP5",
      "path": "14"
    },
    "865": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DIV",
      "path": "14"
    },
    "866": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP3",
      "path": "14"
    },
    "867": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "868": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "869": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "870": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP6",
      "path": "14"
    },
    "871": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "872": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "873": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "AND",
      "path": "14"
    },
    "874": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "875": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "876": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "DUP15",
      "path": "14"
    },
    "877": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "JUMP",
      "path": "14"
    },
    "878": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "879": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "881": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "882": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x211"
    },
    "885": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP15",
      "path": "14"
    },
    "886": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP14",
      "path": "14"
    },
    "887": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP13",
      "path": "14"
    },
    "888": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP12",
      "path": "14"
    },
    "889": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP11",
      "path": "14"
    },
    "890": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP10",
      "path": "14"
    },
    "891": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP9",
      "path": "14"
    },
    "892": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP8",
      "path": "14"
    },
    "893": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "894": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP6",
      "path": "14"
    },
    "895": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP5",
      "path": "14"
    },
    "896": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "897": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "898": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "899": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "900": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        5044,
        5093
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x18DA"
    },
    "903": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "i",
      "offset": [
        5044,
        5093
      ],
      "op": "JUMP",
      "path": "14"
    },
    "904": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13699,
        13792
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "905": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13781,
        13785
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 1,
      "value": "0x1"
    },
    "907": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13699,
        13792
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "908": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13699,
        13792
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "910": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13699,
        13792
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "911": {
      "op": "SWAP1"
    },
    "912": {
      "op": "ISZERO"
    },
    "913": {
      "op": "ISZERO"
    },
    "914": {
      "op": "DUP2"
    },
    "915": {
      "op": "MSTORE"
    },
    "916": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "918": {
      "op": "ADD"
    },
    "919": {
      "fn": "StakingEscrow.supportsHistory",
      "offset": [
        13699,
        13792
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x211"
    },
    "922": {
      "op": "JUMP"
    },
    "923": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1381,
        1518
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "924": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1381,
        1518
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x1DC"
    },
    "927": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1381,
        1518
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0xBDF"
    },
    "930": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1381,
        1518
      ],
      "op": "JUMP",
      "path": "34"
    },
    "931": {
      "fn": "Ownable.owner",
      "offset": [
        693,
        770
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "932": {
      "fn": "Ownable.owner",
      "offset": [
        731,
        738
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "934": {
      "fn": "Ownable.owner",
      "offset": [
        757,
        763
      ],
      "op": "SLOAD",
      "path": "34",
      "statement": 2
    },
    "935": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "937": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "939": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "941": {
      "op": "SHL"
    },
    "942": {
      "op": "SUB"
    },
    "943": {
      "fn": "Ownable.owner",
      "offset": [
        757,
        763
      ],
      "op": "AND",
      "path": "34"
    },
    "944": {
      "fn": "Ownable.owner",
      "offset": [
        693,
        770
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x241"
    },
    "947": {
      "fn": "Ownable.owner",
      "offset": [
        693,
        770
      ],
      "op": "JUMP",
      "path": "34"
    },
    "948": {
      "fn": "Ownable.isOwner",
      "offset": [
        1013,
        1103
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "949": {
      "fn": "Ownable.isOwner",
      "offset": [
        1053,
        1057
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "951": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "SLOAD",
      "path": "34",
      "statement": 3
    },
    "952": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "954": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "956": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "958": {
      "op": "SHL"
    },
    "959": {
      "op": "SUB"
    },
    "960": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "AND",
      "path": "34"
    },
    "961": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1086
      ],
      "op": "CALLER",
      "path": "34"
    },
    "962": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1096
      ],
      "op": "EQ",
      "path": "34"
    },
    "963": {
      "fn": "Ownable.isOwner",
      "offset": [
        1013,
        1103
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x38B"
    },
    "966": {
      "fn": "Ownable.isOwner",
      "offset": [
        1013,
        1103
      ],
      "op": "JUMP",
      "path": "34"
    },
    "967": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "968": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DC"
    },
    "971": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3D5"
    },
    "974": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "975": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "977": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1972"
    },
    "980": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "i",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMP",
      "path": "14"
    },
    "981": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "982": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xC40"
    },
    "985": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "i",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMP",
      "path": "14"
    },
    "986": {
      "fn": "StakingEscrow.getStakersLength",
      "offset": [
        13253,
        13359
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "987": {
      "fn": "StakingEscrow.getStakersLength",
      "offset": [
        13338,
        13345
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 4,
      "value": "0x7"
    },
    "989": {
      "fn": "StakingEscrow.getStakersLength",
      "offset": [
        13338,
        13352
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "990": {
      "fn": "StakingEscrow.getStakersLength",
      "offset": [
        13253,
        13359
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "993": {
      "fn": "StakingEscrow.getStakersLength",
      "offset": [
        13253,
        13359
      ],
      "op": "JUMP",
      "path": "14"
    },
    "994": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "995": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DC"
    },
    "998": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3F0"
    },
    "1001": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1002": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1004": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "1007": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1008": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1009": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDB9"
    },
    "1012": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1013": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1014": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "1017": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x403"
    },
    "1020": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1021": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1023": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "1026": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "i",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1027": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1028": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xED0"
    },
    "1031": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "i",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1032": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1033": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "1036": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x416"
    },
    "1039": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1040": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1042": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1849"
    },
    "1045": {
      "fn": "StakingEscrow.totalStakedAt",
      "jump": "i",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1046": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1047": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF4B"
    },
    "1050": {
      "fn": "StakingEscrow.totalStakedAt",
      "jump": "i",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1051": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1052": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "1055": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x416"
    },
    "1058": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1059": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1061": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        7293,
        7411
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "1064": {
      "fn": "StakingEscrow.getCompletedWork",
      "jump": "i",
      "offset": [
        7293,
        7411
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1065": {
      "offset": [
        912,
        933
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "1066": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x1"
    },
    "1068": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "SLOAD",
      "path": "26"
    },
    "1069": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x241"
    },
    "1072": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "1073": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1075": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1077": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1079": {
      "op": "SHL"
    },
    "1080": {
      "op": "SUB"
    },
    "1081": {
      "offset": [
        912,
        933
      ],
      "op": "AND",
      "path": "26"
    },
    "1082": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "DUP2",
      "path": "26"
    },
    "1083": {
      "fn": "StakingEscrow.getCompletedWork",
      "offset": [
        912,
        933
      ],
      "op": "JUMP",
      "path": "26"
    },
    "1084": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1085": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1DC"
    },
    "1088": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x44A"
    },
    "1091": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1092": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1094": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1A02"
    },
    "1097": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1098": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1099": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFD5"
    },
    "1102": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1103": {
      "offset": [
        4803,
        4837
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1104": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        4803,
        4837
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x241"
    },
    "1107": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        4803,
        4837
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "1140": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        4803,
        4837
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1141": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        4803,
        4837
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1142": {
      "offset": [
        1185,
        1207
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "1143": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x2"
    },
    "1145": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "SLOAD",
      "path": "26"
    },
    "1146": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x48A"
    },
    "1149": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "1150": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1152": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1154": {
      "op": "SHL"
    },
    "1155": {
      "offset": [
        1185,
        1207
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "1156": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "DIV",
      "path": "26"
    },
    "1157": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0xFF"
    },
    "1159": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "AND",
      "path": "26"
    },
    "1160": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "DUP2",
      "path": "26"
    },
    "1161": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "JUMP",
      "path": "26"
    },
    "1162": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "1163": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x40"
    },
    "1165": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        1185,
        1207
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "1166": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1168": {
      "op": "SWAP1"
    },
    "1169": {
      "op": "SWAP2"
    },
    "1170": {
      "op": "AND"
    },
    "1171": {
      "op": "DUP2"
    },
    "1172": {
      "op": "MSTORE"
    },
    "1173": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1175": {
      "op": "ADD"
    },
    "1176": {
      "offset": [
        1185,
        1207
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x211"
    },
    "1179": {
      "op": "JUMP"
    },
    "1180": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "1181": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1DC"
    },
    "1184": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x4AA"
    },
    "1187": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "CALLDATASIZE",
      "path": "26"
    },
    "1188": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x4"
    },
    "1190": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x182E"
    },
    "1193": {
      "fn": "Upgradeable.finishUpgrade",
      "jump": "i",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMP",
      "path": "26"
    },
    "1194": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "1195": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1229"
    },
    "1198": {
      "fn": "Upgradeable.finishUpgrade",
      "jump": "i",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMP",
      "path": "26"
    },
    "1199": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1200": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x207"
    },
    "1203": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x4BD"
    },
    "1206": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1207": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1209": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1A9C"
    },
    "1212": {
      "fn": "StakingEscrow.totalStakedForAt",
      "jump": "i",
      "offset": [
        13432,
        13560
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1213": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1214": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13526,
        13533
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1216": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "1217": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1218": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "POP",
      "path": "14"
    },
    "1219": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "POP",
      "path": "14"
    },
    "1220": {
      "fn": "StakingEscrow.totalStakedForAt",
      "offset": [
        13432,
        13560
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1221": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "1222": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x1DC"
    },
    "1225": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x4D3"
    },
    "1228": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "CALLDATASIZE",
      "path": "34"
    },
    "1229": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x4"
    },
    "1231": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x182E"
    },
    "1234": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMP",
      "path": "34"
    },
    "1235": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "1236": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x1283"
    },
    "1239": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMP",
      "path": "34"
    },
    "1240": {
      "offset": [
        4712,
        4748
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1241": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        4712,
        4748
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x241"
    },
    "1244": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        4712,
        4748
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "1277": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        4712,
        4748
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1278": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        4712,
        4748
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1279": {
      "offset": [
        5099,
        5123
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1280": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x241"
    },
    "1283": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x50D"
    },
    "1286": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "1287": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1289": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1849"
    },
    "1292": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1293": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1294": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x12A6"
    },
    "1297": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1298": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1299": {
      "offset": [
        6869,
        6879
      ],
      "op": "CALLER",
      "path": "14"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1304": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1306": {
      "op": "SHL"
    },
    "1307": {
      "op": "SUB"
    },
    "1308": {
      "offset": [
        6891,
        6899
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "1341": {
      "offset": [
        6869,
        6900
      ],
      "op": "AND",
      "path": "14"
    },
    "1342": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6869,
        6900
      ],
      "op": "EQ",
      "path": "14"
    },
    "1343": {
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x563"
    },
    "1346": {
      "offset": [
        6861,
        6941
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1347": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1349": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1350": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1356": {
      "op": "SHL"
    },
    "1357": {
      "offset": [
        6861,
        6941
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1358": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1359": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1361": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "ADD",
      "path": "14"
    },
    "1362": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "1365": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1366": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1AC6"
    },
    "1369": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "i",
      "offset": [
        6861,
        6941
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1370": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1371": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1373": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1374": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1375": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1376": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "SUB",
      "path": "14"
    },
    "1377": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1378": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "14"
    },
    "1379": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        6861,
        6941
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1380": {
      "branch": 59,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8246,
        8257
      ],
      "op": "DUP2",
      "path": "14",
      "statement": 5
    },
    "1381": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x5C6"
    },
    "1384": {
      "branch": 59,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1385": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1387": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1388": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1392": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1394": {
      "op": "SHL"
    },
    "1395": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1396": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1397": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1399": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1401": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1402": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "ADD",
      "path": "14"
    },
    "1403": {
      "op": "MSTORE"
    },
    "1404": {
      "op": "PUSH1",
      "value": "0x2D"
    },
    "1406": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1408": {
      "op": "DUP3"
    },
    "1409": {
      "op": "ADD"
    },
    "1410": {
      "op": "MSTORE"
    },
    "1411": {
      "op": "PUSH32",
      "value": "0x416D6F756E74206F6620746F6B656E7320746F206465706F736974206D757374"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1446": {
      "op": "DUP3"
    },
    "1447": {
      "op": "ADD"
    },
    "1448": {
      "op": "MSTORE"
    },
    "1449": {
      "op": "PUSH13",
      "value": "0x81899481CDC1958DA599A5959"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0x9A"
    },
    "1465": {
      "op": "SHL"
    },
    "1466": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1468": {
      "op": "DUP3"
    },
    "1469": {
      "op": "ADD"
    },
    "1470": {
      "op": "MSTORE"
    },
    "1471": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1473": {
      "op": "ADD"
    },
    "1474": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "1477": {
      "op": "JUMP"
    },
    "1478": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8238,
        8307
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1479": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1483": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1485": {
      "op": "SHL"
    },
    "1486": {
      "op": "SUB"
    },
    "1487": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "DUP4",
      "path": "14"
    },
    "1488": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "AND",
      "path": "14"
    },
    "1489": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8317,
        8340
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1491": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1492": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1493": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1494": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8353
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "1496": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "1498": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1499": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1501": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1502": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8343,
        8362
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "1503": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8425
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1504": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8425
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1505": {
      "branch": 60,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8430
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1506": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8463
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1507": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8463
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1508": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8463
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x5FB"
    },
    "1511": {
      "branch": 60,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8463
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1512": {
      "op": "POP"
    },
    "1513": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "1515": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1516": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "ADD",
      "path": "14"
    },
    "1517": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1518": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "PUSH5",
      "path": "14",
      "value": "0x100000000"
    },
    "1524": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1525": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "DIV",
      "path": "14"
    },
    "1526": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFFFF"
    },
    "1529": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8458
      ],
      "op": "AND",
      "path": "14"
    },
    "1530": {
      "branch": 61,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8434,
        8463
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1531": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8415,
        8463
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1532": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8411,
        8511
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1533": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8411,
        8511
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x64C"
    },
    "1536": {
      "branch": 61,
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8411,
        8511
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1537": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8486
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 6,
      "value": "0x7"
    },
    "1539": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1540": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1541": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "1543": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1544": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "ADD",
      "path": "14"
    },
    "1545": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1546": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1549": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1550": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1551": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1552": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1553": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688"
    },
    "1586": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "ADD",
      "path": "14"
    },
    "1587": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1588": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1591": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1595": {
      "op": "SHL"
    },
    "1596": {
      "op": "SUB"
    },
    "1597": {
      "op": "NOT"
    },
    "1598": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "AND",
      "path": "14"
    },
    "1599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1605": {
      "op": "SHL"
    },
    "1606": {
      "op": "SUB"
    },
    "1607": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "DUP7",
      "path": "14"
    },
    "1608": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "AND",
      "path": "14"
    },
    "1609": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "OR",
      "path": "14"
    },
    "1610": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1611": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8479,
        8500
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "1612": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8411,
        8511
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1613": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8520,
        8577
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 7,
      "value": "0x681"
    },
    "1616": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1618": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1622": {
      "op": "SHL"
    },
    "1623": {
      "op": "SUB"
    },
    "1624": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8520,
        8525
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "1657": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8520,
        8542
      ],
      "op": "AND",
      "path": "14"
    },
    "1658": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8543,
        8553
      ],
      "op": "CALLER",
      "path": "14"
    },
    "1659": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8563,
        8567
      ],
      "op": "ADDRESS",
      "path": "14"
    },
    "1660": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8570,
        8576
      ],
      "op": "DUP7",
      "path": "14"
    },
    "1661": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8520,
        8542
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x12D0"
    },
    "1664": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "i",
      "offset": [
        8520,
        8577
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1665": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8520,
        8577
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1666": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8601,
        8607
      ],
      "op": "DUP3",
      "path": "14",
      "statement": 8
    },
    "1667": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8591
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1668": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8597
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1670": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8597
      ],
      "op": "ADD",
      "path": "14"
    },
    "1671": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8597
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1673": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1674": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1675": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1676": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x695"
    },
    "1679": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1680": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1681": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B20"
    },
    "1684": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "i",
      "offset": [
        8587,
        8607
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1685": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1686": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1687": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1688": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8587,
        8607
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "1689": {
      "op": "POP"
    },
    "1690": {
      "op": "POP"
    },
    "1691": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 9,
      "value": "0x40"
    },
    "1693": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1694": {
      "op": "DUP4"
    },
    "1695": {
      "op": "DUP2"
    },
    "1696": {
      "op": "MSTORE"
    },
    "1697": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1701": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1703": {
      "op": "SHL"
    },
    "1704": {
      "op": "SUB"
    },
    "1705": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "DUP6",
      "path": "14"
    },
    "1706": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "AND",
      "path": "14"
    },
    "1707": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1708": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x2DA466A7B24304F47E87FA2E1E5A81B9831CE54FEC19055CE277CA2F39BA42C4"
    },
    "1741": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1742": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1744": {
      "op": "ADD"
    },
    "1745": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1747": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1748": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1749": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1750": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "SUB",
      "path": "14"
    },
    "1751": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1752": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8623,
        8649
      ],
      "op": "LOG2",
      "path": "14"
    },
    "1753": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8228,
        8656
      ],
      "op": "POP",
      "path": "14"
    },
    "1754": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "POP",
      "path": "14"
    },
    "1755": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "POP",
      "path": "14"
    },
    "1756": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "offset": [
        8075,
        8656
      ],
      "op": "POP",
      "path": "14"
    },
    "1757": {
      "fn": "StakingEscrow.depositFromWorkLock",
      "jump": "o",
      "offset": [
        8075,
        8656
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1758": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1759": {
      "offset": [
        6476,
        6486
      ],
      "op": "CALLER",
      "path": "14"
    },
    "1760": {
      "offset": [
        6496,
        6497
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1762": {
      "offset": [
        6465,
        6487
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1763": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1764": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1765": {
      "offset": [
        6465,
        6475
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "1767": {
      "offset": [
        6465,
        6487
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "1769": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1770": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1772": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1773": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6465,
        6487
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "1774": {
      "offset": [
        6465,
        6493
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1775": {
      "offset": [
        6457,
        6525
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x73A"
    },
    "1778": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1779": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1781": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1782": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1788": {
      "op": "SHL"
    },
    "1789": {
      "offset": [
        6457,
        6525
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1790": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1793": {
      "offset": [
        6457,
        6525
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1795": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1796": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        6457,
        6525
      ],
      "op": "ADD",
      "path": "14"
    },
    "1797": {
      "op": "MSTORE"
    },
    "1798": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1802": {
      "op": "DUP3"
    },
    "1803": {
      "op": "ADD"
    },
    "1804": {
      "op": "MSTORE"
    },
    "1805": {
      "op": "PUSH32",
      "value": "0x43616C6C6572206D7573742062652061207374616B6572000000000000000000"
    },
    "1838": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1840": {
      "op": "DUP3"
    },
    "1841": {
      "op": "ADD"
    },
    "1842": {
      "op": "MSTORE"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1845": {
      "op": "ADD"
    },
    "1846": {
      "offset": [
        6457,
        6525
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "1849": {
      "op": "JUMP"
    },
    "1850": {
      "offset": [
        6457,
        6525
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1851": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8870,
        8871
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 10,
      "value": "0x0"
    },
    "1853": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8861,
        8867
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1854": {
      "branch": 62,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8861,
        8871
      ],
      "op": "GT",
      "path": "14"
    },
    "1855": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x78A"
    },
    "1858": {
      "branch": 62,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1859": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1861": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1862": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1866": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1868": {
      "op": "SHL"
    },
    "1869": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1870": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1873": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1875": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1876": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "ADD",
      "path": "14"
    },
    "1877": {
      "op": "MSTORE"
    },
    "1878": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1880": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1882": {
      "op": "DUP3"
    },
    "1883": {
      "op": "ADD"
    },
    "1884": {
      "op": "MSTORE"
    },
    "1885": {
      "op": "PUSH32",
      "value": "0x56616C7565206D75737420626520737065636966696564000000000000000000"
    },
    "1918": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1920": {
      "op": "DUP3"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "op": "MSTORE"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1925": {
      "op": "ADD"
    },
    "1926": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "1929": {
      "op": "JUMP"
    },
    "1930": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8853,
        8899
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1931": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8946,
        8956
      ],
      "op": "CALLER",
      "path": "14"
    },
    "1932": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8909,
        8932
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1934": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1935": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1936": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1937": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8945
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "1939": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "1941": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1942": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1944": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1945": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1946": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1947": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "1948": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9040,
        9050
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 11
    },
    "1949": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9040,
        9050
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1950": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "1952": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1953": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "ADD",
      "path": "14"
    },
    "1954": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1955": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "1956": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1957": {
      "op": "PUSH4",
      "value": "0x4A11FAE3"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1964": {
      "op": "SHL"
    },
    "1965": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1966": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "1967": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1973": {
      "op": "SHL"
    },
    "1974": {
      "op": "SUB"
    },
    "1975": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "1976": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "DUP5",
      "path": "14"
    },
    "1977": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9015,
        9035
      ],
      "op": "AND",
      "path": "14"
    },
    "1978": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "1980": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP3",
      "path": "14"
    },
    "1981": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ADD",
      "path": "14"
    },
    "1982": {
      "op": "MSTORE"
    },
    "1983": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1984": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8935,
        8957
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "1985": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9040,
        9050
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1986": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9040,
        9050
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1987": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9005
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "2020": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2021": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2022": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "AND",
      "path": "14"
    },
    "2023": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2024": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x4A11FAE3"
    },
    "2029": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9014
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2030": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2032": {
      "op": "ADD"
    },
    "2033": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "2035": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2037": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2038": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2039": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP4",
      "path": "14"
    },
    "2040": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "SUB",
      "path": "14"
    },
    "2041": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2042": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP7",
      "path": "14"
    },
    "2043": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "GAS",
      "path": "14"
    },
    "2044": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "2045": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2046": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2047": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2048": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x80D"
    },
    "2051": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2052": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2053": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2055": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2056": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "RETURNDATACOPY",
      "path": "14"
    },
    "2057": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2058": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2060": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "REVERT",
      "path": "14"
    },
    "2061": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2062": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "POP",
      "path": "14"
    },
    "2063": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "POP",
      "path": "14"
    },
    "2064": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "POP",
      "path": "14"
    },
    "2065": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "POP",
      "path": "14"
    },
    "2066": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2068": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2069": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2070": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "2072": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "NOT",
      "path": "14"
    },
    "2073": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "2075": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2076": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ADD",
      "path": "14"
    },
    "2077": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "AND",
      "path": "14"
    },
    "2078": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2079": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ADD",
      "path": "14"
    },
    "2080": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2081": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2083": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2084": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "POP",
      "path": "14"
    },
    "2085": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2086": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "ADD",
      "path": "14"
    },
    "2087": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2088": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x831"
    },
    "2091": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2092": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2093": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B38"
    },
    "2096": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        8997,
        9036
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2097": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8997,
        9036
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2098": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9036
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x83B"
    },
    "2101": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9036
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2102": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        8994
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2103": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9036
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B20"
    },
    "2106": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        8988,
        9036
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2107": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9036
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2108": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9050
      ],
      "op": "GT",
      "path": "14"
    },
    "2109": {
      "branch": 63,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8988,
        9050
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2110": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x8A2"
    },
    "2113": {
      "branch": 63,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2114": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2116": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2117": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2121": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2123": {
      "op": "SHL"
    },
    "2124": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2125": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2126": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2128": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "2130": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2131": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "ADD",
      "path": "14"
    },
    "2132": {
      "op": "MSTORE"
    },
    "2133": {
      "op": "PUSH1",
      "value": "0x30"
    },
    "2135": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2137": {
      "op": "DUP3"
    },
    "2138": {
      "op": "ADD"
    },
    "2139": {
      "op": "MSTORE"
    },
    "2140": {
      "op": "PUSH32",
      "value": "0x4E6F7420656E6F75676820746F6B656E7320756E7374616B656420696E205420"
    },
    "2173": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2175": {
      "op": "DUP3"
    },
    "2176": {
      "op": "ADD"
    },
    "2177": {
      "op": "MSTORE"
    },
    "2178": {
      "op": "PUSH16",
      "value": "0x1CDD185ADA5B99C818DBDB9D1C9858DD"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0x82"
    },
    "2197": {
      "op": "SHL"
    },
    "2198": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2200": {
      "op": "DUP3"
    },
    "2201": {
      "op": "ADD"
    },
    "2202": {
      "op": "MSTORE"
    },
    "2203": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2205": {
      "op": "ADD"
    },
    "2206": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "2209": {
      "op": "JUMP"
    },
    "2210": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8967,
        9124
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2211": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9197,
        9207
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 12
    },
    "2212": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9197,
        9207
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2213": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9164,
        9193
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x8AD"
    },
    "2216": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9182,
        9192
      ],
      "op": "CALLER",
      "path": "14"
    },
    "2217": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9164,
        9181
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xED0"
    },
    "2220": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        9164,
        9193
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2221": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9164,
        9193
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2222": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9193
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x8B7"
    },
    "2225": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9193
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2226": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9161
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2227": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9193
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B20"
    },
    "2230": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        9155,
        9193
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2231": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9193
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2232": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9207
      ],
      "op": "GT",
      "path": "14"
    },
    "2233": {
      "branch": 64,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9155,
        9207
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2234": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x917"
    },
    "2237": {
      "branch": 64,
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2238": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2240": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2241": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2245": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2247": {
      "op": "SHL"
    },
    "2248": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2249": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2252": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "2254": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2255": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "ADD",
      "path": "14"
    },
    "2256": {
      "op": "MSTORE"
    },
    "2257": {
      "op": "PUSH1",
      "value": "0x29"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2261": {
      "op": "DUP3"
    },
    "2262": {
      "op": "ADD"
    },
    "2263": {
      "op": "MSTORE"
    },
    "2264": {
      "op": "PUSH32",
      "value": "0x4E6F7420656E6F75676820746F6B656E732072656C656173656420647572696E"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2299": {
      "op": "DUP3"
    },
    "2300": {
      "op": "ADD"
    },
    "2301": {
      "op": "MSTORE"
    },
    "2302": {
      "op": "PUSH9",
      "value": "0x672076657374696E67"
    },
    "2312": {
      "op": "PUSH1",
      "value": "0xB8"
    },
    "2314": {
      "op": "SHL"
    },
    "2315": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2317": {
      "op": "DUP3"
    },
    "2318": {
      "op": "ADD"
    },
    "2319": {
      "op": "MSTORE"
    },
    "2320": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2322": {
      "op": "ADD"
    },
    "2323": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "2326": {
      "op": "JUMP"
    },
    "2327": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9134,
        9274
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2328": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9298,
        9304
      ],
      "op": "DUP2",
      "path": "14",
      "statement": 13
    },
    "2329": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9288
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2330": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9294
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2332": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9294
      ],
      "op": "ADD",
      "path": "14"
    },
    "2333": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9294
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2335": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2336": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2337": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2338": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x92B"
    },
    "2341": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2342": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2343": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B51"
    },
    "2346": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        9284,
        9304
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2347": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2348": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2349": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2350": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9284,
        9304
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "2351": {
      "op": "POP"
    },
    "2352": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9353
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 14,
      "value": "0x965"
    },
    "2355": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9353
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2356": {
      "op": "POP"
    },
    "2357": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2359": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2361": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2363": {
      "op": "SHL"
    },
    "2364": {
      "op": "SUB"
    },
    "2365": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9320
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "2398": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9333
      ],
      "op": "AND",
      "path": "14"
    },
    "2399": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9334,
        9344
      ],
      "op": "CALLER",
      "path": "14"
    },
    "2400": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9346,
        9352
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2401": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9333
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1341"
    },
    "2404": {
      "fn": "StakingEscrow.withdraw",
      "jump": "i",
      "offset": [
        9315,
        9353
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2405": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9315,
        9353
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2406": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 15,
      "value": "0x40"
    },
    "2408": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2409": {
      "op": "DUP3"
    },
    "2410": {
      "op": "DUP2"
    },
    "2411": {
      "op": "MSTORE"
    },
    "2412": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9378,
        9388
      ],
      "op": "CALLER",
      "path": "14"
    },
    "2413": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9378,
        9388
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2414": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5"
    },
    "2447": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2448": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2450": {
      "op": "ADD"
    },
    "2451": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2453": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2454": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2455": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2456": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "SUB",
      "path": "14"
    },
    "2457": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2458": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        9368,
        9397
      ],
      "op": "LOG2",
      "path": "14"
    },
    "2459": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8843,
        9404
      ],
      "op": "POP",
      "path": "14"
    },
    "2460": {
      "fn": "StakingEscrow.withdraw",
      "offset": [
        8789,
        9404
      ],
      "op": "POP",
      "path": "14"
    },
    "2461": {
      "fn": "StakingEscrow.withdraw",
      "jump": "o",
      "offset": [
        8789,
        9404
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2462": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2463": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11619,
        11626
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2465": {
      "offset": [
        6665,
        6675
      ],
      "op": "CALLER",
      "path": "14"
    },
    "2466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2470": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2472": {
      "op": "SHL"
    },
    "2473": {
      "op": "SUB"
    },
    "2474": {
      "offset": [
        6687,
        6695
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "2507": {
      "offset": [
        6665,
        6696
      ],
      "op": "AND",
      "path": "14"
    },
    "2508": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6665,
        6696
      ],
      "op": "EQ",
      "path": "14"
    },
    "2509": {
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x9E8"
    },
    "2512": {
      "offset": [
        6657,
        6738
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2513": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2515": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2516": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2520": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2522": {
      "op": "SHL"
    },
    "2523": {
      "offset": [
        6657,
        6738
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2524": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2525": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "2527": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "ADD",
      "path": "14"
    },
    "2528": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "2531": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2532": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B68"
    },
    "2535": {
      "fn": "StakingEscrow.requestMerge",
      "jump": "i",
      "offset": [
        6657,
        6738
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2536": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        6657,
        6738
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2537": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2539": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2541": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2543": {
      "op": "SHL"
    },
    "2544": {
      "op": "SUB"
    },
    "2545": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2546": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2547": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "AND",
      "path": "14"
    },
    "2548": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11642,
        11665
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2550": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2551": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2552": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2553": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11678
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "2555": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "2557": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2558": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2560": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2561": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "2562": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11738
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 16,
      "value": "0x7"
    },
    "2564": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11738
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2565": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11738
      ],
      "op": "ADD",
      "path": "14"
    },
    "2566": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11738
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2567": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2568": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11668,
        11687
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2569": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11738
      ],
      "op": "AND",
      "path": "14"
    },
    "2570": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11752
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2571": {
      "branch": 65,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11752
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2572": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11808
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xA24"
    },
    "2575": {
      "branch": 65,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11808
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2576": {
      "op": "POP"
    },
    "2577": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "2579": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2580": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "ADD",
      "path": "14"
    },
    "2581": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2584": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2586": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2588": {
      "op": "SHL"
    },
    "2589": {
      "op": "SUB"
    },
    "2590": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11808
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2591": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11808
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2592": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11808
      ],
      "op": "AND",
      "path": "14"
    },
    "2593": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2594": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11788
      ],
      "op": "AND",
      "path": "14"
    },
    "2595": {
      "branch": 66,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11768,
        11808
      ],
      "op": "EQ",
      "path": "14"
    },
    "2596": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11808
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2597": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11868
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2598": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11868
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xABD"
    },
    "2601": {
      "branch": 66,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11868
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2602": {
      "op": "POP"
    },
    "2603": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "2605": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2606": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "ADD",
      "path": "14"
    },
    "2607": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2608": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2610": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2611": {
      "op": "PUSH4",
      "value": "0x4A11FAE3"
    },
    "2616": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2618": {
      "op": "SHL"
    },
    "2619": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2620": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2627": {
      "op": "SHL"
    },
    "2628": {
      "op": "SUB"
    },
    "2629": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2630": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2631": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11842,
        11862
      ],
      "op": "AND",
      "path": "14"
    },
    "2632": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "2634": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2635": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ADD",
      "path": "14"
    },
    "2636": {
      "op": "MSTORE"
    },
    "2637": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11832
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "2670": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2671": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2672": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "AND",
      "path": "14"
    },
    "2673": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2674": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x4A11FAE3"
    },
    "2679": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2680": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2682": {
      "op": "ADD"
    },
    "2683": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "2685": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2687": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2688": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2689": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP4",
      "path": "14"
    },
    "2690": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "SUB",
      "path": "14"
    },
    "2691": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2692": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP7",
      "path": "14"
    },
    "2693": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "GAS",
      "path": "14"
    },
    "2694": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "2695": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2696": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2697": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2698": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xA97"
    },
    "2701": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2702": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2703": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2705": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2706": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "RETURNDATACOPY",
      "path": "14"
    },
    "2707": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2708": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2710": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "REVERT",
      "path": "14"
    },
    "2711": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2712": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "POP",
      "path": "14"
    },
    "2713": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "POP",
      "path": "14"
    },
    "2714": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "POP",
      "path": "14"
    },
    "2715": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "POP",
      "path": "14"
    },
    "2716": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2718": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2719": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "2720": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "2722": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "NOT",
      "path": "14"
    },
    "2723": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "2725": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2726": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ADD",
      "path": "14"
    },
    "2727": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "AND",
      "path": "14"
    },
    "2728": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2729": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ADD",
      "path": "14"
    },
    "2730": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2731": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2733": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2734": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "POP",
      "path": "14"
    },
    "2735": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2736": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "ADD",
      "path": "14"
    },
    "2737": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2738": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xABB"
    },
    "2741": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2742": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2743": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B38"
    },
    "2746": {
      "fn": "StakingEscrow.requestMerge",
      "jump": "i",
      "offset": [
        11824,
        11863
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2747": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11863
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2748": {
      "branch": 67,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11824,
        11868
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "2749": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11718,
        11868
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2750": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xB1D"
    },
    "2753": {
      "branch": 67,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2754": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "2756": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2757": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2761": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2763": {
      "op": "SHL"
    },
    "2764": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2765": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2768": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "2770": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2771": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "ADD",
      "path": "14"
    },
    "2772": {
      "op": "MSTORE"
    },
    "2773": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "2775": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2777": {
      "op": "DUP3"
    },
    "2778": {
      "op": "ADD"
    },
    "2779": {
      "op": "MSTORE"
    },
    "2780": {
      "op": "PUSH32",
      "value": "0x5374616B696E672070726F766964657220616C72656164792073657420666F72"
    },
    "2813": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2815": {
      "op": "DUP3"
    },
    "2816": {
      "op": "ADD"
    },
    "2817": {
      "op": "MSTORE"
    },
    "2818": {
      "op": "PUSH11",
      "value": "0x103A34329039BA30B5B2B9"
    },
    "2830": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "2832": {
      "op": "SHL"
    },
    "2833": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2835": {
      "op": "DUP3"
    },
    "2836": {
      "op": "ADD"
    },
    "2837": {
      "op": "MSTORE"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2840": {
      "op": "ADD"
    },
    "2841": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "2844": {
      "op": "JUMP"
    },
    "2845": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11697,
        11937
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2846": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "2848": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2849": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "ADD",
      "path": "14"
    },
    "2850": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2851": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2853": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2855": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2857": {
      "op": "SHL"
    },
    "2858": {
      "op": "SUB"
    },
    "2859": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11991
      ],
      "op": "DUP5",
      "path": "14"
    },
    "2860": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11991
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2861": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11991
      ],
      "op": "AND",
      "path": "14"
    },
    "2862": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2863": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11971
      ],
      "op": "AND",
      "path": "14"
    },
    "2864": {
      "branch": 68,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11951,
        11991
      ],
      "op": "EQ",
      "path": "14"
    },
    "2865": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11947,
        12117
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xB84"
    },
    "2868": {
      "branch": 68,
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11947,
        12117
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "2869": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12027
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 17,
      "value": "0x7"
    },
    "2871": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12027
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2872": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12027
      ],
      "op": "ADD",
      "path": "14"
    },
    "2873": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "DUP1",
      "path": "14"
    },
    "2874": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "2875": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2877": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2879": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2881": {
      "op": "SHL"
    },
    "2882": {
      "op": "SUB"
    },
    "2883": {
      "op": "NOT"
    },
    "2884": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "AND",
      "path": "14"
    },
    "2885": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2889": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2891": {
      "op": "SHL"
    },
    "2892": {
      "op": "SUB"
    },
    "2893": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "DUP6",
      "path": "14"
    },
    "2894": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "DUP2",
      "path": "14"
    },
    "2895": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "AND",
      "path": "14"
    },
    "2896": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2897": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "DUP3",
      "path": "14"
    },
    "2898": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "OR",
      "path": "14"
    },
    "2899": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2900": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "2901": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "2902": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 18,
      "value": "0x40"
    },
    "2904": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "2905": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2906": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12007,
        12046
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "2907": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "DUP7",
      "path": "14"
    },
    "2908": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "AND",
      "path": "14"
    },
    "2909": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2910": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0xE49F168ACC1287C0F7B4541660600E72E51F66E70BABB33223525A3F87AE6031"
    },
    "2943": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "2944": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2946": {
      "op": "SWAP1"
    },
    "2947": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12065,
        12106
      ],
      "op": "LOG3",
      "path": "14"
    },
    "2948": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11947,
        12117
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2949": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12133,
        12143
      ],
      "op": "SLOAD",
      "path": "14",
      "statement": 19
    },
    "2950": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        12133,
        12143
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "2951": {
      "fn": "StakingEscrow.requestMerge",
      "offset": [
        11507,
        12150
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "2952": {
      "op": "POP"
    },
    "2953": {
      "op": "POP"
    },
    "2954": {
      "op": "POP"
    },
    "2955": {
      "fn": "StakingEscrow.requestMerge",
      "jump": "o",
      "offset": [
        11507,
        12150
      ],
      "op": "JUMP",
      "path": "14"
    },
    "2956": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "2957": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7767,
        7774
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "2959": {
      "offset": [
        6869,
        6879
      ],
      "op": "CALLER",
      "path": "14"
    },
    "2960": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2962": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2964": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2966": {
      "op": "SHL"
    },
    "2967": {
      "op": "SUB"
    },
    "2968": {
      "offset": [
        6891,
        6899
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "3001": {
      "offset": [
        6869,
        6900
      ],
      "op": "AND",
      "path": "14"
    },
    "3002": {
      "branch": 69,
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6869,
        6900
      ],
      "op": "EQ",
      "path": "14"
    },
    "3003": {
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xBD6"
    },
    "3006": {
      "branch": 69,
      "offset": [
        6861,
        6941
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3007": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3009": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3010": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3014": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3016": {
      "op": "SHL"
    },
    "3017": {
      "offset": [
        6861,
        6941
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3018": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3019": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "3021": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "ADD",
      "path": "14"
    },
    "3022": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "3025": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3026": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1AC6"
    },
    "3029": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "i",
      "offset": [
        6861,
        6941
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3030": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        6861,
        6941
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3031": {
      "op": "POP"
    },
    "3032": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7797,
        7798
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 20,
      "value": "0x0"
    },
    "3034": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "3035": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3036": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "POP",
      "path": "14"
    },
    "3037": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "offset": [
        7664,
        7805
      ],
      "op": "POP",
      "path": "14"
    },
    "3038": {
      "fn": "StakingEscrow.setWorkMeasurement",
      "jump": "o",
      "offset": [
        7664,
        7805
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3039": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1381,
        1518
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "3040": {
      "fn": "Ownable.isOwner",
      "offset": [
        1053,
        1057
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "3042": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "3043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3047": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3049": {
      "op": "SHL"
    },
    "3050": {
      "op": "SUB"
    },
    "3051": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "AND",
      "path": "34"
    },
    "3052": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1086
      ],
      "op": "CALLER",
      "path": "34"
    },
    "3053": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1096
      ],
      "op": "EQ",
      "path": "34"
    },
    "3054": {
      "offset": [
        889,
        907
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0xBF6"
    },
    "3057": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPI",
      "path": "34"
    },
    "3058": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "3060": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "DUP1",
      "path": "34"
    },
    "3061": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "REVERT",
      "path": "34"
    },
    "3062": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "3063": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1479,
        1480
      ],
      "op": "PUSH1",
      "path": "34",
      "statement": 21,
      "value": "0x0"
    },
    "3065": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "DUP1",
      "path": "34"
    },
    "3066": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "3067": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1442,
        1482
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x40"
    },
    "3069": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1442,
        1482
      ],
      "op": "MLOAD",
      "path": "34"
    },
    "3070": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3072": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3074": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3076": {
      "op": "SHL"
    },
    "3077": {
      "op": "SUB"
    },
    "3078": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "3079": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "SWAP2",
      "path": "34"
    },
    "3080": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "AND",
      "path": "34"
    },
    "3081": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1463,
        1469
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "3082": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1442,
        1482
      ],
      "op": "PUSH32",
      "path": "34",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3115": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1442,
        1482
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "3116": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1479,
        1480
      ],
      "op": "DUP4",
      "path": "34"
    },
    "3117": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1479,
        1480
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "3118": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1442,
        1482
      ],
      "op": "LOG3",
      "path": "34"
    },
    "3119": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1509,
        1510
      ],
      "op": "PUSH1",
      "path": "34",
      "statement": 22,
      "value": "0x0"
    },
    "3121": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1492,
        1511
      ],
      "op": "DUP1",
      "path": "34"
    },
    "3122": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1492,
        1511
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "3123": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3127": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3129": {
      "op": "SHL"
    },
    "3130": {
      "op": "SUB"
    },
    "3131": {
      "op": "NOT"
    },
    "3132": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1492,
        1511
      ],
      "op": "AND",
      "path": "34"
    },
    "3133": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1492,
        1511
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "3134": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1492,
        1511
      ],
      "op": "SSTORE",
      "path": "34"
    },
    "3135": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1381,
        1518
      ],
      "op": "JUMP",
      "path": "34"
    },
    "3136": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3137": {
      "offset": [
        6665,
        6675
      ],
      "op": "CALLER",
      "path": "14"
    },
    "3138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3142": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3144": {
      "op": "SHL"
    },
    "3145": {
      "op": "SUB"
    },
    "3146": {
      "offset": [
        6687,
        6695
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "3179": {
      "offset": [
        6665,
        6696
      ],
      "op": "AND",
      "path": "14"
    },
    "3180": {
      "branch": 70,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6665,
        6696
      ],
      "op": "EQ",
      "path": "14"
    },
    "3181": {
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xC88"
    },
    "3184": {
      "branch": 70,
      "offset": [
        6657,
        6738
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3185": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3187": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3188": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3194": {
      "op": "SHL"
    },
    "3195": {
      "offset": [
        6657,
        6738
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3196": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3197": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "3199": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "ADD",
      "path": "14"
    },
    "3200": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "3203": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3204": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B68"
    },
    "3207": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "i",
      "offset": [
        6657,
        6738
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3208": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        6657,
        6738
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3209": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12665,
        12666
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 23,
      "value": "0x0"
    },
    "3211": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12654,
        12662
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3212": {
      "branch": 71,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12654,
        12666
      ],
      "op": "GT",
      "path": "14"
    },
    "3213": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xCD8"
    },
    "3216": {
      "branch": 71,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3217": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3219": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3220": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3224": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3226": {
      "op": "SHL"
    },
    "3227": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3228": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3229": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3231": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "3233": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3234": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "ADD",
      "path": "14"
    },
    "3235": {
      "op": "MSTORE"
    },
    "3236": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "3238": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3240": {
      "op": "DUP3"
    },
    "3241": {
      "op": "ADD"
    },
    "3242": {
      "op": "MSTORE"
    },
    "3243": {
      "op": "PUSH32",
      "value": "0x50656E616C7479206D7573742062652073706563696669656400000000000000"
    },
    "3276": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3278": {
      "op": "DUP3"
    },
    "3279": {
      "op": "ADD"
    },
    "3280": {
      "op": "MSTORE"
    },
    "3281": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3283": {
      "op": "ADD"
    },
    "3284": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "3287": {
      "op": "JUMP"
    },
    "3288": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12646,
        12696
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3293": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3295": {
      "op": "SHL"
    },
    "3296": {
      "op": "SUB"
    },
    "3297": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "DUP5",
      "path": "14"
    },
    "3298": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "AND",
      "path": "14"
    },
    "3299": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12706,
        12729
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3301": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3302": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3303": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3304": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12742
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3306": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "3308": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3309": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3311": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3312": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12732,
        12751
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "3313": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12765,
        12775
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3314": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12765,
        12775
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3315": {
      "branch": 72,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12765,
        12787
      ],
      "op": "DUP5",
      "path": "14"
    },
    "3316": {
      "op": "LT"
    },
    "3317": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12761,
        12835
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xCFD"
    },
    "3320": {
      "branch": 72,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12761,
        12835
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3321": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12814,
        12824
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 24
    },
    "3322": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12814,
        12824
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3323": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12814,
        12824
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "3324": {
      "op": "POP"
    },
    "3325": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12761,
        12835
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3326": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12858,
        12866
      ],
      "op": "DUP4",
      "path": "14",
      "statement": 25
    },
    "3327": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12848
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3328": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12854
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3330": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12854
      ],
      "op": "ADD",
      "path": "14"
    },
    "3331": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12854
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3333": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3334": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3335": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3336": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xD11"
    },
    "3339": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3340": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3341": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B51"
    },
    "3344": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "i",
      "offset": [
        12844,
        12866
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3345": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3346": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3347": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3348": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12844,
        12866
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "3349": {
      "op": "POP"
    },
    "3350": {
      "op": "POP"
    },
    "3351": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12880,
        12898
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3352": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12880,
        12898
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3353": {
      "branch": 73,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12880,
        12898
      ],
      "op": "GT",
      "path": "14"
    },
    "3354": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12876,
        12943
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3355": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12876,
        12943
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xD22"
    },
    "3358": {
      "branch": 73,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12876,
        12943
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3359": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12924,
        12932
      ],
      "op": "DUP4",
      "path": "14",
      "statement": 26
    },
    "3360": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12914,
        12932
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3361": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12914,
        12932
      ],
      "op": "POP",
      "path": "14"
    },
    "3362": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12876,
        12943
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3363": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12985,
        12998
      ],
      "op": "DUP3",
      "path": "14",
      "statement": 27
    },
    "3364": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3368": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3370": {
      "op": "SHL"
    },
    "3371": {
      "op": "SUB"
    },
    "3372": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "AND",
      "path": "14"
    },
    "3373": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12966,
        12973
      ],
      "op": "DUP6",
      "path": "14"
    },
    "3374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3380": {
      "op": "SHL"
    },
    "3381": {
      "op": "SUB"
    },
    "3382": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "AND",
      "path": "14"
    },
    "3383": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x34040FA1C0549C8572589C39CB87FF7638286467446A4790971D58D931C654BB"
    },
    "3416": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12975,
        12983
      ],
      "op": "DUP7",
      "path": "14"
    },
    "3417": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13000,
        13007
      ],
      "op": "DUP6",
      "path": "14"
    },
    "3418": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3420": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3421": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xD70"
    },
    "3424": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "3425": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3426": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3427": {
      "op": "SWAP2"
    },
    "3428": {
      "op": "DUP3"
    },
    "3429": {
      "op": "MSTORE"
    },
    "3430": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3432": {
      "op": "DUP3"
    },
    "3433": {
      "op": "ADD"
    },
    "3434": {
      "op": "MSTORE"
    },
    "3435": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3437": {
      "op": "ADD"
    },
    "3438": {
      "op": "SWAP1"
    },
    "3439": {
      "op": "JUMP"
    },
    "3440": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3441": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3443": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3444": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3445": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3446": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SUB",
      "path": "14"
    },
    "3447": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3448": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12958,
        13008
      ],
      "op": "LOG3",
      "path": "14"
    },
    "3449": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13022,
        13033
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3450": {
      "branch": 74,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13022,
        13033
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3451": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13018,
        13102
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDB2"
    },
    "3454": {
      "branch": 74,
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13018,
        13102
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3455": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13049,
        13091
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 28,
      "value": "0xDB2"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3460": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3462": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3464": {
      "op": "SHL"
    },
    "3465": {
      "op": "SUB"
    },
    "3466": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13049,
        13054
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x0"
    },
    "3499": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13049,
        13067
      ],
      "op": "AND",
      "path": "14"
    },
    "3500": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13068,
        13081
      ],
      "op": "DUP5",
      "path": "14"
    },
    "3501": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13083,
        13090
      ],
      "op": "DUP5",
      "path": "14"
    },
    "3502": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13049,
        13067
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1341"
    },
    "3505": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "i",
      "offset": [
        13049,
        13091
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3506": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        13049,
        13091
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3507": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12636,
        13108
      ],
      "op": "POP",
      "path": "14"
    },
    "3508": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "POP",
      "path": "14"
    },
    "3509": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "POP",
      "path": "14"
    },
    "3510": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "POP",
      "path": "14"
    },
    "3511": {
      "fn": "StakingEscrow.slashStaker",
      "offset": [
        12460,
        13108
      ],
      "op": "POP",
      "path": "14"
    },
    "3512": {
      "fn": "StakingEscrow.slashStaker",
      "jump": "o",
      "offset": [
        12460,
        13108
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3513": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3514": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14401,
        14431
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 29,
      "value": "0xDC2"
    },
    "3517": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14419,
        14430
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3518": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14401,
        14418
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1376"
    },
    "3521": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14401,
        14431
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3522": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14401,
        14431
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3523": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14510,
        14517
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 30,
      "value": "0x7"
    },
    "3525": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14510,
        14524
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3526": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14450,
        14506
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDD5"
    },
    "3529": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14462,
        14473
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3530": {
      "op": "PUSH3",
      "value": "0x9FABEB"
    },
    "3534": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "3536": {
      "op": "SHL"
    },
    "3537": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14450,
        14461
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x13C9"
    },
    "3540": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14450,
        14506
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3541": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14450,
        14506
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3542": {
      "branch": 75,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14450,
        14524
      ],
      "op": "EQ",
      "path": "14"
    },
    "3543": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDDF"
    },
    "3546": {
      "branch": 75,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3547": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3549": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3550": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "REVERT",
      "path": "14"
    },
    "3551": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14442,
        14525
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3552": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14539,
        14546
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "3554": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14539,
        14553
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3555": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14535,
        14591
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDE9"
    },
    "3558": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14535,
        14591
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3559": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14325,
        15286
      ],
      "op": "POP",
      "path": "14"
    },
    "3560": {
      "fn": "StakingEscrow.verifyState",
      "jump": "o",
      "offset": [
        14325,
        15286
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3561": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14535,
        14591
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3562": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14600,
        14621
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3564": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14631
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "3566": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14632,
        14633
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3568": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3569": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3570": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3571": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "LT",
      "path": "14"
    },
    "3572": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDFF"
    },
    "3575": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3576": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDFF"
    },
    "3579": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BAD"
    },
    "3582": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14624,
        14634
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3583": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3584": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3586": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3587": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3588": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3589": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "3591": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3592": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "3593": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "ADD",
      "path": "14"
    },
    "3594": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3601": {
      "op": "SHL"
    },
    "3602": {
      "op": "SUB"
    },
    "3603": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "AND",
      "path": "14"
    },
    "3604": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3605": {
      "op": "POP"
    },
    "3606": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3607": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14624,
        14634
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3608": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14668,
        14718
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 31,
      "value": "0xE2B"
    },
    "3611": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14668,
        14718
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3612": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14680,
        14691
      ],
      "op": "DUP5",
      "path": "14"
    },
    "3613": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14680,
        14691
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3614": {
      "op": "PUSH4",
      "value": "0xFD5E6DD1"
    },
    "3619": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3621": {
      "op": "SHL"
    },
    "3622": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14693,
        14714
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3623": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14668,
        14679
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x13E2"
    },
    "3626": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14668,
        14718
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3627": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14668,
        14718
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3634": {
      "op": "SHL"
    },
    "3635": {
      "op": "SUB"
    },
    "3636": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14652,
        14737
      ],
      "op": "AND",
      "path": "14"
    },
    "3637": {
      "branch": 76,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14652,
        14737
      ],
      "op": "EQ",
      "path": "14"
    },
    "3638": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xE3E"
    },
    "3641": {
      "branch": 76,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3642": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3644": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3645": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "REVERT",
      "path": "14"
    },
    "3646": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14644,
        14738
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3651": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3653": {
      "op": "SHL"
    },
    "3654": {
      "op": "SUB"
    },
    "3655": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3656": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "AND",
      "path": "14"
    },
    "3657": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14748,
        14771
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3659": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3660": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3661": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3662": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14784
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3664": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "3666": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3667": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3669": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3670": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "3671": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3672": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3673": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14908,
        14950
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xE62"
    },
    "3676": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14930,
        14941
      ],
      "op": "DUP6",
      "path": "14"
    },
    "3677": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14774,
        14799
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3678": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14908,
        14929
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x13FD"
    },
    "3681": {
      "fn": "StakingEscrow.verifyState",
      "jump": "i",
      "offset": [
        14908,
        14950
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3682": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14908,
        14950
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3683": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14989,
        14999
      ],
      "op": "DUP4",
      "path": "14",
      "statement": 32
    },
    "3684": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14989,
        14999
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3685": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        14985
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3686": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        14985
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3687": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14876,
        14950
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3688": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14876,
        14950
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "3689": {
      "op": "POP"
    },
    "3690": {
      "branch": 77,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        14999
      ],
      "op": "EQ",
      "path": "14"
    },
    "3691": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3692": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3693": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xE7E"
    },
    "3696": {
      "branch": 77,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3697": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "POP",
      "path": "14"
    },
    "3698": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15054,
        15058
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3699": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15054,
        15082
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "3701": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15054,
        15082
      ],
      "op": "ADD",
      "path": "14"
    },
    "3702": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15054,
        15082
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3703": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15015,
        15026
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3704": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15015,
        15050
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x120"
    },
    "3707": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15015,
        15050
      ],
      "op": "ADD",
      "path": "14"
    },
    "3708": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15015,
        15050
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3709": {
      "branch": 78,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15015,
        15082
      ],
      "op": "EQ",
      "path": "14"
    },
    "3710": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15082
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3711": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3712": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3713": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xE92"
    },
    "3716": {
      "branch": 78,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3717": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "POP",
      "path": "14"
    },
    "3718": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15132,
        15136
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3719": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15132,
        15155
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3721": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15132,
        15155
      ],
      "op": "ADD",
      "path": "14"
    },
    "3722": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15132,
        15155
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3723": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15098,
        15109
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3724": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15098,
        15128
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x140"
    },
    "3727": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15098,
        15128
      ],
      "op": "ADD",
      "path": "14"
    },
    "3728": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15098,
        15128
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3729": {
      "branch": 79,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15098,
        15155
      ],
      "op": "EQ",
      "path": "14"
    },
    "3730": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15155
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3731": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15222
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3732": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15222
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3733": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15222
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xEB3"
    },
    "3736": {
      "branch": 79,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15222
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3737": {
      "op": "POP"
    },
    "3738": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "3740": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3741": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "ADD",
      "path": "14"
    },
    "3742": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3743": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15198
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x160"
    },
    "3746": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15198
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3747": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15198
      ],
      "op": "ADD",
      "path": "14"
    },
    "3748": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15198
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3749": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3751": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3753": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3755": {
      "op": "SHL"
    },
    "3756": {
      "op": "SUB"
    },
    "3757": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15222
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3758": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15222
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3759": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15222
      ],
      "op": "AND",
      "path": "14"
    },
    "3760": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3761": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15202,
        15222
      ],
      "op": "AND",
      "path": "14"
    },
    "3762": {
      "branch": 80,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15171,
        15222
      ],
      "op": "EQ",
      "path": "14"
    },
    "3763": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15222
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3764": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3765": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3766": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xEC7"
    },
    "3769": {
      "branch": 80,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3770": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "POP",
      "path": "14"
    },
    "3771": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15259,
        15263
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3772": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15259,
        15269
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "3774": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15259,
        15269
      ],
      "op": "ADD",
      "path": "14"
    },
    "3775": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15259,
        15269
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3776": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15238,
        15249
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3777": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15238,
        15255
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x100"
    },
    "3780": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15238,
        15255
      ],
      "op": "ADD",
      "path": "14"
    },
    "3781": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15238,
        15255
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3782": {
      "branch": 81,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        15238,
        15269
      ],
      "op": "EQ",
      "path": "14"
    },
    "3783": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14968,
        15269
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3784": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14960,
        15279
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDB2"
    },
    "3787": {
      "branch": 81,
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14960,
        15279
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3788": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14960,
        15279
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3790": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14960,
        15279
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3791": {
      "fn": "StakingEscrow.verifyState",
      "offset": [
        14960,
        15279
      ],
      "op": "REVERT",
      "path": "14"
    },
    "3792": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3797": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3799": {
      "op": "SHL"
    },
    "3800": {
      "op": "SUB"
    },
    "3801": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3802": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "AND",
      "path": "14"
    },
    "3803": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9557,
        9564
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3805": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3806": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3807": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3808": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9612
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3810": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "3812": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3813": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3815": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3816": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9602,
        9621
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "3817": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9635,
        9663
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "3819": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9635,
        9663
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3820": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9635,
        9663
      ],
      "op": "ADD",
      "path": "14"
    },
    "3821": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9635,
        9663
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3822": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9667,
        9682
      ],
      "op": "TIMESTAMP",
      "path": "14"
    },
    "3823": {
      "op": "LT"
    },
    "3824": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9631,
        9717
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xEFC"
    },
    "3827": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9631,
        9717
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3828": {
      "op": "POP"
    },
    "3829": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9705,
        9706
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 33,
      "value": "0x0"
    },
    "3831": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9705,
        9706
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "3832": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3833": {
      "op": "POP"
    },
    "3834": {
      "op": "POP"
    },
    "3835": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "o",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3836": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9631,
        9717
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3837": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9730,
        9753
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3839": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9730,
        9753
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3840": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9730,
        9753
      ],
      "op": "ADD",
      "path": "14"
    },
    "3841": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9730,
        9753
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3842": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9726,
        9862
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF0C"
    },
    "3845": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9726,
        9862
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3846": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9841,
        9851
      ],
      "op": "SLOAD",
      "path": "14",
      "statement": 34
    },
    "3847": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9841,
        9851
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "3848": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3849": {
      "op": "POP"
    },
    "3850": {
      "op": "POP"
    },
    "3851": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "o",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3852": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9726,
        9862
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3853": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9871,
        9893
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3855": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9947,
        9951
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3856": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9947,
        9970
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "3858": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9947,
        9970
      ],
      "op": "ADD",
      "path": "14"
    },
    "3859": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9947,
        9970
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3860": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9928,
        9943
      ],
      "op": "TIMESTAMP",
      "path": "14"
    },
    "3861": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9901
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3862": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9925
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "3864": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9925
      ],
      "op": "ADD",
      "path": "14"
    },
    "3865": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9925
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3866": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9943
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF23"
    },
    "3869": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9943
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3870": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9943
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3871": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9943
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B51"
    },
    "3874": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "i",
      "offset": [
        9897,
        9943
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3875": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9897,
        9943
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3876": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9896,
        9970
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF2D"
    },
    "3879": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9896,
        9970
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3880": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9896,
        9970
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3881": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9896,
        9970
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BC3"
    },
    "3884": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "i",
      "offset": [
        9896,
        9970
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3885": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9896,
        9970
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3886": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9871,
        9970
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3887": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9871,
        9970
      ],
      "op": "POP",
      "path": "14"
    },
    "3888": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        10000,
        10014
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 35
    },
    "3889": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        9991
      ],
      "op": "DUP3",
      "path": "14"
    },
    "3890": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        9997
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3892": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        9997
      ],
      "op": "ADD",
      "path": "14"
    },
    "3893": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        9997
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3894": {
      "branch": 82,
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10014
      ],
      "op": "LT",
      "path": "14"
    },
    "3895": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF40"
    },
    "3898": {
      "branch": 82,
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3899": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        10030,
        10044
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3900": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF43"
    },
    "3903": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3904": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3905": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        10017,
        10027
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3906": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        10017,
        10027
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "3907": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9987,
        10044
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3908": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9980,
        10044
      ],
      "op": "SWAP5",
      "path": "14"
    },
    "3909": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "offset": [
        9492,
        10051
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "3910": {
      "op": "POP"
    },
    "3911": {
      "op": "POP"
    },
    "3912": {
      "op": "POP"
    },
    "3913": {
      "op": "POP"
    },
    "3914": {
      "fn": "StakingEscrow.getUnvestedTokens",
      "jump": "o",
      "offset": [
        9492,
        10051
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3915": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3916": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13641,
        13648
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3918": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13672
      ],
      "op": "PUSH32",
      "path": "14",
      "statement": 36,
      "value": "0x0"
    },
    "3951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3953": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3955": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3957": {
      "op": "SHL"
    },
    "3958": {
      "op": "SUB"
    },
    "3959": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13684
      ],
      "op": "AND",
      "path": "14"
    },
    "3960": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13684
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x18160DDD"
    },
    "3965": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3967": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3968": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3969": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xFFFFFFFF"
    },
    "3974": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "AND",
      "path": "14"
    },
    "3975": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xE0"
    },
    "3977": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "SHL",
      "path": "14"
    },
    "3978": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3979": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "3980": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "3982": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ADD",
      "path": "14"
    },
    "3983": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "3985": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "3987": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "3988": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3989": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3990": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "SUB",
      "path": "14"
    },
    "3991": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3992": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP7",
      "path": "14"
    },
    "3993": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "GAS",
      "path": "14"
    },
    "3994": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "3995": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3996": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP1",
      "path": "14"
    },
    "3997": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3998": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFAB"
    },
    "4001": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4002": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "4003": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4005": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4006": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "RETURNDATACOPY",
      "path": "14"
    },
    "4007": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "4008": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4010": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "REVERT",
      "path": "14"
    },
    "4011": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4012": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "POP",
      "path": "14"
    },
    "4013": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "POP",
      "path": "14"
    },
    "4014": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "POP",
      "path": "14"
    },
    "4015": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "POP",
      "path": "14"
    },
    "4016": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4018": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4019": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "4020": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "4022": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "NOT",
      "path": "14"
    },
    "4023": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1F"
    },
    "4025": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4026": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ADD",
      "path": "14"
    },
    "4027": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "AND",
      "path": "14"
    },
    "4028": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4029": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ADD",
      "path": "14"
    },
    "4030": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4031": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4033": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4034": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "POP",
      "path": "14"
    },
    "4035": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4036": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "ADD",
      "path": "14"
    },
    "4037": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4038": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFCF"
    },
    "4041": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4042": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4043": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B38"
    },
    "4046": {
      "fn": "StakingEscrow.totalStakedAt",
      "jump": "i",
      "offset": [
        13667,
        13686
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4047": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13667,
        13686
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4048": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13660,
        13686
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "4049": {
      "fn": "StakingEscrow.totalStakedAt",
      "offset": [
        13566,
        13693
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4050": {
      "op": "POP"
    },
    "4051": {
      "op": "POP"
    },
    "4052": {
      "fn": "StakingEscrow.totalStakedAt",
      "jump": "o",
      "offset": [
        13566,
        13693
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4053": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4054": {
      "fn": "Ownable.isOwner",
      "offset": [
        1053,
        1057
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "4056": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "4057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4059": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4061": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4063": {
      "op": "SHL"
    },
    "4064": {
      "op": "SUB"
    },
    "4065": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "AND",
      "path": "34"
    },
    "4066": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1086
      ],
      "op": "CALLER",
      "path": "34"
    },
    "4067": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1096
      ],
      "op": "EQ",
      "path": "34"
    },
    "4068": {
      "offset": [
        889,
        907
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0xFEC"
    },
    "4071": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPI",
      "path": "34"
    },
    "4072": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "4074": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "DUP1",
      "path": "34"
    },
    "4075": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "REVERT",
      "path": "34"
    },
    "4076": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "4077": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10597
      ],
      "op": "DUP5",
      "path": "14",
      "statement": 37
    },
    "4078": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10597
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4079": {
      "branch": 83,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10597
      ],
      "op": "EQ",
      "path": "14"
    },
    "4080": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10660
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4081": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10660
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "4082": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10660
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xFFA"
    },
    "4085": {
      "branch": 83,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10660
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4086": {
      "op": "POP"
    },
    "4087": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10613,
        10660
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4088": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10613,
        10660
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4089": {
      "branch": 84,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10613,
        10660
      ],
      "op": "EQ",
      "path": "14"
    },
    "4090": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10554,
        10660
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4091": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x105D"
    },
    "4094": {
      "branch": 84,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4095": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4097": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4098": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4102": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4104": {
      "op": "SHL"
    },
    "4105": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4106": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4107": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4109": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "4111": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4112": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "ADD",
      "path": "14"
    },
    "4113": {
      "op": "MSTORE"
    },
    "4114": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4118": {
      "op": "DUP3"
    },
    "4119": {
      "op": "ADD"
    },
    "4120": {
      "op": "MSTORE"
    },
    "4121": {
      "op": "PUSH32",
      "value": "0x496E70757420617272617973206D75737420686176652073616D65206E756D62"
    },
    "4154": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4156": {
      "op": "DUP3"
    },
    "4157": {
      "op": "ADD"
    },
    "4158": {
      "op": "MSTORE"
    },
    "4159": {
      "op": "PUSH14",
      "value": "0x6572206F6620656C656D656E7473"
    },
    "4174": {
      "op": "PUSH1",
      "value": "0x90"
    },
    "4176": {
      "op": "SHL"
    },
    "4177": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4179": {
      "op": "DUP3"
    },
    "4180": {
      "op": "ADD"
    },
    "4181": {
      "op": "MSTORE"
    },
    "4182": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4184": {
      "op": "ADD"
    },
    "4185": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "4188": {
      "op": "JUMP"
    },
    "4189": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10546,
        10732
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4190": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10747,
        10756
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4192": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4193": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10762,
        10781
      ],
      "op": "DUP6",
      "path": "14"
    },
    "4194": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10762,
        10781
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4195": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10762,
        10781
      ],
      "op": "LT",
      "path": "14"
    },
    "4196": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "4197": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1220"
    },
    "4200": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4201": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10802,
        10816
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4203": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10827
      ],
      "op": "DUP8",
      "path": "14"
    },
    "4204": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10827
      ],
      "op": "DUP8",
      "path": "14"
    },
    "4205": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10828,
        10829
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4206": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4207": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4208": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "LT",
      "path": "14"
    },
    "4209": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x107C"
    },
    "4212": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4213": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x107C"
    },
    "4216": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BAD"
    },
    "4219": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        10819,
        10830
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4220": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4221": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4222": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "POP",
      "path": "14"
    },
    "4223": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4225": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "MUL",
      "path": "14"
    },
    "4226": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "ADD",
      "path": "14"
    },
    "4227": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4229": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4230": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "ADD",
      "path": "14"
    },
    "4231": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4232": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1091"
    },
    "4235": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4236": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4237": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x182E"
    },
    "4240": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        10819,
        10830
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4241": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10819,
        10830
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4244": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4246": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4248": {
      "op": "SHL"
    },
    "4249": {
      "op": "SUB"
    },
    "4250": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4251": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "AND",
      "path": "14"
    },
    "4252": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10844,
        10867
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4254": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4255": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4256": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4257": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "4259": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4261": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4262": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4264": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4265": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "4266": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10910,
        10938
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 38,
      "value": "0x5"
    },
    "4268": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10910,
        10938
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4269": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10910,
        10938
      ],
      "op": "ADD",
      "path": "14"
    },
    "4270": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10910,
        10938
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "4271": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10802,
        10830
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4272": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10802,
        10830
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "4273": {
      "op": "POP"
    },
    "4274": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10870,
        10888
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4275": {
      "branch": 85,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10910,
        10943
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "4276": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x110F"
    },
    "4279": {
      "branch": 85,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4280": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4282": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4283": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4287": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4289": {
      "op": "SHL"
    },
    "4290": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4291": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4292": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4294": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "4296": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4297": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "ADD",
      "path": "14"
    },
    "4298": {
      "op": "MSTORE"
    },
    "4299": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "4301": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4303": {
      "op": "DUP3"
    },
    "4304": {
      "op": "ADD"
    },
    "4305": {
      "op": "MSTORE"
    },
    "4306": {
      "op": "PUSH32",
      "value": "0x56657374696E6720706172616D65746572732063616E20626520736574206F6E"
    },
    "4339": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4341": {
      "op": "DUP3"
    },
    "4342": {
      "op": "ADD"
    },
    "4343": {
      "op": "MSTORE"
    },
    "4344": {
      "op": "PUSH7",
      "value": "0x6C79206F6E6365"
    },
    "4352": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "4354": {
      "op": "SHL"
    },
    "4355": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4357": {
      "op": "DUP3"
    },
    "4358": {
      "op": "ADD"
    },
    "4359": {
      "op": "MSTORE"
    },
    "4360": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4362": {
      "op": "ADD"
    },
    "4363": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "4366": {
      "op": "JUMP"
    },
    "4367": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10902,
        10987
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4368": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11049
      ],
      "op": "DUP7",
      "path": "14",
      "statement": 39
    },
    "4369": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11049
      ],
      "op": "DUP7",
      "path": "14"
    },
    "4370": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11050,
        11051
      ],
      "op": "DUP5",
      "path": "14"
    },
    "4371": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4372": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4373": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "LT",
      "path": "14"
    },
    "4374": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1121"
    },
    "4377": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4378": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1121"
    },
    "4381": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BAD"
    },
    "4384": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        11032,
        11052
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4385": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4386": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4388": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "MUL",
      "path": "14"
    },
    "4389": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4390": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4391": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4392": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "ADD",
      "path": "14"
    },
    "4393": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11032,
        11052
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "4394": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11001,
        11029
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "4396": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11001,
        11029
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4397": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11001,
        11029
      ],
      "op": "ADD",
      "path": "14"
    },
    "4398": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11001,
        11052
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "4399": {
      "op": "POP"
    },
    "4400": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11104
      ],
      "op": "DUP5",
      "path": "14",
      "statement": 40
    },
    "4401": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11104
      ],
      "op": "DUP5",
      "path": "14"
    },
    "4402": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11105,
        11106
      ],
      "op": "DUP5",
      "path": "14"
    },
    "4403": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4404": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4405": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "LT",
      "path": "14"
    },
    "4406": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1141"
    },
    "4409": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4410": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1141"
    },
    "4413": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BAD"
    },
    "4416": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        11092,
        11107
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4417": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4418": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4420": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "MUL",
      "path": "14"
    },
    "4421": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4422": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4423": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4424": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "ADD",
      "path": "14"
    },
    "4425": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11092,
        11107
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "4426": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11066,
        11089
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "4428": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11066,
        11089
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4429": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11066,
        11089
      ],
      "op": "ADD",
      "path": "14"
    },
    "4430": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11066,
        11107
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "4431": {
      "op": "POP"
    },
    "4432": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11157,
        11158
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 41,
      "value": "0x0"
    },
    "4434": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11129,
        11154
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x115A"
    },
    "4437": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11147,
        11153
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4438": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11129,
        11146
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xED0"
    },
    "4441": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        11129,
        11154
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4442": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11129,
        11154
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4443": {
      "branch": 86,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11129,
        11158
      ],
      "op": "GT",
      "path": "14"
    },
    "4444": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x11B7"
    },
    "4447": {
      "branch": 86,
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4448": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4450": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4451": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4455": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4457": {
      "op": "SHL"
    },
    "4458": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4459": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4460": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4462": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "4464": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4465": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "ADD",
      "path": "14"
    },
    "4466": {
      "op": "MSTORE"
    },
    "4467": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "4469": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4471": {
      "op": "DUP3"
    },
    "4472": {
      "op": "ADD"
    },
    "4473": {
      "op": "MSTORE"
    },
    "4474": {
      "op": "PUSH32",
      "value": "0x56657374696E6720706172616D6574657273206D757374206265207365742070"
    },
    "4507": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4509": {
      "op": "DUP3"
    },
    "4510": {
      "op": "ADD"
    },
    "4511": {
      "op": "MSTORE"
    },
    "4512": {
      "op": "PUSH7",
      "value": "0x726F7065726C79"
    },
    "4520": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "4522": {
      "op": "SHL"
    },
    "4523": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4525": {
      "op": "DUP3"
    },
    "4526": {
      "op": "ADD"
    },
    "4527": {
      "op": "MSTORE"
    },
    "4528": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4530": {
      "op": "ADD"
    },
    "4531": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x55A"
    },
    "4534": {
      "op": "JUMP"
    },
    "4535": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11121,
        11202
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4536": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11232,
        11238
      ],
      "op": "DUP2",
      "path": "14",
      "statement": 42
    },
    "4537": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4539": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4541": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4543": {
      "op": "SHL"
    },
    "4544": {
      "op": "SUB"
    },
    "4545": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "AND",
      "path": "14"
    },
    "4546": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0xFB8DC35D14CC25E41D680C975BD50A0640415AFDF7AF584763FA7549C0B88897"
    },
    "4579": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11240,
        11244
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4580": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11240,
        11268
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x5"
    },
    "4582": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11240,
        11268
      ],
      "op": "ADD",
      "path": "14"
    },
    "4583": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11240,
        11268
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "4584": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11270,
        11274
      ],
      "op": "DUP4",
      "path": "14"
    },
    "4585": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11270,
        11293
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x6"
    },
    "4587": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11270,
        11293
      ],
      "op": "ADD",
      "path": "14"
    },
    "4588": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11270,
        11293
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "4589": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4591": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4592": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1203"
    },
    "4595": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "4596": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4597": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4598": {
      "op": "SWAP2"
    },
    "4599": {
      "op": "DUP3"
    },
    "4600": {
      "op": "MSTORE"
    },
    "4601": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4603": {
      "op": "DUP3"
    },
    "4604": {
      "op": "ADD"
    },
    "4605": {
      "op": "MSTORE"
    },
    "4606": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4608": {
      "op": "ADD"
    },
    "4609": {
      "op": "SWAP1"
    },
    "4610": {
      "op": "JUMP"
    },
    "4611": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4612": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4614": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "4615": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4616": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4617": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SUB",
      "path": "14"
    },
    "4618": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4619": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        11221,
        11294
      ],
      "op": "LOG2",
      "path": "14"
    },
    "4620": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10788,
        11305
      ],
      "op": "POP",
      "path": "14"
    },
    "4621": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10788,
        11305
      ],
      "op": "POP",
      "path": "14"
    },
    "4622": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 43
    },
    "4623": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4624": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1218"
    },
    "4627": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4628": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BE2"
    },
    "4631": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "i",
      "offset": [
        10783,
        10786
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4632": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4633": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4634": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "POP",
      "path": "14"
    },
    "4635": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10783,
        10786
      ],
      "op": "POP",
      "path": "14"
    },
    "4636": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1060"
    },
    "4639": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4640": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4641": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10742,
        11305
      ],
      "op": "POP",
      "path": "14"
    },
    "4642": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4643": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4644": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4645": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4646": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4647": {
      "fn": "StakingEscrow.setupVesting",
      "offset": [
        10365,
        11311
      ],
      "op": "POP",
      "path": "14"
    },
    "4648": {
      "fn": "StakingEscrow.setupVesting",
      "jump": "o",
      "offset": [
        10365,
        11311
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4649": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "4650": {
      "offset": [
        1451,
        1452
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x2"
    },
    "4652": {
      "offset": [
        1653,
        1662
      ],
      "op": "DUP1",
      "path": "26"
    },
    "4653": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1653,
        1662
      ],
      "op": "SLOAD",
      "path": "26"
    },
    "4654": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4656": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4658": {
      "op": "SHL"
    },
    "4659": {
      "offset": [
        1653,
        1662
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "4660": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1653,
        1662
      ],
      "op": "DIV",
      "path": "26"
    },
    "4661": {
      "offset": [
        1653,
        1678
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0xFF"
    },
    "4663": {
      "offset": [
        1653,
        1662
      ],
      "op": "AND",
      "path": "26"
    },
    "4664": {
      "offset": [
        1653,
        1678
      ],
      "op": "EQ",
      "path": "26"
    },
    "4665": {
      "offset": [
        1645,
        1679
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1241"
    },
    "4668": {
      "offset": [
        1645,
        1679
      ],
      "op": "JUMPI",
      "path": "26"
    },
    "4669": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1645,
        1679
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "4671": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1645,
        1679
      ],
      "op": "DUP1",
      "path": "26"
    },
    "4672": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1645,
        1679
      ],
      "op": "REVERT",
      "path": "26"
    },
    "4673": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        1645,
        1679
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "4674": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "PUSH1",
      "path": "26",
      "statement": 44,
      "value": "0x40"
    },
    "4676": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "4677": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2223,
        2233
      ],
      "op": "CALLER",
      "path": "26"
    },
    "4678": {
      "op": "DUP2"
    },
    "4679": {
      "op": "MSTORE"
    },
    "4680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4686": {
      "op": "SHL"
    },
    "4687": {
      "op": "SUB"
    },
    "4688": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "DUP3",
      "path": "26"
    },
    "4689": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "AND",
      "path": "26"
    },
    "4690": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "4691": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "PUSH32",
      "path": "26",
      "value": "0xD55EC27C5C6316913ED8803C18CFD1BFEFEA953DB909DCBA6140744A9D8B0D1F"
    },
    "4724": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "4725": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4727": {
      "op": "ADD"
    },
    "4728": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "4729": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x40"
    },
    "4731": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "4732": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "DUP1",
      "path": "26"
    },
    "4733": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "SWAP2",
      "path": "26"
    },
    "4734": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "SUB",
      "path": "26"
    },
    "4735": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "4736": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2198,
        2234
      ],
      "op": "LOG2",
      "path": "26"
    },
    "4737": {
      "fn": "Upgradeable.finishUpgrade",
      "offset": [
        2109,
        2241
      ],
      "op": "POP",
      "path": "26"
    },
    "4738": {
      "fn": "Upgradeable.finishUpgrade",
      "jump": "o",
      "offset": [
        2109,
        2241
      ],
      "op": "JUMP",
      "path": "26"
    },
    "4739": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "4740": {
      "fn": "Ownable.isOwner",
      "offset": [
        1053,
        1057
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "4742": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "4743": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4747": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4749": {
      "op": "SHL"
    },
    "4750": {
      "op": "SUB"
    },
    "4751": {
      "fn": "Ownable.isOwner",
      "offset": [
        1090,
        1096
      ],
      "op": "AND",
      "path": "34"
    },
    "4752": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1086
      ],
      "op": "CALLER",
      "path": "34"
    },
    "4753": {
      "fn": "Ownable.isOwner",
      "offset": [
        1076,
        1096
      ],
      "op": "EQ",
      "path": "34"
    },
    "4754": {
      "offset": [
        889,
        907
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x129A"
    },
    "4757": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPI",
      "path": "34"
    },
    "4758": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "4760": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "DUP1",
      "path": "34"
    },
    "4761": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "REVERT",
      "path": "34"
    },
    "4762": {
      "fn": "Ownable.isOwner",
      "offset": [
        889,
        907
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "4763": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1769,
        1797
      ],
      "op": "PUSH2",
      "path": "34",
      "statement": 45,
      "value": "0x12A3"
    },
    "4766": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1788,
        1796
      ],
      "op": "DUP2",
      "path": "34"
    },
    "4767": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1769,
        1787
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x14C1"
    },
    "4770": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1769,
        1797
      ],
      "op": "JUMP",
      "path": "34"
    },
    "4771": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1769,
        1797
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "4772": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1689,
        1804
      ],
      "op": "POP",
      "path": "34"
    },
    "4773": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1689,
        1804
      ],
      "op": "JUMP",
      "path": "34"
    },
    "4774": {
      "offset": [
        5099,
        5123
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4775": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x7"
    },
    "4777": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4778": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4779": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "4780": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4781": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "LT",
      "path": "14"
    },
    "4782": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x12B6"
    },
    "4785": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "4786": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4788": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "DUP1",
      "path": "14"
    },
    "4789": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "REVERT",
      "path": "14"
    },
    "4790": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "4791": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "4793": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4794": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "DUP3",
      "path": "14"
    },
    "4795": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "4796": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "4798": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4799": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "4800": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "KECCAK256",
      "path": "14"
    },
    "4801": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "ADD",
      "path": "14"
    },
    "4802": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "4803": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4805": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4807": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4809": {
      "op": "SHL"
    },
    "4810": {
      "op": "SUB"
    },
    "4811": {
      "offset": [
        5099,
        5123
      ],
      "op": "AND",
      "path": "14"
    },
    "4812": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        5099,
        5123
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "4813": {
      "op": "POP"
    },
    "4814": {
      "offset": [
        5099,
        5123
      ],
      "op": "DUP2",
      "path": "14"
    },
    "4815": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        5099,
        5123
      ],
      "op": "JUMP",
      "path": "14"
    },
    "4816": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        908,
        1149
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "4817": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "PUSH1",
      "path": "39",
      "statement": 46,
      "value": "0x40"
    },
    "4819": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "4820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4824": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4826": {
      "op": "SHL"
    },
    "4827": {
      "op": "SUB"
    },
    "4828": {
      "op": "DUP1"
    },
    "4829": {
      "op": "DUP6"
    },
    "4830": {
      "op": "AND"
    },
    "4831": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x24"
    },
    "4833": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP4",
      "path": "39"
    },
    "4834": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "ADD",
      "path": "39"
    },
    "4835": {
      "op": "MSTORE"
    },
    "4836": {
      "op": "DUP4"
    },
    "4837": {
      "op": "AND"
    },
    "4838": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4840": {
      "op": "DUP3"
    },
    "4841": {
      "op": "ADD"
    },
    "4842": {
      "op": "MSTORE"
    },
    "4843": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4845": {
      "op": "DUP2"
    },
    "4846": {
      "op": "ADD"
    },
    "4847": {
      "op": "DUP3"
    },
    "4848": {
      "op": "SWAP1"
    },
    "4849": {
      "op": "MSTORE"
    },
    "4850": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1046,
        1142
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x133B"
    },
    "4853": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1046,
        1142
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4854": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1066,
        1071
      ],
      "op": "DUP6",
      "path": "39"
    },
    "4855": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1066,
        1071
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4856": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "4861": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4863": {
      "op": "SHL"
    },
    "4864": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1096,
        1123
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4865": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4867": {
      "op": "ADD"
    },
    "4868": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "4869": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x40"
    },
    "4871": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP1",
      "path": "39"
    },
    "4872": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "4873": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4875": {
      "op": "NOT"
    },
    "4876": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP2",
      "path": "39"
    },
    "4877": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP5",
      "path": "39"
    },
    "4878": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SUB",
      "path": "39"
    },
    "4879": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "ADD",
      "path": "39"
    },
    "4880": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP2",
      "path": "39"
    },
    "4881": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "4882": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP2",
      "path": "39"
    },
    "4883": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4884": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "4885": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x20"
    },
    "4887": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP2",
      "path": "39"
    },
    "4888": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "ADD",
      "path": "39"
    },
    "4889": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "DUP1",
      "path": "39"
    },
    "4890": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "4891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4895": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4897": {
      "op": "SHL"
    },
    "4898": {
      "op": "SUB"
    },
    "4899": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "AND",
      "path": "39"
    },
    "4900": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4902": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4904": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4906": {
      "op": "SHL"
    },
    "4907": {
      "op": "SUB"
    },
    "4908": {
      "op": "NOT"
    },
    "4909": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4910": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP4",
      "path": "39"
    },
    "4911": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "AND",
      "path": "39"
    },
    "4912": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP3",
      "path": "39"
    },
    "4913": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4914": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP3",
      "path": "39"
    },
    "4915": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "OR",
      "path": "39"
    },
    "4916": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4917": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "SWAP2",
      "path": "39"
    },
    "4918": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1073,
        1141
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "4919": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1046,
        1065
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x152F"
    },
    "4922": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "i",
      "offset": [
        1046,
        1142
      ],
      "op": "JUMP",
      "path": "39"
    },
    "4923": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1046,
        1142
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "4924": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        908,
        1149
      ],
      "op": "POP",
      "path": "39"
    },
    "4925": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        908,
        1149
      ],
      "op": "POP",
      "path": "39"
    },
    "4926": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        908,
        1149
      ],
      "op": "POP",
      "path": "39"
    },
    "4927": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        908,
        1149
      ],
      "op": "POP",
      "path": "39"
    },
    "4928": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "o",
      "offset": [
        908,
        1149
      ],
      "op": "JUMP",
      "path": "39"
    },
    "4929": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        697,
        902
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "4930": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "PUSH1",
      "path": "39",
      "statement": 47,
      "value": "0x40"
    },
    "4932": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "4933": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4935": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4937": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4939": {
      "op": "SHL"
    },
    "4940": {
      "op": "SUB"
    },
    "4941": {
      "op": "DUP4"
    },
    "4942": {
      "op": "AND"
    },
    "4943": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x24"
    },
    "4945": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "DUP3",
      "path": "39"
    },
    "4946": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "ADD",
      "path": "39"
    },
    "4947": {
      "op": "MSTORE"
    },
    "4948": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4950": {
      "op": "DUP2"
    },
    "4951": {
      "op": "ADD"
    },
    "4952": {
      "op": "DUP3"
    },
    "4953": {
      "op": "SWAP1"
    },
    "4954": {
      "op": "MSTORE"
    },
    "4955": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        809,
        895
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1371"
    },
    "4958": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        809,
        895
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4959": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        829,
        834
      ],
      "op": "DUP5",
      "path": "39"
    },
    "4960": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        829,
        834
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4961": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "4966": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4968": {
      "op": "SHL"
    },
    "4969": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        859,
        882
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "4970": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4972": {
      "op": "ADD"
    },
    "4973": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        836,
        894
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1304"
    },
    "4976": {
      "op": "JUMP"
    },
    "4977": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        809,
        895
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "4978": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        697,
        902
      ],
      "op": "POP",
      "path": "39"
    },
    "4979": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        697,
        902
      ],
      "op": "POP",
      "path": "39"
    },
    "4980": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        697,
        902
      ],
      "op": "POP",
      "path": "39"
    },
    "4981": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "o",
      "offset": [
        697,
        902
      ],
      "op": "JUMP",
      "path": "39"
    },
    "4982": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1837,
        1973
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "4983": {
      "offset": [
        1451,
        1452
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x2"
    },
    "4985": {
      "offset": [
        1653,
        1662
      ],
      "op": "DUP1",
      "path": "26"
    },
    "4986": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1653,
        1662
      ],
      "op": "SLOAD",
      "path": "26"
    },
    "4987": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4989": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4991": {
      "op": "SHL"
    },
    "4992": {
      "offset": [
        1653,
        1662
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "4993": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1653,
        1662
      ],
      "op": "DIV",
      "path": "26"
    },
    "4994": {
      "offset": [
        1653,
        1678
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0xFF"
    },
    "4996": {
      "offset": [
        1653,
        1662
      ],
      "op": "AND",
      "path": "26"
    },
    "4997": {
      "offset": [
        1653,
        1678
      ],
      "op": "EQ",
      "path": "26"
    },
    "4998": {
      "offset": [
        1645,
        1679
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x138E"
    },
    "5001": {
      "offset": [
        1645,
        1679
      ],
      "op": "JUMPI",
      "path": "26"
    },
    "5002": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1645,
        1679
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5004": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1645,
        1679
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5005": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1645,
        1679
      ],
      "op": "REVERT",
      "path": "26"
    },
    "5006": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1645,
        1679
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5007": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "PUSH1",
      "path": "26",
      "statement": 48,
      "value": "0x40"
    },
    "5009": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "5010": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1955,
        1965
      ],
      "op": "CALLER",
      "path": "26"
    },
    "5011": {
      "op": "DUP2"
    },
    "5012": {
      "op": "MSTORE"
    },
    "5013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5017": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5019": {
      "op": "SHL"
    },
    "5020": {
      "op": "SUB"
    },
    "5021": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "DUP3",
      "path": "26"
    },
    "5022": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "AND",
      "path": "26"
    },
    "5023": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "5024": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "PUSH32",
      "path": "26",
      "value": "0x1E8D98C1B4A0D9BD2E2371026B632EB2773FCCE41742E41F02F574AB69868D4C"
    },
    "5057": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "SWAP1",
      "path": "26"
    },
    "5058": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5060": {
      "op": "ADD"
    },
    "5061": {
      "fn": "Upgradeable.verifyState",
      "offset": [
        1928,
        1966
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1278"
    },
    "5064": {
      "op": "JUMP"
    },
    "5065": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3599,
        3858
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5066": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3681,
        3695
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5068": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3681,
        3695
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5069": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3735,
        3779
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x13D9"
    },
    "5072": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3751,
        3758
      ],
      "op": "DUP5",
      "path": "26"
    },
    "5073": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3760,
        3769
      ],
      "op": "DUP5",
      "path": "26"
    },
    "5074": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3681,
        3695
      ],
      "op": "DUP4",
      "path": "26"
    },
    "5075": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3681,
        3695
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5076": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3681,
        3695
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5077": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3735,
        3750
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1601"
    },
    "5080": {
      "fn": "Upgradeable.delegateGet",
      "jump": "i",
      "offset": [
        3735,
        3779
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5081": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3735,
        3779
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5082": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3822,
        3842
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "5083": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3822,
        3842
      ],
      "op": "SWAP5",
      "path": "26"
    },
    "5084": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3599,
        3858
      ],
      "op": "SWAP4",
      "path": "26"
    },
    "5085": {
      "op": "POP"
    },
    "5086": {
      "op": "POP"
    },
    "5087": {
      "op": "POP"
    },
    "5088": {
      "op": "POP"
    },
    "5089": {
      "fn": "Upgradeable.delegateGet",
      "jump": "o",
      "offset": [
        3599,
        3858
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5090": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3964,
        4250
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5091": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4065,
        4079
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5093": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4065,
        4079
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5094": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4119,
        4171
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x13F3"
    },
    "5097": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4135,
        4142
      ],
      "op": "DUP6",
      "path": "26"
    },
    "5098": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4144,
        4153
      ],
      "op": "DUP6",
      "path": "26"
    },
    "5099": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4155,
        4156
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x1"
    },
    "5101": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4158,
        4167
      ],
      "op": "DUP7",
      "path": "26"
    },
    "5102": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4065,
        4079
      ],
      "op": "DUP6",
      "path": "26"
    },
    "5103": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4119,
        4134
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1601"
    },
    "5106": {
      "fn": "Upgradeable.delegateGet",
      "jump": "i",
      "offset": [
        4119,
        4171
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5107": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4119,
        4171
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5108": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4214,
        4234
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "5109": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        4214,
        4234
      ],
      "op": "SWAP6",
      "path": "26"
    },
    "5110": {
      "fn": "Upgradeable.delegateGet",
      "offset": [
        3964,
        4250
      ],
      "op": "SWAP5",
      "path": "26"
    },
    "5111": {
      "op": "POP"
    },
    "5112": {
      "op": "POP"
    },
    "5113": {
      "op": "POP"
    },
    "5114": {
      "op": "POP"
    },
    "5115": {
      "op": "POP"
    },
    "5116": {
      "fn": "Upgradeable.delegateGet",
      "jump": "o",
      "offset": [
        3964,
        4250
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5117": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        13931,
        14223
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "5118": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14022,
        14046
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x14AA"
    },
    "5121": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5123": {
      "op": "MLOAD"
    },
    "5124": {
      "op": "DUP1"
    },
    "5125": {
      "op": "PUSH2",
      "value": "0x220"
    },
    "5128": {
      "op": "ADD"
    },
    "5129": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5131": {
      "op": "MSTORE"
    },
    "5132": {
      "op": "DUP1"
    },
    "5133": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5135": {
      "op": "DUP2"
    },
    "5136": {
      "op": "MSTORE"
    },
    "5137": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5139": {
      "op": "ADD"
    },
    "5140": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5142": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "5145": {
      "op": "AND"
    },
    "5146": {
      "op": "DUP2"
    },
    "5147": {
      "op": "MSTORE"
    },
    "5148": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5150": {
      "op": "ADD"
    },
    "5151": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5153": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "5156": {
      "op": "AND"
    },
    "5157": {
      "op": "DUP2"
    },
    "5158": {
      "op": "MSTORE"
    },
    "5159": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5161": {
      "op": "ADD"
    },
    "5162": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5164": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "5167": {
      "op": "AND"
    },
    "5168": {
      "op": "DUP2"
    },
    "5169": {
      "op": "MSTORE"
    },
    "5170": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5172": {
      "op": "ADD"
    },
    "5173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5175": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "5178": {
      "op": "AND"
    },
    "5179": {
      "op": "DUP2"
    },
    "5180": {
      "op": "MSTORE"
    },
    "5181": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5183": {
      "op": "ADD"
    },
    "5184": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5186": {
      "op": "DUP2"
    },
    "5187": {
      "op": "MSTORE"
    },
    "5188": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5190": {
      "op": "ADD"
    },
    "5191": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5193": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "5196": {
      "op": "AND"
    },
    "5197": {
      "op": "DUP2"
    },
    "5198": {
      "op": "MSTORE"
    },
    "5199": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5201": {
      "op": "ADD"
    },
    "5202": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5208": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5210": {
      "op": "SHL"
    },
    "5211": {
      "op": "SUB"
    },
    "5212": {
      "op": "AND"
    },
    "5213": {
      "op": "DUP2"
    },
    "5214": {
      "op": "MSTORE"
    },
    "5215": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5217": {
      "op": "ADD"
    },
    "5218": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5220": {
      "op": "DUP2"
    },
    "5221": {
      "op": "MSTORE"
    },
    "5222": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5224": {
      "op": "ADD"
    },
    "5225": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5227": {
      "op": "DUP2"
    },
    "5228": {
      "op": "MSTORE"
    },
    "5229": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5231": {
      "op": "ADD"
    },
    "5232": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5234": {
      "op": "DUP2"
    },
    "5235": {
      "op": "MSTORE"
    },
    "5236": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5238": {
      "op": "ADD"
    },
    "5239": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5245": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5247": {
      "op": "SHL"
    },
    "5248": {
      "op": "SUB"
    },
    "5249": {
      "op": "AND"
    },
    "5250": {
      "op": "DUP2"
    },
    "5251": {
      "op": "MSTORE"
    },
    "5252": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5254": {
      "op": "ADD"
    },
    "5255": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5257": {
      "op": "DUP2"
    },
    "5258": {
      "op": "MSTORE"
    },
    "5259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5261": {
      "op": "ADD"
    },
    "5262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5264": {
      "op": "DUP2"
    },
    "5265": {
      "op": "MSTORE"
    },
    "5266": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5268": {
      "op": "ADD"
    },
    "5269": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5271": {
      "op": "DUP2"
    },
    "5272": {
      "op": "MSTORE"
    },
    "5273": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5275": {
      "op": "ADD"
    },
    "5276": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5278": {
      "op": "DUP2"
    },
    "5279": {
      "op": "MSTORE"
    },
    "5280": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5282": {
      "op": "ADD"
    },
    "5283": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5285": {
      "op": "DUP2"
    },
    "5286": {
      "op": "MSTORE"
    },
    "5287": {
      "op": "POP"
    },
    "5288": {
      "op": "SWAP1"
    },
    "5289": {
      "op": "JUMP"
    },
    "5290": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14022,
        14046
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "5291": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14062,
        14083
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "5293": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14086,
        14151
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xF43"
    },
    "5296": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14102,
        14109
      ],
      "op": "DUP5",
      "path": "14"
    },
    "5297": {
      "op": "PUSH4",
      "value": "0x4E745F1F"
    },
    "5302": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5304": {
      "op": "SHL"
    },
    "5305": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14137,
        14138
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "5307": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14140,
        14147
      ],
      "op": "DUP7",
      "path": "14"
    },
    "5308": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14062,
        14083
      ],
      "op": "DUP6",
      "path": "14"
    },
    "5309": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "offset": [
        14086,
        14101
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1601"
    },
    "5312": {
      "fn": "StakingEscrow.delegateGetStakerInfo",
      "jump": "i",
      "offset": [
        14086,
        14151
      ],
      "op": "JUMP",
      "path": "14"
    },
    "5313": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        1948,
        2131
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "5314": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5316": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5318": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5320": {
      "op": "SHL"
    },
    "5321": {
      "op": "SUB"
    },
    "5322": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2021,
        2043
      ],
      "op": "DUP2",
      "path": "34",
      "statement": 49
    },
    "5323": {
      "branch": 90,
      "fn": "Ownable._transferOwnership",
      "offset": [
        2021,
        2043
      ],
      "op": "AND",
      "path": "34"
    },
    "5324": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "PUSH2",
      "path": "34",
      "value": "0x14D4"
    },
    "5327": {
      "branch": 90,
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "JUMPI",
      "path": "34"
    },
    "5328": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x0"
    },
    "5330": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "DUP1",
      "path": "34"
    },
    "5331": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "REVERT",
      "path": "34"
    },
    "5332": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2013,
        2044
      ],
      "op": "JUMPDEST",
      "path": "34"
    },
    "5333": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "PUSH1",
      "path": "34",
      "statement": 50,
      "value": "0x0"
    },
    "5335": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "DUP1",
      "path": "34"
    },
    "5336": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "5337": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "PUSH1",
      "path": "34",
      "value": "0x40"
    },
    "5339": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "MLOAD",
      "path": "34"
    },
    "5340": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5342": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5344": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5346": {
      "op": "SHL"
    },
    "5347": {
      "op": "SUB"
    },
    "5348": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "DUP1",
      "path": "34"
    },
    "5349": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "DUP6",
      "path": "34"
    },
    "5350": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "AND",
      "path": "34"
    },
    "5351": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "SWAP4",
      "path": "34"
    },
    "5352": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "SWAP3",
      "path": "34"
    },
    "5353": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "AND",
      "path": "34"
    },
    "5354": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2080,
        2086
      ],
      "op": "SWAP2",
      "path": "34"
    },
    "5355": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "PUSH32",
      "path": "34",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "5388": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "SWAP2",
      "path": "34"
    },
    "5389": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2059,
        2097
      ],
      "op": "LOG3",
      "path": "34"
    },
    "5390": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2113
      ],
      "op": "PUSH1",
      "path": "34",
      "statement": 51,
      "value": "0x0"
    },
    "5392": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "DUP1",
      "path": "34"
    },
    "5393": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SLOAD",
      "path": "34"
    },
    "5394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5396": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5398": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5400": {
      "op": "SHL"
    },
    "5401": {
      "op": "SUB"
    },
    "5402": {
      "op": "NOT"
    },
    "5403": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "AND",
      "path": "34"
    },
    "5404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5408": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5410": {
      "op": "SHL"
    },
    "5411": {
      "op": "SUB"
    },
    "5412": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP3",
      "path": "34"
    },
    "5413": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "5414": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP3",
      "path": "34"
    },
    "5415": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "AND",
      "path": "34"
    },
    "5416": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP2",
      "path": "34"
    },
    "5417": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "5418": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP2",
      "path": "34"
    },
    "5419": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "OR",
      "path": "34"
    },
    "5420": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SWAP1",
      "path": "34"
    },
    "5421": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2107,
        2124
      ],
      "op": "SSTORE",
      "path": "34"
    },
    "5422": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        1948,
        2131
      ],
      "op": "JUMP",
      "path": "34"
    },
    "5423": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3203,
        3909
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "5424": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3622,
        3645
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x0"
    },
    "5426": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1584"
    },
    "5429": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3676,
        3680
      ],
      "op": "DUP3",
      "path": "39"
    },
    "5430": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x40"
    },
    "5432": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "5433": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "DUP1",
      "path": "39"
    },
    "5434": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x40"
    },
    "5436": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "ADD",
      "path": "39"
    },
    "5437": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x40"
    },
    "5439": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "5440": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "DUP1",
      "path": "39"
    },
    "5441": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x20"
    },
    "5443": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "DUP2",
      "path": "39"
    },
    "5444": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "5445": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x20"
    },
    "5447": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "ADD",
      "path": "39"
    },
    "5448": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH32",
      "path": "39",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "5481": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "DUP2",
      "path": "39"
    },
    "5482": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "5483": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "POP",
      "path": "39"
    },
    "5484": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3656,
        3661
      ],
      "op": "DUP6",
      "path": "39"
    },
    "5485": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5489": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5491": {
      "op": "SHL"
    },
    "5492": {
      "op": "SUB"
    },
    "5493": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3675
      ],
      "op": "AND",
      "path": "39"
    },
    "5494": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3675
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1651"
    },
    "5497": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3675
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5498": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "SWAP3",
      "path": "39"
    },
    "5499": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "SWAP2",
      "path": "39"
    },
    "5500": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5501": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "PUSH4",
      "path": "39",
      "value": "0xFFFFFFFF"
    },
    "5506": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "AND",
      "path": "39"
    },
    "5507": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3648,
        3717
      ],
      "op": "JUMP",
      "path": "39"
    },
    "5508": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3648,
        3717
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "5509": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3748
      ],
      "op": "DUP1",
      "path": "39"
    },
    "5510": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3748
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "5511": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3622,
        3717
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5512": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3622,
        3717
      ],
      "op": "SWAP2",
      "path": "39"
    },
    "5513": {
      "op": "POP"
    },
    "5514": {
      "branch": 91,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3752
      ],
      "op": "ISZERO",
      "path": "39"
    },
    "5515": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3727,
        3903
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1371"
    },
    "5518": {
      "branch": 91,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3727,
        3903
      ],
      "op": "JUMPI",
      "path": "39"
    },
    "5519": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3826,
        3836
      ],
      "op": "DUP1",
      "path": "39",
      "statement": 52
    },
    "5520": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "DUP1",
      "path": "39"
    },
    "5521": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x20"
    },
    "5523": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "ADD",
      "path": "39"
    },
    "5524": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5525": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "5526": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "DUP2",
      "path": "39"
    },
    "5527": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "ADD",
      "path": "39"
    },
    "5528": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5529": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x15A2"
    },
    "5532": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "SWAP2",
      "path": "39"
    },
    "5533": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "SWAP1",
      "path": "39"
    },
    "5534": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1BFD"
    },
    "5537": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3815,
        3845
      ],
      "op": "JUMP",
      "path": "39"
    },
    "5538": {
      "branch": 92,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3815,
        3845
      ],
      "op": "JUMPDEST",
      "path": "39"
    },
    "5539": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x1371"
    },
    "5542": {
      "branch": 92,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "JUMPI",
      "path": "39"
    },
    "5543": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x40"
    },
    "5545": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "MLOAD",
      "path": "39"
    },
    "5546": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5550": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5552": {
      "op": "SHL"
    },
    "5553": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "DUP2",
      "path": "39"
    },
    "5554": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "MSTORE",
      "path": "39"
    },
    "5555": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5557": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "PUSH1",
      "path": "39",
      "value": "0x4"
    },
    "5559": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "DUP3",
      "path": "39"
    },
    "5560": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "ADD",
      "path": "39"
    },
    "5561": {
      "op": "MSTORE"
    },
    "5562": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "5564": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5566": {
      "op": "DUP3"
    },
    "5567": {
      "op": "ADD"
    },
    "5568": {
      "op": "MSTORE"
    },
    "5569": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "5602": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5604": {
      "op": "DUP3"
    },
    "5605": {
      "op": "ADD"
    },
    "5606": {
      "op": "MSTORE"
    },
    "5607": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "5618": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "5620": {
      "op": "SHL"
    },
    "5621": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5623": {
      "op": "DUP3"
    },
    "5624": {
      "op": "ADD"
    },
    "5625": {
      "op": "MSTORE"
    },
    "5626": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5628": {
      "op": "ADD"
    },
    "5629": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3807,
        3892
      ],
      "op": "PUSH2",
      "path": "39",
      "value": "0x55A"
    },
    "5632": {
      "op": "JUMP"
    },
    "5633": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5634": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2875,
        2879
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x40"
    },
    "5636": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2869,
        2880
      ],
      "op": "MLOAD",
      "path": "26"
    },
    "5637": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP5",
      "path": "26"
    },
    "5638": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP2",
      "path": "26"
    },
    "5639": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2893,
        2925
      ],
      "op": "MSTORE",
      "path": "26"
    },
    "5640": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2941,
        2966
      ],
      "op": "DUP4",
      "path": "26"
    },
    "5641": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2941,
        2966
      ],
      "op": "ISZERO",
      "path": "26"
    },
    "5642": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2938,
        3043
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1614"
    },
    "5645": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2938,
        3043
      ],
      "op": "JUMPI",
      "path": "26"
    },
    "5646": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3018,
        3028
      ],
      "op": "DUP3",
      "path": "26"
    },
    "5647": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3011,
        3015
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x4"
    },
    "5649": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2996,
        3009
      ],
      "op": "DUP3",
      "path": "26"
    },
    "5650": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2992,
        3016
      ],
      "op": "ADD",
      "path": "26"
    },
    "5651": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2985,
        3029
      ],
      "op": "MSTORE",
      "path": "26"
    },
    "5652": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2938,
        3043
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5653": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3082,
        3083
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x1"
    },
    "5655": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3062,
        3080
      ],
      "op": "DUP5",
      "path": "26"
    },
    "5656": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3059,
        3084
      ],
      "op": "GT",
      "path": "26"
    },
    "5657": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3056,
        3161
      ],
      "op": "ISZERO",
      "path": "26"
    },
    "5658": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3056,
        3161
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1624"
    },
    "5661": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3056,
        3161
      ],
      "op": "JUMPI",
      "path": "26"
    },
    "5662": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3136,
        3146
      ],
      "op": "DUP2",
      "path": "26"
    },
    "5663": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3129,
        3133
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x24"
    },
    "5665": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3114,
        3127
      ],
      "op": "DUP3",
      "path": "26"
    },
    "5666": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3110,
        3134
      ],
      "op": "ADD",
      "path": "26"
    },
    "5667": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3103,
        3147
      ],
      "op": "MSTORE",
      "path": "26"
    },
    "5668": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3056,
        3161
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5669": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3270,
        3271
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5671": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3267,
        3268
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5672": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3245,
        3263
      ],
      "op": "DUP6",
      "path": "26"
    },
    "5673": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3239,
        3243
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x20"
    },
    "5675": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3235,
        3264
      ],
      "op": "MUL",
      "path": "26"
    },
    "5676": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3229,
        3233
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x4"
    },
    "5678": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3225,
        3265
      ],
      "op": "ADD",
      "path": "26"
    },
    "5679": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3210,
        3223
      ],
      "op": "DUP4",
      "path": "26"
    },
    "5680": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3201,
        3208
      ],
      "op": "DUP10",
      "path": "26"
    },
    "5681": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3194,
        3199
      ],
      "op": "GAS",
      "path": "26"
    },
    "5682": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3181,
        3272
      ],
      "op": "DELEGATECALL",
      "path": "26"
    },
    "5683": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3289,
        3360
      ],
      "op": "DUP1",
      "path": "26"
    },
    "5684": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3289,
        3360
      ],
      "op": "ISZERO",
      "path": "26"
    },
    "5685": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3289,
        3360
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1642"
    },
    "5688": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3289,
        3360
      ],
      "op": "JUMPI",
      "path": "26"
    },
    "5689": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3442,
        3458
      ],
      "op": "RETURNDATASIZE",
      "path": "26"
    },
    "5690": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3437,
        3440
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5692": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3422,
        3435
      ],
      "op": "DUP4",
      "path": "26"
    },
    "5693": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3407,
        3459
      ],
      "op": "RETURNDATACOPY",
      "path": "26"
    },
    "5694": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3174,
        3477
      ],
      "op": "PUSH2",
      "path": "26",
      "value": "0x1647"
    },
    "5697": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3174,
        3477
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5698": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3289,
        3360
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5699": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3340,
        3341
      ],
      "op": "PUSH1",
      "path": "26",
      "value": "0x0"
    },
    "5701": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3325,
        3338
      ],
      "op": "DUP3",
      "path": "26"
    },
    "5702": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3318,
        3342
      ],
      "op": "REVERT",
      "path": "26"
    },
    "5703": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3174,
        3477
      ],
      "op": "JUMPDEST",
      "path": "26"
    },
    "5704": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        3174,
        3477
      ],
      "op": "POP",
      "path": "26"
    },
    "5705": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "SWAP6",
      "path": "26"
    },
    "5706": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "SWAP5",
      "path": "26"
    },
    "5707": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "POP",
      "path": "26"
    },
    "5708": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "POP",
      "path": "26"
    },
    "5709": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "POP",
      "path": "26"
    },
    "5710": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "POP",
      "path": "26"
    },
    "5711": {
      "fn": "Upgradeable.delegateGetData",
      "offset": [
        2594,
        3493
      ],
      "op": "POP",
      "path": "26"
    },
    "5712": {
      "fn": "Upgradeable.delegateGetData",
      "jump": "o",
      "offset": [
        2594,
        3493
      ],
      "op": "JUMP",
      "path": "26"
    },
    "5713": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5714": {
      "fn": "Address.functionCall",
      "offset": [
        3647,
        3659
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x60"
    },
    "5716": {
      "fn": "Address.functionCall",
      "offset": [
        3678,
        3730
      ],
      "op": "PUSH2",
      "path": "40",
      "statement": 53,
      "value": "0x1660"
    },
    "5719": {
      "fn": "Address.functionCall",
      "offset": [
        3700,
        3706
      ],
      "op": "DUP5",
      "path": "40"
    },
    "5720": {
      "fn": "Address.functionCall",
      "offset": [
        3708,
        3712
      ],
      "op": "DUP5",
      "path": "40"
    },
    "5721": {
      "fn": "Address.functionCall",
      "offset": [
        3714,
        3715
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x0"
    },
    "5723": {
      "fn": "Address.functionCall",
      "offset": [
        3717,
        3729
      ],
      "op": "DUP6",
      "path": "40"
    },
    "5724": {
      "fn": "Address.functionCall",
      "offset": [
        3678,
        3699
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x166A"
    },
    "5727": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        3678,
        3730
      ],
      "op": "JUMP",
      "path": "40"
    },
    "5728": {
      "fn": "Address.functionCall",
      "offset": [
        3678,
        3730
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5729": {
      "fn": "Address.functionCall",
      "offset": [
        3671,
        3730
      ],
      "op": "SWAP1",
      "path": "40"
    },
    "5730": {
      "fn": "Address.functionCall",
      "offset": [
        3671,
        3730
      ],
      "op": "POP",
      "path": "40"
    },
    "5731": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5732": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "SWAP4",
      "path": "40"
    },
    "5733": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "SWAP3",
      "path": "40"
    },
    "5734": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "POP",
      "path": "40"
    },
    "5735": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "POP",
      "path": "40"
    },
    "5736": {
      "fn": "Address.functionCall",
      "offset": [
        3514,
        3737
      ],
      "op": "POP",
      "path": "40"
    },
    "5737": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3514,
        3737
      ],
      "op": "JUMP",
      "path": "40"
    },
    "5738": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4601,
        5100
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5739": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4766,
        4778
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x60"
    },
    "5741": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4823,
        4828
      ],
      "op": "DUP3",
      "path": "40",
      "statement": 54
    },
    "5742": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4798,
        4819
      ],
      "op": "SELFBALANCE",
      "path": "40"
    },
    "5743": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4798,
        4828
      ],
      "op": "LT",
      "path": "40"
    },
    "5744": {
      "branch": 87,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4798,
        4828
      ],
      "op": "ISZERO",
      "path": "40"
    },
    "5745": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x16CB"
    },
    "5748": {
      "branch": 87,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "JUMPI",
      "path": "40"
    },
    "5749": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5751": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "5752": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5756": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5758": {
      "op": "SHL"
    },
    "5759": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "DUP2",
      "path": "40"
    },
    "5760": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "MSTORE",
      "path": "40"
    },
    "5761": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5763": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x4"
    },
    "5765": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "DUP3",
      "path": "40"
    },
    "5766": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "ADD",
      "path": "40"
    },
    "5767": {
      "op": "MSTORE"
    },
    "5768": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "5770": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5772": {
      "op": "DUP3"
    },
    "5773": {
      "op": "ADD"
    },
    "5774": {
      "op": "MSTORE"
    },
    "5775": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "5808": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5810": {
      "op": "DUP3"
    },
    "5811": {
      "op": "ADD"
    },
    "5812": {
      "op": "MSTORE"
    },
    "5813": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "5820": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "5822": {
      "op": "SHL"
    },
    "5823": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5825": {
      "op": "DUP3"
    },
    "5826": {
      "op": "ADD"
    },
    "5827": {
      "op": "MSTORE"
    },
    "5828": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5830": {
      "op": "ADD"
    },
    "5831": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x55A"
    },
    "5834": {
      "op": "JUMP"
    },
    "5835": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4790,
        4871
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5836": {
      "fn": "Address.isContract",
      "offset": [
        1087,
        1107
      ],
      "op": "DUP5",
      "path": "40"
    },
    "5837": {
      "fn": "Address.isContract",
      "offset": [
        1087,
        1107
      ],
      "op": "EXTCODESIZE",
      "path": "40"
    },
    "5838": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "PUSH2",
      "path": "40",
      "statement": 55,
      "value": "0x1719"
    },
    "5841": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "JUMPI",
      "path": "40"
    },
    "5842": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5844": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "5845": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5849": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5851": {
      "op": "SHL"
    },
    "5852": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "DUP2",
      "path": "40"
    },
    "5853": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "MSTORE",
      "path": "40"
    },
    "5854": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5856": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x4"
    },
    "5858": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "DUP3",
      "path": "40"
    },
    "5859": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "ADD",
      "path": "40"
    },
    "5860": {
      "op": "MSTORE"
    },
    "5861": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "5863": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5865": {
      "op": "DUP3"
    },
    "5866": {
      "op": "ADD"
    },
    "5867": {
      "op": "MSTORE"
    },
    "5868": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "5901": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5903": {
      "op": "DUP3"
    },
    "5904": {
      "op": "ADD"
    },
    "5905": {
      "op": "MSTORE"
    },
    "5906": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5908": {
      "op": "ADD"
    },
    "5909": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x55A"
    },
    "5912": {
      "op": "JUMP"
    },
    "5913": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4881,
        4941
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5914": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4953,
        4965
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x0"
    },
    "5916": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4967,
        4990
      ],
      "op": "DUP1",
      "path": "40"
    },
    "5917": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5000
      ],
      "op": "DUP7",
      "path": "40"
    },
    "5918": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5920": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5922": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5924": {
      "op": "SHL"
    },
    "5925": {
      "op": "SUB"
    },
    "5926": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5005
      ],
      "op": "AND",
      "path": "40"
    },
    "5927": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5013,
        5018
      ],
      "op": "DUP6",
      "path": "40"
    },
    "5928": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5020,
        5024
      ],
      "op": "DUP8",
      "path": "40"
    },
    "5929": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5931": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "5932": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1735"
    },
    "5935": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "5936": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SWAP1",
      "path": "40"
    },
    "5937": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1C46"
    },
    "5940": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMP",
      "path": "40"
    },
    "5941": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "5942": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x0"
    },
    "5944": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5946": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "5947": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP1",
      "path": "40"
    },
    "5948": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP4",
      "path": "40"
    },
    "5949": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SUB",
      "path": "40"
    },
    "5950": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP2",
      "path": "40"
    },
    "5951": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP6",
      "path": "40"
    },
    "5952": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP8",
      "path": "40"
    },
    "5953": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "GAS",
      "path": "40"
    },
    "5954": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "CALL",
      "path": "40"
    },
    "5955": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SWAP3",
      "path": "40"
    },
    "5956": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "5957": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "5958": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "5959": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "40"
    },
    "5960": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP1",
      "path": "40"
    },
    "5961": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x0"
    },
    "5963": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP2",
      "path": "40"
    },
    "5964": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "EQ",
      "path": "40"
    },
    "5965": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1772"
    },
    "5968": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMPI",
      "path": "40"
    },
    "5969": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5971": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "5972": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "5973": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "5974": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x1F"
    },
    "5976": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "NOT",
      "path": "40"
    },
    "5977": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x3F"
    },
    "5979": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "40"
    },
    "5980": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "ADD",
      "path": "40"
    },
    "5981": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "AND",
      "path": "40"
    },
    "5982": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP3",
      "path": "40"
    },
    "5983": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "ADD",
      "path": "40"
    },
    "5984": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "5986": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "MSTORE",
      "path": "40"
    },
    "5987": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "40"
    },
    "5988": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP3",
      "path": "40"
    },
    "5989": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "MSTORE",
      "path": "40"
    },
    "5990": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "40"
    },
    "5991": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x0"
    },
    "5993": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x20"
    },
    "5995": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "DUP5",
      "path": "40"
    },
    "5996": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "ADD",
      "path": "40"
    },
    "5997": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "RETURNDATACOPY",
      "path": "40"
    },
    "5998": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1777"
    },
    "6001": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMP",
      "path": "40"
    },
    "6002": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6003": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x60"
    },
    "6005": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "6006": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "6007": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6008": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4994,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "6009": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4952,
        5025
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "6010": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4952,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "6011": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4952,
        5025
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "6012": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4952,
        5025
      ],
      "op": "POP",
      "path": "40"
    },
    "6013": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5093
      ],
      "op": "PUSH2",
      "path": "40",
      "statement": 56,
      "value": "0x1787"
    },
    "6016": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5059,
        5066
      ],
      "op": "DUP3",
      "path": "40"
    },
    "6017": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5068,
        5078
      ],
      "op": "DUP3",
      "path": "40"
    },
    "6018": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5080,
        5092
      ],
      "op": "DUP7",
      "path": "40"
    },
    "6019": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5058
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1792"
    },
    "6022": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5042,
        5093
      ],
      "op": "JUMP",
      "path": "40"
    },
    "6023": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5093
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6024": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5035,
        5093
      ],
      "op": "SWAP8",
      "path": "40"
    },
    "6025": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4601,
        5100
      ],
      "op": "SWAP7",
      "path": "40"
    },
    "6026": {
      "op": "POP"
    },
    "6027": {
      "op": "POP"
    },
    "6028": {
      "op": "POP"
    },
    "6029": {
      "op": "POP"
    },
    "6030": {
      "op": "POP"
    },
    "6031": {
      "op": "POP"
    },
    "6032": {
      "op": "POP"
    },
    "6033": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4601,
        5100
      ],
      "op": "JUMP",
      "path": "40"
    },
    "6034": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7214,
        7906
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6035": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7360,
        7372
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x60"
    },
    "6037": {
      "branch": 88,
      "fn": "Address.verifyCallResult",
      "offset": [
        7388,
        7395
      ],
      "op": "DUP4",
      "path": "40"
    },
    "6038": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7384,
        7900
      ],
      "op": "ISZERO",
      "path": "40"
    },
    "6039": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7384,
        7900
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x17A1"
    },
    "6042": {
      "branch": 88,
      "fn": "Address.verifyCallResult",
      "offset": [
        7384,
        7900
      ],
      "op": "JUMPI",
      "path": "40"
    },
    "6043": {
      "op": "POP"
    },
    "6044": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7418,
        7428
      ],
      "op": "DUP2",
      "path": "40",
      "statement": 57
    },
    "6045": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7411,
        7428
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1663"
    },
    "6048": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7411,
        7428
      ],
      "op": "JUMP",
      "path": "40"
    },
    "6049": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7384,
        7900
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6050": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP3",
      "path": "40"
    },
    "6051": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7529,
        7546
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "6052": {
      "branch": 89,
      "fn": "Address.verifyCallResult",
      "offset": [
        7529,
        7550
      ],
      "op": "ISZERO",
      "path": "40"
    },
    "6053": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7525,
        7890
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x17B1"
    },
    "6056": {
      "branch": 89,
      "fn": "Address.verifyCallResult",
      "offset": [
        7525,
        7890
      ],
      "op": "JUMPI",
      "path": "40"
    },
    "6057": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7723,
        7733
      ],
      "op": "DUP3",
      "path": "40"
    },
    "6058": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7717,
        7734
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "6059": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7783,
        7798
      ],
      "op": "DUP1",
      "path": "40"
    },
    "6060": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7770,
        7780
      ],
      "op": "DUP5",
      "path": "40"
    },
    "6061": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7766,
        7768
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x20"
    },
    "6063": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7762,
        7781
      ],
      "op": "ADD",
      "path": "40"
    },
    "6064": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7755,
        7799
      ],
      "op": "REVERT",
      "path": "40"
    },
    "6065": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7525,
        7890
      ],
      "op": "JUMPDEST",
      "path": "40"
    },
    "6066": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7862,
        7874
      ],
      "op": "DUP2",
      "path": "40",
      "statement": 58
    },
    "6067": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x40"
    },
    "6069": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "MLOAD",
      "path": "40"
    },
    "6070": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6074": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6076": {
      "op": "SHL"
    },
    "6077": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "DUP2",
      "path": "40"
    },
    "6078": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "MSTORE",
      "path": "40"
    },
    "6079": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "PUSH1",
      "path": "40",
      "value": "0x4"
    },
    "6081": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "ADD",
      "path": "40"
    },
    "6082": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x55A"
    },
    "6085": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "SWAP2",
      "path": "40"
    },
    "6086": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "SWAP1",
      "path": "40"
    },
    "6087": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7855,
        7875
      ],
      "op": "PUSH2",
      "path": "40",
      "value": "0x1C62"
    },
    "6090": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        7855,
        7875
      ],
      "op": "JUMP",
      "path": "40"
    },
    "6091": {
      "op": "JUMPDEST"
    },
    "6092": {
      "op": "DUP1"
    },
    "6093": {
      "op": "CALLDATALOAD"
    },
    "6094": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6096": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6098": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6100": {
      "op": "SHL"
    },
    "6101": {
      "op": "SUB"
    },
    "6102": {
      "op": "DUP2"
    },
    "6103": {
      "op": "AND"
    },
    "6104": {
      "op": "DUP2"
    },
    "6105": {
      "op": "EQ"
    },
    "6106": {
      "op": "PUSH2",
      "value": "0x17E2"
    },
    "6109": {
      "op": "JUMPI"
    },
    "6110": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6112": {
      "op": "DUP1"
    },
    "6113": {
      "op": "REVERT"
    },
    "6114": {
      "op": "JUMPDEST"
    },
    "6115": {
      "op": "SWAP2"
    },
    "6116": {
      "op": "SWAP1"
    },
    "6117": {
      "op": "POP"
    },
    "6118": {
      "jump": "o",
      "op": "JUMP"
    },
    "6119": {
      "op": "JUMPDEST"
    },
    "6120": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6122": {
      "op": "DUP1"
    },
    "6123": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6125": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6127": {
      "op": "DUP5"
    },
    "6128": {
      "op": "DUP7"
    },
    "6129": {
      "op": "SUB"
    },
    "6130": {
      "op": "SLT"
    },
    "6131": {
      "op": "ISZERO"
    },
    "6132": {
      "op": "PUSH2",
      "value": "0x17FC"
    },
    "6135": {
      "op": "JUMPI"
    },
    "6136": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6138": {
      "op": "DUP1"
    },
    "6139": {
      "op": "REVERT"
    },
    "6140": {
      "op": "JUMPDEST"
    },
    "6141": {
      "op": "PUSH2",
      "value": "0x1805"
    },
    "6144": {
      "op": "DUP5"
    },
    "6145": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6148": {
      "jump": "i",
      "op": "JUMP"
    },
    "6149": {
      "op": "JUMPDEST"
    },
    "6150": {
      "op": "SWAP3"
    },
    "6151": {
      "op": "POP"
    },
    "6152": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6154": {
      "op": "DUP5"
    },
    "6155": {
      "op": "ADD"
    },
    "6156": {
      "op": "CALLDATALOAD"
    },
    "6157": {
      "op": "SWAP2"
    },
    "6158": {
      "op": "POP"
    },
    "6159": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6161": {
      "op": "DUP5"
    },
    "6162": {
      "op": "ADD"
    },
    "6163": {
      "op": "CALLDATALOAD"
    },
    "6164": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "6167": {
      "op": "DUP2"
    },
    "6168": {
      "op": "AND"
    },
    "6169": {
      "op": "DUP2"
    },
    "6170": {
      "op": "EQ"
    },
    "6171": {
      "op": "PUSH2",
      "value": "0x1823"
    },
    "6174": {
      "op": "JUMPI"
    },
    "6175": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6177": {
      "op": "DUP1"
    },
    "6178": {
      "op": "REVERT"
    },
    "6179": {
      "op": "JUMPDEST"
    },
    "6180": {
      "op": "DUP1"
    },
    "6181": {
      "op": "SWAP2"
    },
    "6182": {
      "op": "POP"
    },
    "6183": {
      "op": "POP"
    },
    "6184": {
      "op": "SWAP3"
    },
    "6185": {
      "op": "POP"
    },
    "6186": {
      "op": "SWAP3"
    },
    "6187": {
      "op": "POP"
    },
    "6188": {
      "op": "SWAP3"
    },
    "6189": {
      "jump": "o",
      "op": "JUMP"
    },
    "6190": {
      "op": "JUMPDEST"
    },
    "6191": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6193": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6195": {
      "op": "DUP3"
    },
    "6196": {
      "op": "DUP5"
    },
    "6197": {
      "op": "SUB"
    },
    "6198": {
      "op": "SLT"
    },
    "6199": {
      "op": "ISZERO"
    },
    "6200": {
      "op": "PUSH2",
      "value": "0x1840"
    },
    "6203": {
      "op": "JUMPI"
    },
    "6204": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6206": {
      "op": "DUP1"
    },
    "6207": {
      "op": "REVERT"
    },
    "6208": {
      "op": "JUMPDEST"
    },
    "6209": {
      "op": "PUSH2",
      "value": "0x1663"
    },
    "6212": {
      "op": "DUP3"
    },
    "6213": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6216": {
      "jump": "i",
      "op": "JUMP"
    },
    "6217": {
      "op": "JUMPDEST"
    },
    "6218": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6220": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6222": {
      "op": "DUP3"
    },
    "6223": {
      "op": "DUP5"
    },
    "6224": {
      "op": "SUB"
    },
    "6225": {
      "op": "SLT"
    },
    "6226": {
      "op": "ISZERO"
    },
    "6227": {
      "op": "PUSH2",
      "value": "0x185B"
    },
    "6230": {
      "op": "JUMPI"
    },
    "6231": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6233": {
      "op": "DUP1"
    },
    "6234": {
      "op": "REVERT"
    },
    "6235": {
      "op": "JUMPDEST"
    },
    "6236": {
      "op": "POP"
    },
    "6237": {
      "op": "CALLDATALOAD"
    },
    "6238": {
      "op": "SWAP2"
    },
    "6239": {
      "op": "SWAP1"
    },
    "6240": {
      "op": "POP"
    },
    "6241": {
      "jump": "o",
      "op": "JUMP"
    },
    "6242": {
      "op": "JUMPDEST"
    },
    "6243": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6245": {
      "op": "DUP1"
    },
    "6246": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6248": {
      "op": "DUP4"
    },
    "6249": {
      "op": "DUP6"
    },
    "6250": {
      "op": "SUB"
    },
    "6251": {
      "op": "SLT"
    },
    "6252": {
      "op": "ISZERO"
    },
    "6253": {
      "op": "PUSH2",
      "value": "0x1875"
    },
    "6256": {
      "op": "JUMPI"
    },
    "6257": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6259": {
      "op": "DUP1"
    },
    "6260": {
      "op": "REVERT"
    },
    "6261": {
      "op": "JUMPDEST"
    },
    "6262": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "6265": {
      "op": "DUP4"
    },
    "6266": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6269": {
      "jump": "i",
      "op": "JUMP"
    },
    "6270": {
      "op": "JUMPDEST"
    },
    "6271": {
      "op": "SWAP2"
    },
    "6272": {
      "op": "POP"
    },
    "6273": {
      "op": "PUSH2",
      "value": "0x188C"
    },
    "6276": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6278": {
      "op": "DUP5"
    },
    "6279": {
      "op": "ADD"
    },
    "6280": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6283": {
      "jump": "i",
      "op": "JUMP"
    },
    "6284": {
      "op": "JUMPDEST"
    },
    "6285": {
      "op": "SWAP1"
    },
    "6286": {
      "op": "POP"
    },
    "6287": {
      "op": "SWAP3"
    },
    "6288": {
      "op": "POP"
    },
    "6289": {
      "op": "SWAP3"
    },
    "6290": {
      "op": "SWAP1"
    },
    "6291": {
      "op": "POP"
    },
    "6292": {
      "jump": "o",
      "op": "JUMP"
    },
    "6293": {
      "op": "JUMPDEST"
    },
    "6294": {
      "op": "DUP1"
    },
    "6295": {
      "op": "ISZERO"
    },
    "6296": {
      "op": "ISZERO"
    },
    "6297": {
      "op": "DUP2"
    },
    "6298": {
      "op": "EQ"
    },
    "6299": {
      "op": "PUSH2",
      "value": "0x12A3"
    },
    "6302": {
      "op": "JUMPI"
    },
    "6303": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6305": {
      "op": "DUP1"
    },
    "6306": {
      "op": "REVERT"
    },
    "6307": {
      "op": "JUMPDEST"
    },
    "6308": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6310": {
      "op": "DUP1"
    },
    "6311": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6313": {
      "op": "DUP4"
    },
    "6314": {
      "op": "DUP6"
    },
    "6315": {
      "op": "SUB"
    },
    "6316": {
      "op": "SLT"
    },
    "6317": {
      "op": "ISZERO"
    },
    "6318": {
      "op": "PUSH2",
      "value": "0x18B6"
    },
    "6321": {
      "op": "JUMPI"
    },
    "6322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6324": {
      "op": "DUP1"
    },
    "6325": {
      "op": "REVERT"
    },
    "6326": {
      "op": "JUMPDEST"
    },
    "6327": {
      "op": "PUSH2",
      "value": "0x18BF"
    },
    "6330": {
      "op": "DUP4"
    },
    "6331": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6334": {
      "jump": "i",
      "op": "JUMP"
    },
    "6335": {
      "op": "JUMPDEST"
    },
    "6336": {
      "op": "SWAP2"
    },
    "6337": {
      "op": "POP"
    },
    "6338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6340": {
      "op": "DUP4"
    },
    "6341": {
      "op": "ADD"
    },
    "6342": {
      "op": "CALLDATALOAD"
    },
    "6343": {
      "op": "PUSH2",
      "value": "0x18CF"
    },
    "6346": {
      "op": "DUP2"
    },
    "6347": {
      "op": "PUSH2",
      "value": "0x1895"
    },
    "6350": {
      "jump": "i",
      "op": "JUMP"
    },
    "6351": {
      "op": "JUMPDEST"
    },
    "6352": {
      "op": "DUP1"
    },
    "6353": {
      "op": "SWAP2"
    },
    "6354": {
      "op": "POP"
    },
    "6355": {
      "op": "POP"
    },
    "6356": {
      "op": "SWAP3"
    },
    "6357": {
      "op": "POP"
    },
    "6358": {
      "op": "SWAP3"
    },
    "6359": {
      "op": "SWAP1"
    },
    "6360": {
      "op": "POP"
    },
    "6361": {
      "jump": "o",
      "op": "JUMP"
    },
    "6362": {
      "op": "JUMPDEST"
    },
    "6363": {
      "op": "DUP15"
    },
    "6364": {
      "op": "DUP2"
    },
    "6365": {
      "op": "MSTORE"
    },
    "6366": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "6369": {
      "op": "DUP15"
    },
    "6370": {
      "op": "DUP2"
    },
    "6371": {
      "op": "AND"
    },
    "6372": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6374": {
      "op": "DUP4"
    },
    "6375": {
      "op": "ADD"
    },
    "6376": {
      "op": "MSTORE"
    },
    "6377": {
      "op": "DUP14"
    },
    "6378": {
      "op": "DUP2"
    },
    "6379": {
      "op": "AND"
    },
    "6380": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6382": {
      "op": "DUP4"
    },
    "6383": {
      "op": "ADD"
    },
    "6384": {
      "op": "MSTORE"
    },
    "6385": {
      "op": "DUP13"
    },
    "6386": {
      "op": "DUP2"
    },
    "6387": {
      "op": "AND"
    },
    "6388": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6390": {
      "op": "DUP4"
    },
    "6391": {
      "op": "ADD"
    },
    "6392": {
      "op": "MSTORE"
    },
    "6393": {
      "op": "DUP12"
    },
    "6394": {
      "op": "AND"
    },
    "6395": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6397": {
      "op": "DUP3"
    },
    "6398": {
      "op": "ADD"
    },
    "6399": {
      "op": "MSTORE"
    },
    "6400": {
      "op": "PUSH2",
      "value": "0x1C0"
    },
    "6403": {
      "op": "DUP2"
    },
    "6404": {
      "op": "ADD"
    },
    "6405": {
      "op": "DUP11"
    },
    "6406": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6408": {
      "op": "DUP4"
    },
    "6409": {
      "op": "ADD"
    },
    "6410": {
      "op": "MSTORE"
    },
    "6411": {
      "op": "PUSH2",
      "value": "0x191A"
    },
    "6414": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "6416": {
      "op": "DUP4"
    },
    "6417": {
      "op": "ADD"
    },
    "6418": {
      "op": "DUP12"
    },
    "6419": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "6422": {
      "op": "AND"
    },
    "6423": {
      "op": "SWAP1"
    },
    "6424": {
      "op": "MSTORE"
    },
    "6425": {
      "op": "JUMP"
    },
    "6426": {
      "op": "JUMPDEST"
    },
    "6427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6431": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6433": {
      "op": "SHL"
    },
    "6434": {
      "op": "SUB"
    },
    "6435": {
      "op": "DUP10"
    },
    "6436": {
      "op": "AND"
    },
    "6437": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6439": {
      "op": "DUP4"
    },
    "6440": {
      "op": "ADD"
    },
    "6441": {
      "op": "MSTORE"
    },
    "6442": {
      "op": "DUP8"
    },
    "6443": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "6446": {
      "op": "DUP4"
    },
    "6447": {
      "op": "ADD"
    },
    "6448": {
      "op": "MSTORE"
    },
    "6449": {
      "op": "DUP7"
    },
    "6450": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "6453": {
      "op": "DUP4"
    },
    "6454": {
      "op": "ADD"
    },
    "6455": {
      "op": "MSTORE"
    },
    "6456": {
      "op": "DUP6"
    },
    "6457": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "6460": {
      "op": "DUP4"
    },
    "6461": {
      "op": "ADD"
    },
    "6462": {
      "op": "MSTORE"
    },
    "6463": {
      "op": "PUSH2",
      "value": "0x1954"
    },
    "6466": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "6469": {
      "op": "DUP4"
    },
    "6470": {
      "op": "ADD"
    },
    "6471": {
      "op": "DUP7"
    },
    "6472": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6476": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6478": {
      "op": "SHL"
    },
    "6479": {
      "op": "SUB"
    },
    "6480": {
      "op": "AND"
    },
    "6481": {
      "op": "SWAP1"
    },
    "6482": {
      "op": "MSTORE"
    },
    "6483": {
      "op": "JUMP"
    },
    "6484": {
      "op": "JUMPDEST"
    },
    "6485": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "6488": {
      "op": "DUP3"
    },
    "6489": {
      "op": "ADD"
    },
    "6490": {
      "op": "SWAP4"
    },
    "6491": {
      "op": "SWAP1"
    },
    "6492": {
      "op": "SWAP4"
    },
    "6493": {
      "op": "MSTORE"
    },
    "6494": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "6497": {
      "op": "ADD"
    },
    "6498": {
      "op": "MSTORE"
    },
    "6499": {
      "op": "SWAP13"
    },
    "6500": {
      "op": "SWAP12"
    },
    "6501": {
      "op": "POP"
    },
    "6502": {
      "op": "POP"
    },
    "6503": {
      "op": "POP"
    },
    "6504": {
      "op": "POP"
    },
    "6505": {
      "op": "POP"
    },
    "6506": {
      "op": "POP"
    },
    "6507": {
      "op": "POP"
    },
    "6508": {
      "op": "POP"
    },
    "6509": {
      "op": "POP"
    },
    "6510": {
      "op": "POP"
    },
    "6511": {
      "op": "POP"
    },
    "6512": {
      "op": "POP"
    },
    "6513": {
      "jump": "o",
      "op": "JUMP"
    },
    "6514": {
      "op": "JUMPDEST"
    },
    "6515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6517": {
      "op": "DUP1"
    },
    "6518": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6520": {
      "op": "DUP1"
    },
    "6521": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6523": {
      "op": "DUP6"
    },
    "6524": {
      "op": "DUP8"
    },
    "6525": {
      "op": "SUB"
    },
    "6526": {
      "op": "SLT"
    },
    "6527": {
      "op": "ISZERO"
    },
    "6528": {
      "op": "PUSH2",
      "value": "0x1988"
    },
    "6531": {
      "op": "JUMPI"
    },
    "6532": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6534": {
      "op": "DUP1"
    },
    "6535": {
      "op": "REVERT"
    },
    "6536": {
      "op": "JUMPDEST"
    },
    "6537": {
      "op": "PUSH2",
      "value": "0x1991"
    },
    "6540": {
      "op": "DUP6"
    },
    "6541": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6544": {
      "jump": "i",
      "op": "JUMP"
    },
    "6545": {
      "op": "JUMPDEST"
    },
    "6546": {
      "op": "SWAP4"
    },
    "6547": {
      "op": "POP"
    },
    "6548": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6550": {
      "op": "DUP6"
    },
    "6551": {
      "op": "ADD"
    },
    "6552": {
      "op": "CALLDATALOAD"
    },
    "6553": {
      "op": "SWAP3"
    },
    "6554": {
      "op": "POP"
    },
    "6555": {
      "op": "PUSH2",
      "value": "0x19A6"
    },
    "6558": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6560": {
      "op": "DUP7"
    },
    "6561": {
      "op": "ADD"
    },
    "6562": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6565": {
      "jump": "i",
      "op": "JUMP"
    },
    "6566": {
      "op": "JUMPDEST"
    },
    "6567": {
      "op": "SWAP4"
    },
    "6568": {
      "op": "SWAP7"
    },
    "6569": {
      "op": "SWAP3"
    },
    "6570": {
      "op": "SWAP6"
    },
    "6571": {
      "op": "POP"
    },
    "6572": {
      "op": "SWAP3"
    },
    "6573": {
      "op": "SWAP4"
    },
    "6574": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6576": {
      "op": "ADD"
    },
    "6577": {
      "op": "CALLDATALOAD"
    },
    "6578": {
      "op": "SWAP3"
    },
    "6579": {
      "op": "POP"
    },
    "6580": {
      "op": "POP"
    },
    "6581": {
      "jump": "o",
      "op": "JUMP"
    },
    "6582": {
      "op": "JUMPDEST"
    },
    "6583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6585": {
      "op": "DUP1"
    },
    "6586": {
      "op": "DUP4"
    },
    "6587": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6589": {
      "op": "DUP5"
    },
    "6590": {
      "op": "ADD"
    },
    "6591": {
      "op": "SLT"
    },
    "6592": {
      "op": "PUSH2",
      "value": "0x19C8"
    },
    "6595": {
      "op": "JUMPI"
    },
    "6596": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6598": {
      "op": "DUP1"
    },
    "6599": {
      "op": "REVERT"
    },
    "6600": {
      "op": "JUMPDEST"
    },
    "6601": {
      "op": "POP"
    },
    "6602": {
      "op": "DUP2"
    },
    "6603": {
      "op": "CALLDATALOAD"
    },
    "6604": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6613": {
      "op": "DUP2"
    },
    "6614": {
      "op": "GT"
    },
    "6615": {
      "op": "ISZERO"
    },
    "6616": {
      "op": "PUSH2",
      "value": "0x19E0"
    },
    "6619": {
      "op": "JUMPI"
    },
    "6620": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6622": {
      "op": "DUP1"
    },
    "6623": {
      "op": "REVERT"
    },
    "6624": {
      "op": "JUMPDEST"
    },
    "6625": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6627": {
      "op": "DUP4"
    },
    "6628": {
      "op": "ADD"
    },
    "6629": {
      "op": "SWAP2"
    },
    "6630": {
      "op": "POP"
    },
    "6631": {
      "op": "DUP4"
    },
    "6632": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6634": {
      "op": "DUP3"
    },
    "6635": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6637": {
      "op": "SHL"
    },
    "6638": {
      "op": "DUP6"
    },
    "6639": {
      "op": "ADD"
    },
    "6640": {
      "op": "ADD"
    },
    "6641": {
      "op": "GT"
    },
    "6642": {
      "op": "ISZERO"
    },
    "6643": {
      "op": "PUSH2",
      "value": "0x19FB"
    },
    "6646": {
      "op": "JUMPI"
    },
    "6647": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6649": {
      "op": "DUP1"
    },
    "6650": {
      "op": "REVERT"
    },
    "6651": {
      "op": "JUMPDEST"
    },
    "6652": {
      "op": "SWAP3"
    },
    "6653": {
      "op": "POP"
    },
    "6654": {
      "op": "SWAP3"
    },
    "6655": {
      "op": "SWAP1"
    },
    "6656": {
      "op": "POP"
    },
    "6657": {
      "jump": "o",
      "op": "JUMP"
    },
    "6658": {
      "op": "JUMPDEST"
    },
    "6659": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6661": {
      "op": "DUP1"
    },
    "6662": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6664": {
      "op": "DUP1"
    },
    "6665": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6667": {
      "op": "DUP1"
    },
    "6668": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6670": {
      "op": "DUP8"
    },
    "6671": {
      "op": "DUP10"
    },
    "6672": {
      "op": "SUB"
    },
    "6673": {
      "op": "SLT"
    },
    "6674": {
      "op": "ISZERO"
    },
    "6675": {
      "op": "PUSH2",
      "value": "0x1A1B"
    },
    "6678": {
      "op": "JUMPI"
    },
    "6679": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6681": {
      "op": "DUP1"
    },
    "6682": {
      "op": "REVERT"
    },
    "6683": {
      "op": "JUMPDEST"
    },
    "6684": {
      "op": "DUP7"
    },
    "6685": {
      "op": "CALLDATALOAD"
    },
    "6686": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6695": {
      "op": "DUP1"
    },
    "6696": {
      "op": "DUP3"
    },
    "6697": {
      "op": "GT"
    },
    "6698": {
      "op": "ISZERO"
    },
    "6699": {
      "op": "PUSH2",
      "value": "0x1A33"
    },
    "6702": {
      "op": "JUMPI"
    },
    "6703": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6705": {
      "op": "DUP1"
    },
    "6706": {
      "op": "REVERT"
    },
    "6707": {
      "op": "JUMPDEST"
    },
    "6708": {
      "op": "PUSH2",
      "value": "0x1A3F"
    },
    "6711": {
      "op": "DUP11"
    },
    "6712": {
      "op": "DUP4"
    },
    "6713": {
      "op": "DUP12"
    },
    "6714": {
      "op": "ADD"
    },
    "6715": {
      "op": "PUSH2",
      "value": "0x19B6"
    },
    "6718": {
      "jump": "i",
      "op": "JUMP"
    },
    "6719": {
      "op": "JUMPDEST"
    },
    "6720": {
      "op": "SWAP1"
    },
    "6721": {
      "op": "SWAP9"
    },
    "6722": {
      "op": "POP"
    },
    "6723": {
      "op": "SWAP7"
    },
    "6724": {
      "op": "POP"
    },
    "6725": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6727": {
      "op": "DUP10"
    },
    "6728": {
      "op": "ADD"
    },
    "6729": {
      "op": "CALLDATALOAD"
    },
    "6730": {
      "op": "SWAP2"
    },
    "6731": {
      "op": "POP"
    },
    "6732": {
      "op": "DUP1"
    },
    "6733": {
      "op": "DUP3"
    },
    "6734": {
      "op": "GT"
    },
    "6735": {
      "op": "ISZERO"
    },
    "6736": {
      "op": "PUSH2",
      "value": "0x1A58"
    },
    "6739": {
      "op": "JUMPI"
    },
    "6740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6742": {
      "op": "DUP1"
    },
    "6743": {
      "op": "REVERT"
    },
    "6744": {
      "op": "JUMPDEST"
    },
    "6745": {
      "op": "PUSH2",
      "value": "0x1A64"
    },
    "6748": {
      "op": "DUP11"
    },
    "6749": {
      "op": "DUP4"
    },
    "6750": {
      "op": "DUP12"
    },
    "6751": {
      "op": "ADD"
    },
    "6752": {
      "op": "PUSH2",
      "value": "0x19B6"
    },
    "6755": {
      "jump": "i",
      "op": "JUMP"
    },
    "6756": {
      "op": "JUMPDEST"
    },
    "6757": {
      "op": "SWAP1"
    },
    "6758": {
      "op": "SWAP7"
    },
    "6759": {
      "op": "POP"
    },
    "6760": {
      "op": "SWAP5"
    },
    "6761": {
      "op": "POP"
    },
    "6762": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6764": {
      "op": "DUP10"
    },
    "6765": {
      "op": "ADD"
    },
    "6766": {
      "op": "CALLDATALOAD"
    },
    "6767": {
      "op": "SWAP2"
    },
    "6768": {
      "op": "POP"
    },
    "6769": {
      "op": "DUP1"
    },
    "6770": {
      "op": "DUP3"
    },
    "6771": {
      "op": "GT"
    },
    "6772": {
      "op": "ISZERO"
    },
    "6773": {
      "op": "PUSH2",
      "value": "0x1A7D"
    },
    "6776": {
      "op": "JUMPI"
    },
    "6777": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6779": {
      "op": "DUP1"
    },
    "6780": {
      "op": "REVERT"
    },
    "6781": {
      "op": "JUMPDEST"
    },
    "6782": {
      "op": "POP"
    },
    "6783": {
      "op": "PUSH2",
      "value": "0x1A8A"
    },
    "6786": {
      "op": "DUP10"
    },
    "6787": {
      "op": "DUP3"
    },
    "6788": {
      "op": "DUP11"
    },
    "6789": {
      "op": "ADD"
    },
    "6790": {
      "op": "PUSH2",
      "value": "0x19B6"
    },
    "6793": {
      "jump": "i",
      "op": "JUMP"
    },
    "6794": {
      "op": "JUMPDEST"
    },
    "6795": {
      "op": "SWAP8"
    },
    "6796": {
      "op": "SWAP11"
    },
    "6797": {
      "op": "SWAP7"
    },
    "6798": {
      "op": "SWAP10"
    },
    "6799": {
      "op": "POP"
    },
    "6800": {
      "op": "SWAP5"
    },
    "6801": {
      "op": "SWAP8"
    },
    "6802": {
      "op": "POP"
    },
    "6803": {
      "op": "SWAP3"
    },
    "6804": {
      "op": "SWAP6"
    },
    "6805": {
      "op": "SWAP4"
    },
    "6806": {
      "op": "SWAP5"
    },
    "6807": {
      "op": "SWAP3"
    },
    "6808": {
      "op": "POP"
    },
    "6809": {
      "op": "POP"
    },
    "6810": {
      "op": "POP"
    },
    "6811": {
      "jump": "o",
      "op": "JUMP"
    },
    "6812": {
      "op": "JUMPDEST"
    },
    "6813": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6815": {
      "op": "DUP1"
    },
    "6816": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6818": {
      "op": "DUP4"
    },
    "6819": {
      "op": "DUP6"
    },
    "6820": {
      "op": "SUB"
    },
    "6821": {
      "op": "SLT"
    },
    "6822": {
      "op": "ISZERO"
    },
    "6823": {
      "op": "PUSH2",
      "value": "0x1AAF"
    },
    "6826": {
      "op": "JUMPI"
    },
    "6827": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6829": {
      "op": "DUP1"
    },
    "6830": {
      "op": "REVERT"
    },
    "6831": {
      "op": "JUMPDEST"
    },
    "6832": {
      "op": "PUSH2",
      "value": "0x1AB8"
    },
    "6835": {
      "op": "DUP4"
    },
    "6836": {
      "op": "PUSH2",
      "value": "0x17CB"
    },
    "6839": {
      "jump": "i",
      "op": "JUMP"
    },
    "6840": {
      "op": "JUMPDEST"
    },
    "6841": {
      "op": "SWAP5"
    },
    "6842": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6844": {
      "op": "SWAP4"
    },
    "6845": {
      "op": "SWAP1"
    },
    "6846": {
      "op": "SWAP4"
    },
    "6847": {
      "op": "ADD"
    },
    "6848": {
      "op": "CALLDATALOAD"
    },
    "6849": {
      "op": "SWAP4"
    },
    "6850": {
      "op": "POP"
    },
    "6851": {
      "op": "POP"
    },
    "6852": {
      "op": "POP"
    },
    "6853": {
      "jump": "o",
      "op": "JUMP"
    },
    "6854": {
      "op": "JUMPDEST"
    },
    "6855": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6857": {
      "op": "DUP1"
    },
    "6858": {
      "op": "DUP3"
    },
    "6859": {
      "op": "MSTORE"
    },
    "6860": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6862": {
      "op": "SWAP1"
    },
    "6863": {
      "op": "DUP3"
    },
    "6864": {
      "op": "ADD"
    },
    "6865": {
      "op": "MSTORE"
    },
    "6866": {
      "op": "PUSH32",
      "value": "0x43616C6C6572206D7573742062652074686520576F726B4C6F636B20636F6E74"
    },
    "6899": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6901": {
      "op": "DUP3"
    },
    "6902": {
      "op": "ADD"
    },
    "6903": {
      "op": "MSTORE"
    },
    "6904": {
      "op": "PUSH4",
      "value": "0x1C9858DD"
    },
    "6909": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "6911": {
      "op": "SHL"
    },
    "6912": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6914": {
      "op": "DUP3"
    },
    "6915": {
      "op": "ADD"
    },
    "6916": {
      "op": "MSTORE"
    },
    "6917": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6919": {
      "op": "ADD"
    },
    "6920": {
      "op": "SWAP1"
    },
    "6921": {
      "jump": "o",
      "op": "JUMP"
    },
    "6922": {
      "op": "JUMPDEST"
    },
    "6923": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6928": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6930": {
      "op": "SHL"
    },
    "6931": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6933": {
      "op": "MSTORE"
    },
    "6934": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "6936": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6938": {
      "op": "MSTORE"
    },
    "6939": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6941": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6943": {
      "op": "REVERT"
    },
    "6944": {
      "op": "JUMPDEST"
    },
    "6945": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6947": {
      "op": "DUP3"
    },
    "6948": {
      "op": "NOT"
    },
    "6949": {
      "op": "DUP3"
    },
    "6950": {
      "op": "GT"
    },
    "6951": {
      "op": "ISZERO"
    },
    "6952": {
      "op": "PUSH2",
      "value": "0x1B33"
    },
    "6955": {
      "op": "JUMPI"
    },
    "6956": {
      "op": "PUSH2",
      "value": "0x1B33"
    },
    "6959": {
      "op": "PUSH2",
      "value": "0x1B0A"
    },
    "6962": {
      "jump": "i",
      "op": "JUMP"
    },
    "6963": {
      "op": "JUMPDEST"
    },
    "6964": {
      "op": "POP"
    },
    "6965": {
      "op": "ADD"
    },
    "6966": {
      "op": "SWAP1"
    },
    "6967": {
      "jump": "o",
      "op": "JUMP"
    },
    "6968": {
      "op": "JUMPDEST"
    },
    "6969": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6971": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6973": {
      "op": "DUP3"
    },
    "6974": {
      "op": "DUP5"
    },
    "6975": {
      "op": "SUB"
    },
    "6976": {
      "op": "SLT"
    },
    "6977": {
      "op": "ISZERO"
    },
    "6978": {
      "op": "PUSH2",
      "value": "0x1B4A"
    },
    "6981": {
      "op": "JUMPI"
    },
    "6982": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6984": {
      "op": "DUP1"
    },
    "6985": {
      "op": "REVERT"
    },
    "6986": {
      "op": "JUMPDEST"
    },
    "6987": {
      "op": "POP"
    },
    "6988": {
      "op": "MLOAD"
    },
    "6989": {
      "op": "SWAP2"
    },
    "6990": {
      "op": "SWAP1"
    },
    "6991": {
      "op": "POP"
    },
    "6992": {
      "jump": "o",
      "op": "JUMP"
    },
    "6993": {
      "op": "JUMPDEST"
    },
    "6994": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6996": {
      "op": "DUP3"
    },
    "6997": {
      "op": "DUP3"
    },
    "6998": {
      "op": "LT"
    },
    "6999": {
      "op": "ISZERO"
    },
    "7000": {
      "op": "PUSH2",
      "value": "0x1B63"
    },
    "7003": {
      "op": "JUMPI"
    },
    "7004": {
      "op": "PUSH2",
      "value": "0x1B63"
    },
    "7007": {
      "op": "PUSH2",
      "value": "0x1B0A"
    },
    "7010": {
      "jump": "i",
      "op": "JUMP"
    },
    "7011": {
      "op": "JUMPDEST"
    },
    "7012": {
      "op": "POP"
    },
    "7013": {
      "op": "SUB"
    },
    "7014": {
      "op": "SWAP1"
    },
    "7015": {
      "jump": "o",
      "op": "JUMP"
    },
    "7016": {
      "op": "JUMPDEST"
    },
    "7017": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7019": {
      "op": "DUP1"
    },
    "7020": {
      "op": "DUP3"
    },
    "7021": {
      "op": "MSTORE"
    },
    "7022": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "7024": {
      "op": "SWAP1"
    },
    "7025": {
      "op": "DUP3"
    },
    "7026": {
      "op": "ADD"
    },
    "7027": {
      "op": "MSTORE"
    },
    "7028": {
      "op": "PUSH32",
      "value": "0x43616C6C6572206D757374206265207468652054207374616B696E6720636F6E"
    },
    "7061": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7063": {
      "op": "DUP3"
    },
    "7064": {
      "op": "ADD"
    },
    "7065": {
      "op": "MSTORE"
    },
    "7066": {
      "op": "PUSH5",
      "value": "0x1D1C9858DD"
    },
    "7072": {
      "op": "PUSH1",
      "value": "0xDA"
    },
    "7074": {
      "op": "SHL"
    },
    "7075": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7077": {
      "op": "DUP3"
    },
    "7078": {
      "op": "ADD"
    },
    "7079": {
      "op": "MSTORE"
    },
    "7080": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7082": {
      "op": "ADD"
    },
    "7083": {
      "op": "SWAP1"
    },
    "7084": {
      "jump": "o",
      "op": "JUMP"
    },
    "7085": {
      "op": "JUMPDEST"
    },
    "7086": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "7091": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7093": {
      "op": "SHL"
    },
    "7094": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7096": {
      "op": "MSTORE"
    },
    "7097": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "7099": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "7101": {
      "op": "MSTORE"
    },
    "7102": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7104": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7106": {
      "op": "REVERT"
    },
    "7107": {
      "op": "JUMPDEST"
    },
    "7108": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7110": {
      "op": "DUP2"
    },
    "7111": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7113": {
      "op": "NOT"
    },
    "7114": {
      "op": "DIV"
    },
    "7115": {
      "op": "DUP4"
    },
    "7116": {
      "op": "GT"
    },
    "7117": {
      "op": "DUP3"
    },
    "7118": {
      "op": "ISZERO"
    },
    "7119": {
      "op": "ISZERO"
    },
    "7120": {
      "op": "AND"
    },
    "7121": {
      "op": "ISZERO"
    },
    "7122": {
      "op": "PUSH2",
      "value": "0x1BDD"
    },
    "7125": {
      "op": "JUMPI"
    },
    "7126": {
      "op": "PUSH2",
      "value": "0x1BDD"
    },
    "7129": {
      "op": "PUSH2",
      "value": "0x1B0A"
    },
    "7132": {
      "jump": "i",
      "op": "JUMP"
    },
    "7133": {
      "op": "JUMPDEST"
    },
    "7134": {
      "op": "POP"
    },
    "7135": {
      "op": "MUL"
    },
    "7136": {
      "op": "SWAP1"
    },
    "7137": {
      "jump": "o",
      "op": "JUMP"
    },
    "7138": {
      "op": "JUMPDEST"
    },
    "7139": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7141": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7143": {
      "op": "NOT"
    },
    "7144": {
      "op": "DUP3"
    },
    "7145": {
      "op": "EQ"
    },
    "7146": {
      "op": "ISZERO"
    },
    "7147": {
      "op": "PUSH2",
      "value": "0x1BF6"
    },
    "7150": {
      "op": "JUMPI"
    },
    "7151": {
      "op": "PUSH2",
      "value": "0x1BF6"
    },
    "7154": {
      "op": "PUSH2",
      "value": "0x1B0A"
    },
    "7157": {
      "jump": "i",
      "op": "JUMP"
    },
    "7158": {
      "op": "JUMPDEST"
    },
    "7159": {
      "op": "POP"
    },
    "7160": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7162": {
      "op": "ADD"
    },
    "7163": {
      "op": "SWAP1"
    },
    "7164": {
      "jump": "o",
      "op": "JUMP"
    },
    "7165": {
      "op": "JUMPDEST"
    },
    "7166": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7168": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7170": {
      "op": "DUP3"
    },
    "7171": {
      "op": "DUP5"
    },
    "7172": {
      "op": "SUB"
    },
    "7173": {
      "op": "SLT"
    },
    "7174": {
      "op": "ISZERO"
    },
    "7175": {
      "op": "PUSH2",
      "value": "0x1C0F"
    },
    "7178": {
      "op": "JUMPI"
    },
    "7179": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7181": {
      "op": "DUP1"
    },
    "7182": {
      "op": "REVERT"
    },
    "7183": {
      "op": "JUMPDEST"
    },
    "7184": {
      "op": "DUP2"
    },
    "7185": {
      "op": "MLOAD"
    },
    "7186": {
      "op": "PUSH2",
      "value": "0x1663"
    },
    "7189": {
      "op": "DUP2"
    },
    "7190": {
      "op": "PUSH2",
      "value": "0x1895"
    },
    "7193": {
      "jump": "i",
      "op": "JUMP"
    },
    "7194": {
      "op": "JUMPDEST"
    },
    "7195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7197": {
      "op": "JUMPDEST"
    },
    "7198": {
      "op": "DUP4"
    },
    "7199": {
      "op": "DUP2"
    },
    "7200": {
      "op": "LT"
    },
    "7201": {
      "op": "ISZERO"
    },
    "7202": {
      "op": "PUSH2",
      "value": "0x1C35"
    },
    "7205": {
      "op": "JUMPI"
    },
    "7206": {
      "op": "DUP2"
    },
    "7207": {
      "op": "DUP2"
    },
    "7208": {
      "op": "ADD"
    },
    "7209": {
      "op": "MLOAD"
    },
    "7210": {
      "op": "DUP4"
    },
    "7211": {
      "op": "DUP3"
    },
    "7212": {
      "op": "ADD"
    },
    "7213": {
      "op": "MSTORE"
    },
    "7214": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7216": {
      "op": "ADD"
    },
    "7217": {
      "op": "PUSH2",
      "value": "0x1C1D"
    },
    "7220": {
      "op": "JUMP"
    },
    "7221": {
      "op": "JUMPDEST"
    },
    "7222": {
      "op": "DUP4"
    },
    "7223": {
      "op": "DUP2"
    },
    "7224": {
      "op": "GT"
    },
    "7225": {
      "op": "ISZERO"
    },
    "7226": {
      "op": "PUSH2",
      "value": "0x133B"
    },
    "7229": {
      "op": "JUMPI"
    },
    "7230": {
      "op": "POP"
    },
    "7231": {
      "op": "POP"
    },
    "7232": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7234": {
      "op": "SWAP2"
    },
    "7235": {
      "op": "ADD"
    },
    "7236": {
      "op": "MSTORE"
    },
    "7237": {
      "jump": "o",
      "op": "JUMP"
    },
    "7238": {
      "op": "JUMPDEST"
    },
    "7239": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7241": {
      "op": "DUP3"
    },
    "7242": {
      "op": "MLOAD"
    },
    "7243": {
      "op": "PUSH2",
      "value": "0x1C58"
    },
    "7246": {
      "op": "DUP2"
    },
    "7247": {
      "op": "DUP5"
    },
    "7248": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7250": {
      "op": "DUP8"
    },
    "7251": {
      "op": "ADD"
    },
    "7252": {
      "op": "PUSH2",
      "value": "0x1C1A"
    },
    "7255": {
      "jump": "i",
      "op": "JUMP"
    },
    "7256": {
      "op": "JUMPDEST"
    },
    "7257": {
      "op": "SWAP2"
    },
    "7258": {
      "op": "SWAP1"
    },
    "7259": {
      "op": "SWAP2"
    },
    "7260": {
      "op": "ADD"
    },
    "7261": {
      "op": "SWAP3"
    },
    "7262": {
      "op": "SWAP2"
    },
    "7263": {
      "op": "POP"
    },
    "7264": {
      "op": "POP"
    },
    "7265": {
      "jump": "o",
      "op": "JUMP"
    },
    "7266": {
      "op": "JUMPDEST"
    },
    "7267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7269": {
      "op": "DUP2"
    },
    "7270": {
      "op": "MSTORE"
    },
    "7271": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7273": {
      "op": "DUP3"
    },
    "7274": {
      "op": "MLOAD"
    },
    "7275": {
      "op": "DUP1"
    },
    "7276": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7278": {
      "op": "DUP5"
    },
    "7279": {
      "op": "ADD"
    },
    "7280": {
      "op": "MSTORE"
    },
    "7281": {
      "op": "PUSH2",
      "value": "0x1C81"
    },
    "7284": {
      "op": "DUP2"
    },
    "7285": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7287": {
      "op": "DUP6"
    },
    "7288": {
      "op": "ADD"
    },
    "7289": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7291": {
      "op": "DUP8"
    },
    "7292": {
      "op": "ADD"
    },
    "7293": {
      "op": "PUSH2",
      "value": "0x1C1A"
    },
    "7296": {
      "jump": "i",
      "op": "JUMP"
    },
    "7297": {
      "op": "JUMPDEST"
    },
    "7298": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7300": {
      "op": "ADD"
    },
    "7301": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7303": {
      "op": "NOT"
    },
    "7304": {
      "op": "AND"
    },
    "7305": {
      "op": "SWAP2"
    },
    "7306": {
      "op": "SWAP1"
    },
    "7307": {
      "op": "SWAP2"
    },
    "7308": {
      "op": "ADD"
    },
    "7309": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7311": {
      "op": "ADD"
    },
    "7312": {
      "op": "SWAP3"
    },
    "7313": {
      "op": "SWAP2"
    },
    "7314": {
      "op": "POP"
    },
    "7315": {
      "op": "POP"
    },
    "7316": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "cf8119b852649da8e0a17c76c6cf6dac02a4106d",
  "source": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\n\nimport \"../aragon/interfaces/IERC900History.sol\";\nimport \"./NuCypherToken.sol\";\nimport \"./lib/Bits.sol\";\nimport \"./proxy/Upgradeable.sol\";\nimport \"../zeppelin/math/Math.sol\";\nimport \"../zeppelin/token/ERC20/SafeERC20.sol\";\nimport \"../threshold/IStaking.sol\";\n\n\n/**\n* @notice WorkLock interface\n*/\ninterface WorkLockInterface {\n    function token() external view returns (NuCypherToken);\n}\n\n\n/**\n* @title StakingEscrowStub\n* @notice Stub is used to deploy main StakingEscrow after all other contract and make some variables immutable\n* @dev |v1.1.0|\n*/\ncontract StakingEscrowStub is Upgradeable {\n    NuCypherToken public immutable token;\n    // only to deploy WorkLock\n    uint32 public immutable secondsPerPeriod = 1;\n    uint16 public immutable minLockedPeriods = 0;\n    uint256 public immutable minAllowableLockedTokens;\n    uint256 public immutable maxAllowableLockedTokens;\n\n    /**\n    * @notice Predefines some variables for use when deploying other contracts\n    * @param _token Token contract\n    * @param _minAllowableLockedTokens Min amount of tokens that can be locked\n    * @param _maxAllowableLockedTokens Max amount of tokens that can be locked\n    */\n    constructor(\n        NuCypherToken _token,\n        uint256 _minAllowableLockedTokens,\n        uint256 _maxAllowableLockedTokens\n    ) {\n        require(_token.totalSupply() > 0 &&\n            _maxAllowableLockedTokens != 0);\n\n        token = _token;\n        minAllowableLockedTokens = _minAllowableLockedTokens;\n        maxAllowableLockedTokens = _maxAllowableLockedTokens;\n    }\n\n    /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`\n    function verifyState(address _testTarget) public override virtual {\n        super.verifyState(_testTarget);\n\n        // we have to use real values even though this is a stub\n        require(address(uint160(delegateGet(_testTarget, this.token.selector))) == address(token));\n    }\n}\n\n\n/**\n* @title StakingEscrow\n* @notice Contract holds and locks stakers tokens.\n* Each staker that locks their tokens will receive some compensation\n* @dev |v6.2.2|\n*/\ncontract StakingEscrow is Upgradeable, IERC900History {\n\n    using Bits for uint256;\n    using SafeERC20 for NuCypherToken;\n\n    /**\n    * @notice Signals that tokens were deposited\n    * @param staker Staker address\n    * @param value Amount deposited (in NuNits)\n    */\n    event Deposited(address indexed staker, uint256 value);\n\n    /**\n    * @notice Signals that NU tokens were withdrawn to the staker\n    * @param staker Staker address\n    * @param value Amount withdraws (in NuNits)\n    */\n    event Withdrawn(address indexed staker, uint256 value);\n\n    /**\n    * @notice Signals that the staker was slashed\n    * @param staker Staker address\n    * @param penalty Slashing penalty\n    * @param investigator Investigator address\n    * @param reward Value of reward provided to investigator (in NuNits)\n    */\n    event Slashed(address indexed staker, uint256 penalty, address indexed investigator, uint256 reward);\n\n    /**\n    * @notice Signals that vesting parameters were set for the staker\n    * @param staker Staker address\n    * @param releaseTimestamp Release timestamp\n    * @param releaseRate Release rate\n    */\n    event VestingSet(address indexed staker, uint256 releaseTimestamp, uint256 releaseRate);\n\n    /**\n    * @notice Signals that the staker requested merge with T staking contract\n    * @param staker Staker address\n    * @param stakingProvider Staking provider address\n    */\n    event MergeRequested(address indexed staker, address indexed stakingProvider);\n\n    struct StakerInfo {\n        uint256 value;\n\n        uint16 stub1; // former slot for currentCommittedPeriod // TODO combine slots?\n        uint16 stub2; // former slot for nextCommittedPeriod\n        uint16 lastCommittedPeriod; // used only in depositFromWorkLock\n        uint16 stub4; // former slot for lockReStakeUntilPeriod\n        uint256 stub5; // former slot for completedWork\n        uint16 stub6; // former slot for workerStartPeriod\n        address stub7; // former slot for worker\n\n        uint256 flags; // uint256 to acquire whole slot and minimize operations on it\n\n        uint256 vestingReleaseTimestamp;\n        uint256 vestingReleaseRate;\n        address stakingProvider;\n\n        uint256 reservedSlot4;\n        uint256 reservedSlot5;\n\n        uint256[] stub8; // former slot for pastDowntime\n        uint256[] stub9; // former slot for subStakes\n        uint128[] stub10; // former slot for history\n\n    }\n\n    // indices for flags (0-4 were in use, skip it in future)\n//    uint8 internal constant SOME_FLAG_INDEX = 5;\n\n    NuCypherToken public immutable token;\n    WorkLockInterface public immutable workLock;\n    IStaking public immutable tStaking;\n\n    uint128 private stub1; // former slot for previousPeriodSupply\n    uint128 public currentPeriodSupply; // resulting token supply\n    uint16 private stub2; // former slot for currentMintingPeriod\n\n    mapping (address => StakerInfo) public stakerInfo;\n    address[] public stakers;\n    mapping (address => address) private stub3; // former slot for stakerFromWorker\n\n    mapping (uint16 => uint256) private stub4; // former slot for lockedPerPeriod\n    uint128[] private stub5;  // former slot for balanceHistory\n\n    address private stub6; // former slot for PolicyManager\n    address private stub7; // former slot for Adjudicator\n    address private stub8; // former slot for WorkLock\n\n    mapping (uint16 => uint256) private stub9; // last former slot for lockedPerPeriod\n\n    /**\n    * @notice Constructor sets address of token contract and parameters for staking\n    * @param _token NuCypher token contract\n    * @param _workLock WorkLock contract. Zero address if there is no WorkLock\n    * @param _tStaking T token staking contract\n    */\n    constructor(\n        NuCypherToken _token,\n        WorkLockInterface _workLock,\n        IStaking _tStaking\n    ) {\n        require(_token.totalSupply() > 0 &&\n            _tStaking.stakedNu(address(0)) == 0 &&\n            (address(_workLock) == address(0) || _workLock.token() == _token),\n            \"Input addresses must be deployed contracts\"\n        );\n\n        token = _token;\n        workLock = _workLock;\n        tStaking = _tStaking;\n    }\n\n    /**\n    * @dev Checks the existence of a staker in the contract\n    */\n    modifier onlyStaker()\n    {\n        require(stakerInfo[msg.sender].value > 0, \"Caller must be a staker\");\n        _;\n    }\n\n    /**\n    * @dev Checks caller is T staking contract\n    */\n    modifier onlyTStakingContract()\n    {\n        require(msg.sender == address(tStaking), \"Caller must be the T staking contract\");\n        _;\n    }\n\n    /**\n    * @dev Checks caller is WorkLock contract\n    */\n    modifier onlyWorkLock()\n    {\n        require(msg.sender == address(workLock), \"Caller must be the WorkLock contract\");\n        _;\n    }\n\n    //------------------------Main getters------------------------\n    /**\n    * @notice Get all tokens belonging to the staker\n    */\n    function getAllTokens(address _staker) external view returns (uint256) {\n        return stakerInfo[_staker].value;\n    }\n\n    /**\n    * @notice Get work that completed by the staker\n    */\n    function getCompletedWork(address _staker) external view returns (uint256) {\n        return token.totalSupply();\n    }\n\n\n    //------------------------Main methods------------------------\n    /**\n    * @notice Stub for WorkLock\n    * @param _staker Staker\n    * @param _measureWork Value for `measureWork` parameter\n    * @return Work that was previously done\n    */\n    function setWorkMeasurement(address _staker, bool _measureWork)\n        external onlyWorkLock returns (uint256)\n    {\n        return 0;\n    }\n\n    /**\n    * @notice Deposit tokens from WorkLock contract\n    * @param _staker Staker address\n    * @param _value Amount of tokens to deposit\n    * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled\n    */\n    function depositFromWorkLock(\n        address _staker,\n        uint256 _value,\n        uint16 _unlockingDuration\n    )\n        external onlyWorkLock\n    {\n        require(_value != 0, \"Amount of tokens to deposit must be specified\");\n        StakerInfo storage info = stakerInfo[_staker];\n        // initial stake of the staker\n        if (info.value == 0 && info.lastCommittedPeriod == 0) {\n            stakers.push(_staker);\n        }\n        token.safeTransferFrom(msg.sender, address(this), _value);\n        info.value += _value;\n\n        emit Deposited(_staker, _value);\n    }\n\n    /**\n    * @notice Withdraw available amount of NU tokens to staker\n    * @param _value Amount of tokens to withdraw\n    */\n    function withdraw(uint256 _value) external onlyStaker {\n        require(_value > 0, \"Value must be specified\");\n        StakerInfo storage info = stakerInfo[msg.sender];\n        require(\n            _value + tStaking.stakedNu(info.stakingProvider) <= info.value,\n            \"Not enough tokens unstaked in T staking contract\"\n        );\n        require(\n            _value + getUnvestedTokens(msg.sender) <= info.value,\n            \"Not enough tokens released during vesting\"\n        );\n        info.value -= _value;\n\n        token.safeTransfer(msg.sender, _value);\n        emit Withdrawn(msg.sender, _value);\n    }\n\n    /**\n    * @notice Returns amount of not released yet tokens for staker\n    */\n    function getUnvestedTokens(address _staker) public view returns (uint256) {\n        StakerInfo storage info = stakerInfo[_staker];\n        if (info.vestingReleaseTimestamp <= block.timestamp) {\n            return 0;\n        }\n        if (info.vestingReleaseRate == 0) {\n            // this value includes all not withdrawn reward\n            return info.value;\n        }\n        uint256 unvestedTokens = (info.vestingReleaseTimestamp - block.timestamp) * info.vestingReleaseRate;\n        return info.value < unvestedTokens ? info.value : unvestedTokens;\n    }\n\n    /**\n    * @notice Setup vesting parameters\n    * @param _stakers Array of stakers\n    * @param _releaseTimestamp Array of timestamps when stake will be released\n    * @param _releaseRate Array of release rates\n    * @dev If release rate is 0 then all value will be locked before release timestamp\n    */\n    function setupVesting(\n        address[] calldata _stakers,\n        uint256[] calldata _releaseTimestamp,\n        uint256[] calldata _releaseRate\n    ) external onlyOwner {\n        require(_stakers.length == _releaseTimestamp.length &&\n            _releaseTimestamp.length == _releaseRate.length,\n            \"Input arrays must have same number of elements\"\n        );\n        for (uint256 i = 0; i < _stakers.length; i++) {\n            address staker = _stakers[i];\n            StakerInfo storage info = stakerInfo[staker];\n            require(info.vestingReleaseTimestamp == 0, \"Vesting parameters can be set only once\");\n            info.vestingReleaseTimestamp = _releaseTimestamp[i];\n            info.vestingReleaseRate = _releaseRate[i];\n            require(getUnvestedTokens(staker) > 0, \"Vesting parameters must be set properly\");\n            emit VestingSet(staker, info.vestingReleaseTimestamp, info.vestingReleaseRate);\n        }\n    }\n\n    /**\n    * @notice Request migration to threshold network\n    * @param _staker Staker address\n    * @param _stakingProvider Staking provider address\n    * @return Amount of tokens\n    */\n    function requestMerge(address _staker, address _stakingProvider)\n        external onlyTStakingContract returns (uint256)\n    {\n        StakerInfo storage info = stakerInfo[_staker];\n        require(\n            info.stakingProvider == address(0) ||\n            info.stakingProvider == _stakingProvider ||\n            tStaking.stakedNu(info.stakingProvider) == 0,\n            \"Staking provider already set for the staker\"\n        );\n        if (info.stakingProvider != _stakingProvider) {\n            info.stakingProvider = _stakingProvider;\n            emit MergeRequested(_staker, _stakingProvider);\n        }\n        return info.value;\n    }\n\n    //-------------------------Slashing-------------------------\n    /**\n    * @notice Slash the staker's stake and reward the investigator\n    * @param _staker Staker's address\n    * @param _penalty Penalty\n    * @param _investigator Investigator\n    * @param _reward Reward for the investigator\n    */\n    function slashStaker(\n        address _staker,\n        uint256 _penalty,\n        address _investigator,\n        uint256 _reward\n    )\n        external onlyTStakingContract\n    {\n        require(_penalty > 0, \"Penalty must be specified\");\n        StakerInfo storage info = stakerInfo[_staker];\n        if (info.value <= _penalty) {\n            _penalty = info.value;\n        }\n        info.value -= _penalty;\n        if (_reward > _penalty) {\n            _reward = _penalty;\n        }\n\n        emit Slashed(_staker, _penalty, _investigator, _reward);\n        if (_reward > 0) {\n            token.safeTransfer(_investigator, _reward);\n        }\n    }\n\n    //-------------Additional getters for stakers info-------------\n    /**\n    * @notice Return the length of the array of stakers\n    */\n    function getStakersLength() external view virtual returns (uint256) {\n        return stakers.length;\n    }\n\n    //------------------ ERC900 connectors ----------------------\n\n    function totalStakedForAt(address _owner, uint256 _blockNumber) public view override returns (uint256) {\n        return 0;\n    }\n\n    function totalStakedAt(uint256 _blockNumber) public view override returns (uint256) {\n        return token.totalSupply();\n    }\n\n    function supportsHistory() external pure override returns (bool) {\n        return true;\n    }\n\n    //------------------------Upgradeable------------------------\n    /**\n    * @dev Get StakerInfo structure by delegatecall\n    */\n    function delegateGetStakerInfo(address _target, bytes32 _staker)\n        internal returns (StakerInfo memory result)\n    {\n        bytes32 memoryAddress = delegateGetData(_target, this.stakerInfo.selector, 1, _staker, 0);\n        assembly {\n            result := memoryAddress\n        }\n    }\n\n    /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState`\n    function verifyState(address _testTarget) public override virtual {\n        super.verifyState(_testTarget);\n\n        require(delegateGet(_testTarget, this.getStakersLength.selector) == stakers.length);\n        if (stakers.length == 0) {\n            return;\n        }\n        address stakerAddress = stakers[0];\n        require(address(uint160(delegateGet(_testTarget, this.stakers.selector, 0))) == stakerAddress);\n        StakerInfo storage info = stakerInfo[stakerAddress];\n        bytes32 staker = bytes32(uint256(uint160(stakerAddress)));\n        StakerInfo memory infoToCheck = delegateGetStakerInfo(_testTarget, staker);\n        require(infoToCheck.value == info.value &&\n            infoToCheck.vestingReleaseTimestamp == info.vestingReleaseTimestamp &&\n            infoToCheck.vestingReleaseRate == info.vestingReleaseRate &&\n            infoToCheck.stakingProvider == info.stakingProvider &&\n            infoToCheck.flags == info.flags\n        );\n    }\n\n}\n",
  "sourceMap": "2175:13114:14:-:0;;;5893:447;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;549:6:34;:19;;-1:-1:-1;;;;;;549:19:34;558:10;549:19;;;;;583:40;;558:10;;549:6;583:40;;549:6;;583:40;6047:1:14;6024:6;-1:-1:-1;;;;;6024:18:14;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:24;:75;;;;-1:-1:-1;6064:30:14;;-1:-1:-1;;;6064:30:14;;6091:1;6064:30;;;1134:51:41;-1:-1:-1;;;;;6064:18:14;;;;;1107::41;;6064:30:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:35;6024:75;:156;;;;-1:-1:-1;;;;;;6116:32:14;;;;:63;;;6173:6;-1:-1:-1;;;;;6152:27:14;:9;-1:-1:-1;;;;;6152:15:14;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;6152:27:14;;6116:63;6016:232;;;;-1:-1:-1;;;6016:232:14;;1690:2:41;6016:232:14;;;1672:21:41;1729:2;1709:18;;;1702:30;1768:34;1748:18;;;1741:62;-1:-1:-1;;;1819:18:41;;;1812:40;1869:19;;6016:232:14;;;;;;;;-1:-1:-1;;;;;6259:14:14;;;;;6283:20;;;;;6313;;;2175:13114;;14:146:41;-1:-1:-1;;;;;104:31:41;;94:42;;84:70;;150:1;147;140:12;84:70;14:146;:::o;165:629::-;318:6;326;334;387:2;375:9;366:7;362:23;358:32;355:52;;;403:1;400;393:12;355:52;435:9;429:16;454:46;494:5;454:46;:::i;:::-;569:2;554:18;;548:25;519:5;;-1:-1:-1;582:48:41;548:25;582:48;:::i;:::-;701:2;686:18;;680:25;649:7;;-1:-1:-1;714:48:41;680:25;714:48;:::i;:::-;781:7;771:17;;;165:629;;;;;:::o;799:184::-;869:6;922:2;910:9;901:7;897:23;893:32;890:52;;;938:1;935;928:12;890:52;-1:-1:-1;961:16:41;;799:184;-1:-1:-1;799:184:41:o;1196:287::-;1287:6;1340:2;1328:9;1319:7;1315:23;1311:32;1308:52;;;1356:1;1353;1346:12;1308:52;1388:9;1382:16;1407:46;1447:5;1407:46;:::i;:::-;1472:5;1196:287;-1:-1:-1;;;1196:287:41:o;1488:406::-;2175:13114:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/contracts/StakingEscrow.sol",
  "type": "contract"
}