{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "approveApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "approveAuthorizationDecrease",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "authorizedStake",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "disableApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "forceDecreaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApplicationsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "getAvailableToAuthorize",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "enum IStaking.StakeType",
          "name": "stakeTypes",
          "type": "uint8"
        }
      ],
      "name": "getMinStaked",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlashingQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "getStartStakingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "increaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyKeepStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyNuStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "pauseApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "processSlashing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "pushNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "refreshKeepStakeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "rolesOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultipier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "notifier",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "setAuthorizationCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "setMinimumStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "setNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "name": "setPanicButton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "penalty",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setStakeDiscrepancyPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "name": "stakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakedNu",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "tStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "keepInTStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "nuInTStake",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "withdrawNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "31": "contracts/threshold/IStaking.sol"
  },
  "ast": {
    "absolutePath": "contracts/threshold/IStaking.sol",
    "exportedSymbols": {
      "IStaking": [
        13145
      ]
    },
    "id": 13146,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12826,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "975:23:31"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IStaking",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 12827,
          "nodeType": "StructuredDocumentation",
          "src": "1000:509:31",
          "text": "@title Interface of Threshold Network staking contract\n @notice The staking contract enables T owners to have their wallets offline\n         and their stake managed by providers on their behalf. All off-chain\n         client software should be able to run without exposing provider\u2019s\n         private key and should not require any owner\u2019s keys at all.\n         The stake delegation optimizes the network throughput without\n         compromising the security of the owners\u2019 stake."
        },
        "fullyImplemented": false,
        "id": 13145,
        "linearizedBaseContracts": [
          13145
        ],
        "name": "IStaking",
        "nameLocation": "1519:8:31",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IStaking.StakeType",
            "id": 12831,
            "members": [
              {
                "id": 12828,
                "name": "NU",
                "nameLocation": "1559:2:31",
                "nodeType": "EnumValue",
                "src": "1559:2:31"
              },
              {
                "id": 12829,
                "name": "KEEP",
                "nameLocation": "1571:4:31",
                "nodeType": "EnumValue",
                "src": "1571:4:31"
              },
              {
                "id": 12830,
                "name": "T",
                "nameLocation": "1585:1:31",
                "nodeType": "EnumValue",
                "src": "1585:1:31"
              }
            ],
            "name": "StakeType",
            "nameLocation": "1539:9:31",
            "nodeType": "EnumDefinition",
            "src": "1534:58:31"
          },
          {
            "documentation": {
              "id": 12832,
              "nodeType": "StructuredDocumentation",
              "src": "1653:324:31",
              "text": "@notice Creates a delegation with `msg.sender` owner with the given\n         provider, beneficiary, and authorizer. Transfers the given\n         amount of T to the staking contract.\n @dev The owner of the delegation needs to have the amount approved to\n      transfer to the staking contract."
            },
            "functionSelector": "5961d5e9",
            "id": 12843,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stake",
            "nameLocation": "1991:5:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12834,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "2014:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12843,
                  "src": "2006:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12833,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2006:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12836,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "2055:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12843,
                  "src": "2039:27:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2039:15:31",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12838,
                  "mutability": "mutable",
                  "name": "authorizer",
                  "nameLocation": "2084:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12843,
                  "src": "2076:18:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12837,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2076:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12840,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2111:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12843,
                  "src": "2104:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12839,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "2104:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1996:127:31"
            },
            "returnParameters": {
              "id": 12842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2132:0:31"
            },
            "scope": 13145,
            "src": "1982:151:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12844,
              "nodeType": "StructuredDocumentation",
              "src": "2139:249:31",
              "text": "@notice Copies delegation from the legacy KEEP staking contract to T\n         staking contract. No tokens are transferred. Caches the active\n         stake amount from KEEP staking contract. Can be called by\n         anyone."
            },
            "functionSelector": "570ea461",
            "id": 12849,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stakeKeep",
            "nameLocation": "2402:9:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12847,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12846,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "2420:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12849,
                  "src": "2412:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12845,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2412:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2411:25:31"
            },
            "returnParameters": {
              "id": 12848,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2445:0:31"
            },
            "scope": 13145,
            "src": "2393:53:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12850,
              "nodeType": "StructuredDocumentation",
              "src": "2452:296:31",
              "text": "@notice Copies delegation from the legacy NU staking contract to T\n         staking contract, additionally appointing beneficiary and\n         authorizer roles. Caches the amount staked in NU staking\n         contract. Can be called only by the original delegation owner."
            },
            "functionSelector": "81b0a0ce",
            "id": 12859,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stakeNu",
            "nameLocation": "2762:7:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12852,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "2787:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12859,
                  "src": "2779:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12851,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2779:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12854,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "2828:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12859,
                  "src": "2812:27:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12853,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2812:15:31",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12856,
                  "mutability": "mutable",
                  "name": "authorizer",
                  "nameLocation": "2857:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12859,
                  "src": "2849:18:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2849:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2769:104:31"
            },
            "returnParameters": {
              "id": 12858,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2882:0:31"
            },
            "scope": 13145,
            "src": "2753:130:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12860,
              "nodeType": "StructuredDocumentation",
              "src": "2889:74:31",
              "text": "@notice Refresh Keep stake owner. Can be called only by the old owner."
            },
            "functionSelector": "af5f24ad",
            "id": 12865,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refreshKeepStakeOwner",
            "nameLocation": "2977:21:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12862,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "3007:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12865,
                  "src": "2999:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12861,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2999:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2998:25:31"
            },
            "returnParameters": {
              "id": 12864,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3032:0:31"
            },
            "scope": 13145,
            "src": "2968:65:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12866,
              "nodeType": "StructuredDocumentation",
              "src": "3039:283:31",
              "text": "@notice Allows the Governance to set the minimum required stake amount.\n         This amount is required to protect against griefing the staking\n         contract and individual applications are allowed to require\n         higher minimum stakes if necessary."
            },
            "functionSelector": "6d08f5b0",
            "id": 12871,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMinimumStakeAmount",
            "nameLocation": "3336:21:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12869,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12868,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3365:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12871,
                  "src": "3358:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12867,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "3358:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3357:15:31"
            },
            "returnParameters": {
              "id": 12870,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3381:0:31"
            },
            "scope": 13145,
            "src": "3327:55:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12872,
              "nodeType": "StructuredDocumentation",
              "src": "3451:149:31",
              "text": "@notice Allows the Governance to approve the particular application\n         before individual stake authorizers are able to authorize it."
            },
            "functionSelector": "e3ae4d0a",
            "id": 12877,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approveApplication",
            "nameLocation": "3614:18:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12875,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12874,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "3641:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12877,
                  "src": "3633:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12873,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3633:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3632:21:31"
            },
            "returnParameters": {
              "id": 12876,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3662:0:31"
            },
            "scope": 13145,
            "src": "3605:58:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12878,
              "nodeType": "StructuredDocumentation",
              "src": "3669:407:31",
              "text": "@notice Increases the authorization of the given provider for the given\n         application by the given amount. Can only be called by the given\n         provider\u2019s authorizer.\n @dev Calls `authorizationIncreased(address stakingProvider, uint256 amount)`\n      on the given application to notify the application about\n      authorization change. See `IApplication`."
            },
            "functionSelector": "f848beff",
            "id": 12887,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAuthorization",
            "nameLocation": "4090:21:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12885,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12880,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "4129:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12887,
                  "src": "4121:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12879,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4121:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12882,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "4162:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12887,
                  "src": "4154:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4154:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12884,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4190:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12887,
                  "src": "4183:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12883,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "4183:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4111:91:31"
            },
            "returnParameters": {
              "id": 12886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4211:0:31"
            },
            "scope": 13145,
            "src": "4081:131:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12888,
              "nodeType": "StructuredDocumentation",
              "src": "4218:591:31",
              "text": "@notice Requests decrease of the authorization for the given provider on\n         the given application by the provided amount.\n         It may not change the authorized amount immediatelly. When\n         it happens depends on the application. Can only be called by the\n         given provider\u2019s authorizer. Overwrites pending authorization\n         decrease for the given provider and application.\n @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\n      on the given application. See `IApplication`."
            },
            "functionSelector": "5f2d5030",
            "id": 12897,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestAuthorizationDecrease",
            "nameLocation": "4823:28:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12890,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "4869:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12897,
                  "src": "4861:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12889,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4861:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12892,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "4902:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12897,
                  "src": "4894:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12891,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4894:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12894,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4930:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12897,
                  "src": "4923:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12893,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "4923:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4851:91:31"
            },
            "returnParameters": {
              "id": 12896,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4951:0:31"
            },
            "scope": 13145,
            "src": "4814:138:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12898,
              "nodeType": "StructuredDocumentation",
              "src": "4958:596:31",
              "text": "@notice Requests decrease of all authorizations for the given provider on\n         the applications by all authorized amount.\n         It may not change the authorized amount immediatelly. When\n         it happens depends on the application. Can only be called by the\n         given provider\u2019s authorizer. Overwrites pending authorization\n         decrease for the given provider and application.\n @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\n      for each authorized application. See `IApplication`."
            },
            "functionSelector": "86d18a25",
            "id": 12903,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestAuthorizationDecrease",
            "nameLocation": "5568:28:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12900,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "5605:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12903,
                  "src": "5597:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12899,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5597:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5596:25:31"
            },
            "returnParameters": {
              "id": 12902,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5630:0:31"
            },
            "scope": 13145,
            "src": "5559:72:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12904,
              "nodeType": "StructuredDocumentation",
              "src": "5637:361:31",
              "text": "@notice Called by the application at its discretion to approve the\n         previously requested authorization decrease request. Can only be\n         called by the application that was previously requested to\n         decrease the authorization for that provider.\n         Returns resulting authorized amount for the application."
            },
            "functionSelector": "75e0ae5a",
            "id": 12911,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approveAuthorizationDecrease",
            "nameLocation": "6012:28:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12906,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "6049:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12911,
                  "src": "6041:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12905,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6041:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6040:25:31"
            },
            "returnParameters": {
              "id": 12910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12909,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12911,
                  "src": "6100:6:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12908,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "6100:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6099:8:31"
            },
            "scope": 13145,
            "src": "6003:105:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12912,
              "nodeType": "StructuredDocumentation",
              "src": "6114:192:31",
              "text": "@notice Decreases the authorization for the given `stakingProvider` on\n         the given disabled `application`, for all authorized amount.\n         Can be called by anyone."
            },
            "functionSelector": "b626ca3e",
            "id": 12919,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "forceDecreaseAuthorization",
            "nameLocation": "6320:26:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12914,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "6364:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12919,
                  "src": "6356:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6356:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12916,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "6397:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12919,
                  "src": "6389:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12915,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6389:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6346:68:31"
            },
            "returnParameters": {
              "id": 12918,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6423:0:31"
            },
            "scope": 13145,
            "src": "6311:113:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12920,
              "nodeType": "StructuredDocumentation",
              "src": "6430:462:31",
              "text": "@notice Pauses the given application\u2019s eligibility to slash stakes.\n         Besides that stakers can't change authorization to the application.\n         Can be called only by the Panic Button of the particular\n         application. The paused application can not slash stakes until\n         it is approved again by the Governance using `approveApplication`\n         function. Should be used only in case of an emergency."
            },
            "functionSelector": "2c686ca0",
            "id": 12925,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pauseApplication",
            "nameLocation": "6906:16:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12922,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "6931:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12925,
                  "src": "6923:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12921,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6923:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6922:21:31"
            },
            "returnParameters": {
              "id": 12924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6952:0:31"
            },
            "scope": 13145,
            "src": "6897:56:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12926,
              "nodeType": "StructuredDocumentation",
              "src": "6959:454:31",
              "text": "@notice Disables the given application. The disabled application can't\n         slash stakers. Also stakers can't increase authorization to that\n         application but can decrease without waiting by calling\n         `requestAuthorizationDecrease` at any moment. Can be called only\n         by the governance. The disabled application can't be approved\n         again. Should be used only in case of an emergency."
            },
            "functionSelector": "43445748",
            "id": 12931,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "disableApplication",
            "nameLocation": "7427:18:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12929,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12928,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "7454:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "7446:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12927,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7446:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7445:21:31"
            },
            "returnParameters": {
              "id": 12930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7475:0:31"
            },
            "scope": 13145,
            "src": "7418:58:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12932,
              "nodeType": "StructuredDocumentation",
              "src": "7482:288:31",
              "text": "@notice Sets the Panic Button role for the given application to the\n         provided address. Can only be called by the Governance. If the\n         Panic Button for the given application should be disabled, the\n         role address should be set to 0x0 address."
            },
            "functionSelector": "1d5270d3",
            "id": 12939,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPanicButton",
            "nameLocation": "7784:14:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12934,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "7807:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12939,
                  "src": "7799:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12933,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7799:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12936,
                  "mutability": "mutable",
                  "name": "panicButton",
                  "nameLocation": "7828:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12939,
                  "src": "7820:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12935,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7820:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7798:42:31"
            },
            "returnParameters": {
              "id": 12938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7849:0:31"
            },
            "scope": 13145,
            "src": "7775:75:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12940,
              "nodeType": "StructuredDocumentation",
              "src": "7856:196:31",
              "text": "@notice Sets the maximum number of applications one provider can\n         authorize. Used to protect against DoSing slashing queue.\n         Can only be called by the Governance."
            },
            "functionSelector": "b1958150",
            "id": 12945,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAuthorizationCeiling",
            "nameLocation": "8066:23:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12942,
                  "mutability": "mutable",
                  "name": "ceiling",
                  "nameLocation": "8098:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "8090:15:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8090:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8089:17:31"
            },
            "returnParameters": {
              "id": 12944,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8115:0:31"
            },
            "scope": 13145,
            "src": "8057:59:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12946,
              "nodeType": "StructuredDocumentation",
              "src": "8171:258:31",
              "text": "@notice Increases the amount of the stake for the given provider.\n         Can be called only by the owner or provider.\n @dev The sender of this transaction needs to have the amount approved to\n      transfer to the staking contract."
            },
            "functionSelector": "28c8c55f",
            "id": 12953,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "topUp",
            "nameLocation": "8443:5:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12948,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "8457:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12953,
                  "src": "8449:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12947,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8449:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12950,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8481:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12953,
                  "src": "8474:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12949,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "8474:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8448:40:31"
            },
            "returnParameters": {
              "id": 12952,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8497:0:31"
            },
            "scope": 13145,
            "src": "8434:64:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12954,
              "nodeType": "StructuredDocumentation",
              "src": "8504:191:31",
              "text": "@notice Propagates information about stake top-up from the legacy KEEP\n         staking contract to T staking contract. Can be called only by\n         the owner or provider."
            },
            "functionSelector": "ef47bf40",
            "id": 12959,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "topUpKeep",
            "nameLocation": "8709:9:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12956,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "8727:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12959,
                  "src": "8719:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12955,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8719:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8718:25:31"
            },
            "returnParameters": {
              "id": 12958,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8752:0:31"
            },
            "scope": 13145,
            "src": "8700:53:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12960,
              "nodeType": "StructuredDocumentation",
              "src": "8759:189:31",
              "text": "@notice Propagates information about stake top-up from the legacy NU\n         staking contract to T staking contract. Can be called only by\n         the owner or provider."
            },
            "functionSelector": "56f958ee",
            "id": 12965,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "topUpNu",
            "nameLocation": "8962:7:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12962,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "8978:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12965,
                  "src": "8970:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12961,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8970:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8969:25:31"
            },
            "returnParameters": {
              "id": 12964,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9003:0:31"
            },
            "scope": 13145,
            "src": "8953:51:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12966,
              "nodeType": "StructuredDocumentation",
              "src": "9079:406:31",
              "text": "@notice Reduces the liquid T stake amount by the provided amount and\n         withdraws T to the owner. Reverts if there is at least one\n         authorization higher than the sum of the legacy stake and\n         remaining liquid T stake or if the unstake amount is higher than\n         the liquid T stake amount. Can be called only by the owner or\n         provider."
            },
            "functionSelector": "d3ecb6cd",
            "id": 12973,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unstakeT",
            "nameLocation": "9499:8:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12968,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "9516:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12973,
                  "src": "9508:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12967,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9508:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12970,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "9540:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12973,
                  "src": "9533:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12969,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "9533:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9507:40:31"
            },
            "returnParameters": {
              "id": 12972,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9556:0:31"
            },
            "scope": 13145,
            "src": "9490:67:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12974,
              "nodeType": "StructuredDocumentation",
              "src": "9563:527:31",
              "text": "@notice Sets the legacy KEEP staking contract active stake amount cached\n         in T staking contract to 0. Reverts if the amount of liquid T\n         staked in T staking contract is lower than the highest\n         application authorization. This function allows to unstake from\n         KEEP staking contract and still being able to operate in T\n         network and earning rewards based on the liquid T staked. Can be\n         called only by the delegation owner and provider."
            },
            "functionSelector": "4ec0a9fe",
            "id": 12979,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unstakeKeep",
            "nameLocation": "10104:11:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12977,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12976,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "10124:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12979,
                  "src": "10116:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12975,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10116:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10115:25:31"
            },
            "returnParameters": {
              "id": 12978,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10149:0:31"
            },
            "scope": 13145,
            "src": "10095:55:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12980,
              "nodeType": "StructuredDocumentation",
              "src": "10156:735:31",
              "text": "@notice Reduces cached legacy NU stake amount by the provided amount.\n         Reverts if there is at least one authorization higher than the\n         sum of remaining legacy NU stake and liquid T stake for that\n         provider or if the untaked amount is higher than the cached\n         legacy stake amount. If succeeded, the legacy NU stake can be\n         partially or fully undelegated on the legacy staking contract.\n         This function allows to unstake from NU staking contract and\n         still being able to operate in T network and earning rewards\n         based on the liquid T staked. Can be called only by the\n         delegation owner and provider."
            },
            "functionSelector": "58ccdf38",
            "id": 12987,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unstakeNu",
            "nameLocation": "10905:9:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12982,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "10923:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12987,
                  "src": "10915:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12981,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10915:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12984,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10947:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12987,
                  "src": "10940:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 12983,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "10940:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10914:40:31"
            },
            "returnParameters": {
              "id": 12986,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10963:0:31"
            },
            "scope": 13145,
            "src": "10896:68:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12988,
              "nodeType": "StructuredDocumentation",
              "src": "10970:303:31",
              "text": "@notice Sets cached legacy stake amount to 0, sets the liquid T stake\n         amount to 0 and withdraws all liquid T from the stake to the\n         owner. Reverts if there is at least one non-zero authorization.\n         Can be called only by the delegation owner and provider."
            },
            "functionSelector": "a0d6ff9a",
            "id": 12993,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unstakeAll",
            "nameLocation": "11287:10:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12991,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12990,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "11306:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12993,
                  "src": "11298:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12989,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11298:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11297:25:31"
            },
            "returnParameters": {
              "id": 12992,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11331:0:31"
            },
            "scope": 13145,
            "src": "11278:54:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12994,
              "nodeType": "StructuredDocumentation",
              "src": "11402:525:31",
              "text": "@notice Notifies about the discrepancy between legacy KEEP active stake\n         and the amount cached in T staking contract. Slashes the provider\n         in case the amount cached is higher than the actual active stake\n         amount in KEEP staking contract. Needs to update authorizations\n         of all affected applications and execute an involuntary\n         allocation decrease on all affected applications. Can be called\n         by anyone, notifier receives a reward."
            },
            "functionSelector": "402121af",
            "id": 12999,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyKeepStakeDiscrepancy",
            "nameLocation": "11941:26:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12996,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "11976:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12999,
                  "src": "11968:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12995,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11968:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11967:25:31"
            },
            "returnParameters": {
              "id": 12998,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12001:0:31"
            },
            "scope": 13145,
            "src": "11932:70:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13000,
              "nodeType": "StructuredDocumentation",
              "src": "12008:521:31",
              "text": "@notice Notifies about the discrepancy between legacy NU active stake\n         and the amount cached in T staking contract. Slashes the\n         provider in case the amount cached is higher than the actual\n         active stake amount in NU staking contract. Needs to update\n         authorizations of all affected applications and execute an\n         involuntary allocation decrease on all affected applications.\n         Can be called by anyone, notifier receives a reward."
            },
            "functionSelector": "8e46ecb6",
            "id": 13005,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyNuStakeDiscrepancy",
            "nameLocation": "12543:24:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13002,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "12576:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13005,
                  "src": "12568:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13001,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12568:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12567:25:31"
            },
            "returnParameters": {
              "id": 13004,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12601:0:31"
            },
            "scope": 13145,
            "src": "12534:68:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13006,
              "nodeType": "StructuredDocumentation",
              "src": "12608:380:31",
              "text": "@notice Sets the penalty amount for stake discrepancy and reward\n         multiplier for reporting it. The penalty is seized from the\n         provider account, and 5% of the penalty, scaled by the\n         multiplier, is given to the notifier. The rest of the tokens are\n         burned. Can only be called by the Governance. See `seize` function."
            },
            "functionSelector": "7d0379f0",
            "id": 13013,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setStakeDiscrepancyPenalty",
            "nameLocation": "13002:26:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13011,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13008,
                  "mutability": "mutable",
                  "name": "penalty",
                  "nameLocation": "13045:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13013,
                  "src": "13038:14:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13007,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "13038:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13010,
                  "mutability": "mutable",
                  "name": "rewardMultiplier",
                  "nameLocation": "13070:16:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13013,
                  "src": "13062:24:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13009,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13062:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13028:64:31"
            },
            "returnParameters": {
              "id": 13012,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13101:0:31"
            },
            "scope": 13145,
            "src": "12993:109:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13014,
              "nodeType": "StructuredDocumentation",
              "src": "13108:139:31",
              "text": "@notice Sets reward in T tokens for notification of misbehaviour\n         of one provider. Can only be called by the governance."
            },
            "functionSelector": "d3e25ef3",
            "id": 13019,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setNotificationReward",
            "nameLocation": "13261:21:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13017,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13016,
                  "mutability": "mutable",
                  "name": "reward",
                  "nameLocation": "13290:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13019,
                  "src": "13283:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13015,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "13283:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13282:15:31"
            },
            "returnParameters": {
              "id": 13018,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13306:0:31"
            },
            "scope": 13145,
            "src": "13252:55:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13020,
              "nodeType": "StructuredDocumentation",
              "src": "13313:104:31",
              "text": "@notice Transfer some amount of T tokens as reward for notifications\n         of misbehaviour"
            },
            "functionSelector": "483046bb",
            "id": 13025,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pushNotificationReward",
            "nameLocation": "13431:22:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13023,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13022,
                  "mutability": "mutable",
                  "name": "reward",
                  "nameLocation": "13461:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13025,
                  "src": "13454:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13021,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "13454:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13453:15:31"
            },
            "returnParameters": {
              "id": 13024,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13477:0:31"
            },
            "scope": 13145,
            "src": "13422:56:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13026,
              "nodeType": "StructuredDocumentation",
              "src": "13484:123:31",
              "text": "@notice Withdraw some amount of T tokens from notifiers treasury.\n         Can only be called by the governance."
            },
            "functionSelector": "6d9b9a34",
            "id": 13033,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawNotificationReward",
            "nameLocation": "13621:26:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13031,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13028,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "13656:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13033,
                  "src": "13648:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13027,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13648:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13030,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "13674:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13033,
                  "src": "13667:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13029,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "13667:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13647:34:31"
            },
            "returnParameters": {
              "id": 13032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13698:0:31"
            },
            "scope": 13145,
            "src": "13612:87:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13034,
              "nodeType": "StructuredDocumentation",
              "src": "13705:225:31",
              "text": "@notice Adds providers to the slashing queue along with the amount that\n         should be slashed from each one of them. Can only be called by\n         application authorized for all providers in the array."
            },
            "functionSelector": "f07f91c5",
            "id": 13042,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "slash",
            "nameLocation": "13944:5:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13036,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "13957:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13042,
                  "src": "13950:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13035,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "13950:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13039,
                  "mutability": "mutable",
                  "name": "stakingProviders",
                  "nameLocation": "13982:16:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13042,
                  "src": "13965:33:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 13037,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "13965:7:31",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 13038,
                    "nodeType": "ArrayTypeName",
                    "src": "13965:9:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13949:50:31"
            },
            "returnParameters": {
              "id": 13041,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14008:0:31"
            },
            "scope": 13145,
            "src": "13935:74:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13043,
              "nodeType": "StructuredDocumentation",
              "src": "14015:272:31",
              "text": "@notice Adds providers to the slashing queue along with the amount.\n         The notifier will receive reward per each provider from\n         notifiers treasury. Can only be called by application\n         authorized for all providers in the array."
            },
            "functionSelector": "83ddba8f",
            "id": 13055,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "seize",
            "nameLocation": "14301:5:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13053,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13045,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14323:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13055,
                  "src": "14316:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13044,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "14316:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13047,
                  "mutability": "mutable",
                  "name": "rewardMultipier",
                  "nameLocation": "14347:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13055,
                  "src": "14339:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13046,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14339:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13049,
                  "mutability": "mutable",
                  "name": "notifier",
                  "nameLocation": "14380:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13055,
                  "src": "14372:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13048,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14372:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13052,
                  "mutability": "mutable",
                  "name": "stakingProviders",
                  "nameLocation": "14415:16:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13055,
                  "src": "14398:33:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 13050,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "14398:7:31",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 13051,
                    "nodeType": "ArrayTypeName",
                    "src": "14398:9:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14306:131:31"
            },
            "returnParameters": {
              "id": 13054,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14446:0:31"
            },
            "scope": 13145,
            "src": "14292:155:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13056,
              "nodeType": "StructuredDocumentation",
              "src": "14453:247:31",
              "text": "@notice Takes the given number of queued slashing operations and\n         processes them. Receives 5% of the slashed amount.\n         Executes `involuntaryAllocationDecrease` function on each\n         affected application."
            },
            "functionSelector": "be2f3351",
            "id": 13061,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "processSlashing",
            "nameLocation": "14714:15:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13059,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13058,
                  "mutability": "mutable",
                  "name": "count",
                  "nameLocation": "14738:5:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13061,
                  "src": "14730:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13057,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14730:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14729:15:31"
            },
            "returnParameters": {
              "id": 13060,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14753:0:31"
            },
            "scope": 13145,
            "src": "14705:49:31",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13062,
              "nodeType": "StructuredDocumentation",
              "src": "14816:100:31",
              "text": "@notice Returns the authorized stake amount of the provider for the\n         application."
            },
            "functionSelector": "e009245a",
            "id": 13071,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authorizedStake",
            "nameLocation": "14930:15:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13067,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13064,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "14954:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13071,
                  "src": "14946:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13063,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14946:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13066,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "14979:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13071,
                  "src": "14971:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13065,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14971:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14945:46:31"
            },
            "returnParameters": {
              "id": 13070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13069,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13071,
                  "src": "15039:6:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13068,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "15039:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15038:8:31"
            },
            "scope": 13145,
            "src": "14921:126:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13072,
              "nodeType": "StructuredDocumentation",
              "src": "15053:152:31",
              "text": "@notice Returns staked amount of T, Keep and Nu for the specified\n         staking provider.\n @dev    All values are in T denomination"
            },
            "functionSelector": "16934fc4",
            "id": 13083,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stakes",
            "nameLocation": "15219:6:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13074,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "15234:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13083,
                  "src": "15226:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13073,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15226:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15225:25:31"
            },
            "returnParameters": {
              "id": 13082,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13077,
                  "mutability": "mutable",
                  "name": "tStake",
                  "nameLocation": "15318:6:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13083,
                  "src": "15311:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13076,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "15311:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13079,
                  "mutability": "mutable",
                  "name": "keepInTStake",
                  "nameLocation": "15345:12:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13083,
                  "src": "15338:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13078,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "15338:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13081,
                  "mutability": "mutable",
                  "name": "nuInTStake",
                  "nameLocation": "15378:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13083,
                  "src": "15371:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13080,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "15371:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15297:101:31"
            },
            "scope": 13145,
            "src": "15210:189:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13084,
              "nodeType": "StructuredDocumentation",
              "src": "15405:272:31",
              "text": "@notice Returns start staking timestamp for T/NU stake.\n @dev    This value is set at most once, and only when a stake is created\n         with T or NU tokens. If a stake is created from a legacy KEEP\n         stake, this value will remain as zero"
            },
            "functionSelector": "f6e0faeb",
            "id": 13091,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStartStakingTimestamp",
            "nameLocation": "15691:24:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13087,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13086,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "15724:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13091,
                  "src": "15716:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13085,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15716:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15715:25:31"
            },
            "returnParameters": {
              "id": 13090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13089,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13091,
                  "src": "15788:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13088,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15788:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15787:9:31"
            },
            "scope": 13145,
            "src": "15682:115:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13092,
              "nodeType": "StructuredDocumentation",
              "src": "15803:66:31",
              "text": "@notice Returns staked amount of NU for the specified provider"
            },
            "functionSelector": "4a11fae3",
            "id": 13099,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stakedNu",
            "nameLocation": "15883:8:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13095,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13094,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "15900:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13099,
                  "src": "15892:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13093,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15892:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15891:25:31"
            },
            "returnParameters": {
              "id": 13098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13097,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13099,
                  "src": "15940:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15940:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15939:9:31"
            },
            "scope": 13145,
            "src": "15874:75:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13100,
              "nodeType": "StructuredDocumentation",
              "src": "15955:259:31",
              "text": "@notice Gets the stake owner, the beneficiary and the authorizer\n         for the specified provider address.\n @return owner Stake owner address.\n @return beneficiary Beneficiary address.\n @return authorizer Authorizer address."
            },
            "functionSelector": "2de94807",
            "id": 13111,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rolesOf",
            "nameLocation": "16228:7:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13102,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "16244:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13111,
                  "src": "16236:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13101,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16236:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16235:25:31"
            },
            "returnParameters": {
              "id": 13110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13105,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "16329:5:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13111,
                  "src": "16321:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13104,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16321:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13107,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "16364:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13111,
                  "src": "16348:27:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 13106,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16348:15:31",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13109,
                  "mutability": "mutable",
                  "name": "authorizer",
                  "nameLocation": "16397:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13111,
                  "src": "16389:18:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13108,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16389:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16307:110:31"
            },
            "scope": 13145,
            "src": "16219:199:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13112,
              "nodeType": "StructuredDocumentation",
              "src": "16424:47:31",
              "text": "@notice Returns length of application array"
            },
            "functionSelector": "ad30e4cd",
            "id": 13117,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getApplicationsLength",
            "nameLocation": "16485:21:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13113,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16506:2:31"
            },
            "returnParameters": {
              "id": 13116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13115,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13117,
                  "src": "16532:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13114,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16532:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16531:9:31"
            },
            "scope": 13145,
            "src": "16476:65:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13118,
              "nodeType": "StructuredDocumentation",
              "src": "16547:44:31",
              "text": "@notice Returns length of slashing queue"
            },
            "functionSelector": "ffd2f984",
            "id": 13123,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSlashingQueueLength",
            "nameLocation": "16605:22:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13119,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16627:2:31"
            },
            "returnParameters": {
              "id": 13122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13121,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13123,
                  "src": "16653:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13120,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16653:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16652:9:31"
            },
            "scope": 13145,
            "src": "16596:66:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13124,
              "nodeType": "StructuredDocumentation",
              "src": "16668:1015:31",
              "text": "@notice Returns minimum possible stake for T, KEEP or NU in T denomination\n @dev For example, suppose the given provider has 10 T, 20 T worth\n      of KEEP, and 30 T worth of NU all staked, and the maximum\n      application authorization is 40 T, then `getMinStaked` for\n      that provider returns:\n          * 0 T if KEEP stake type specified i.e.\n            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\n          * 10 T if NU stake type specified i.e.\n            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\n          * 0 T if T stake type specified i.e.\n            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\n      In other words, the minimum stake amount for the specified\n      stake type is the minimum amount of stake of the given type\n      needed to satisfy the maximum application authorization given\n      the staked amounts of the other stake types for that provider."
            },
            "functionSelector": "6da91d8b",
            "id": 13134,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMinStaked",
            "nameLocation": "17697:12:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13126,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "17718:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13134,
                  "src": "17710:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13125,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17710:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13129,
                  "mutability": "mutable",
                  "name": "stakeTypes",
                  "nameLocation": "17745:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13134,
                  "src": "17735:20:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_StakeType_$12831",
                    "typeString": "enum IStaking.StakeType"
                  },
                  "typeName": {
                    "id": 13128,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 13127,
                      "name": "StakeType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12831,
                      "src": "17735:9:31"
                    },
                    "referencedDeclaration": 12831,
                    "src": "17735:9:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_StakeType_$12831",
                      "typeString": "enum IStaking.StakeType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17709:47:31"
            },
            "returnParameters": {
              "id": 13133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13132,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13134,
                  "src": "17804:6:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13131,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "17804:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17803:8:31"
            },
            "scope": 13145,
            "src": "17688:124:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 13135,
              "nodeType": "StructuredDocumentation",
              "src": "17818:79:31",
              "text": "@notice Returns available amount to authorize for the specified application"
            },
            "functionSelector": "8b7adc09",
            "id": 13144,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAvailableToAuthorize",
            "nameLocation": "17911:23:31",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13140,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13137,
                  "mutability": "mutable",
                  "name": "stakingProvider",
                  "nameLocation": "17952:15:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13144,
                  "src": "17944:23:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13136,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17944:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13139,
                  "mutability": "mutable",
                  "name": "application",
                  "nameLocation": "17985:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 13144,
                  "src": "17977:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13138,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17977:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17934:68:31"
            },
            "returnParameters": {
              "id": 13143,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13142,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13144,
                  "src": "18026:6:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 13141,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "18026:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18025:8:31"
            },
            "scope": 13145,
            "src": "17902:132:31",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 13146,
        "src": "1509:16527:31",
        "usedErrors": []
      }
    ],
    "src": "975:17062:31"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "IStaking",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "approveApplication(address)": {
        "notice": "Allows the Governance to approve the particular application         before individual stake authorizers are able to authorize it."
      },
      "approveAuthorizationDecrease(address)": {
        "notice": "Called by the application at its discretion to approve the         previously requested authorization decrease request. Can only be         called by the application that was previously requested to         decrease the authorization for that provider.         Returns resulting authorized amount for the application."
      },
      "authorizedStake(address,address)": {
        "notice": "Returns the authorized stake amount of the provider for the         application."
      },
      "disableApplication(address)": {
        "notice": "Disables the given application. The disabled application can't         slash stakers. Also stakers can't increase authorization to that         application but can decrease without waiting by calling         `requestAuthorizationDecrease` at any moment. Can be called only         by the governance. The disabled application can't be approved         again. Should be used only in case of an emergency."
      },
      "forceDecreaseAuthorization(address,address)": {
        "notice": "Decreases the authorization for the given `stakingProvider` on         the given disabled `application`, for all authorized amount.         Can be called by anyone."
      },
      "getApplicationsLength()": {
        "notice": "Returns length of application array"
      },
      "getAvailableToAuthorize(address,address)": {
        "notice": "Returns available amount to authorize for the specified application"
      },
      "getMinStaked(address,uint8)": {
        "details": "For example, suppose the given provider has 10 T, 20 T worth      of KEEP, and 30 T worth of NU all staked, and the maximum      application authorization is 40 T, then `getMinStaked` for      that provider returns:          * 0 T if KEEP stake type specified i.e.            min = 40 T max - (10 T + 30 T worth of NU) = 0 T          * 10 T if NU stake type specified i.e.            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T          * 0 T if T stake type specified i.e.            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T      In other words, the minimum stake amount for the specified      stake type is the minimum amount of stake of the given type      needed to satisfy the maximum application authorization given      the staked amounts of the other stake types for that provider.",
        "notice": "Returns minimum possible stake for T, KEEP or NU in T denomination"
      },
      "getSlashingQueueLength()": {
        "notice": "Returns length of slashing queue"
      },
      "getStartStakingTimestamp(address)": {
        "details": "This value is set at most once, and only when a stake is created         with T or NU tokens. If a stake is created from a legacy KEEP         stake, this value will remain as zero",
        "notice": "Returns start staking timestamp for T/NU stake."
      },
      "increaseAuthorization(address,address,uint96)": {
        "details": "Calls `authorizationIncreased(address stakingProvider, uint256 amount)`      on the given application to notify the application about      authorization change. See `IApplication`.",
        "notice": "Increases the authorization of the given provider for the given         application by the given amount. Can only be called by the given         provider\u2019s authorizer."
      },
      "notifyKeepStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy KEEP active stake         and the amount cached in T staking contract. Slashes the provider         in case the amount cached is higher than the actual active stake         amount in KEEP staking contract. Needs to update authorizations         of all affected applications and execute an involuntary         allocation decrease on all affected applications. Can be called         by anyone, notifier receives a reward."
      },
      "notifyNuStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy NU active stake         and the amount cached in T staking contract. Slashes the         provider in case the amount cached is higher than the actual         active stake amount in NU staking contract. Needs to update         authorizations of all affected applications and execute an         involuntary allocation decrease on all affected applications.         Can be called by anyone, notifier receives a reward."
      },
      "pauseApplication(address)": {
        "notice": "Pauses the given application\u2019s eligibility to slash stakes.         Besides that stakers can't change authorization to the application.         Can be called only by the Panic Button of the particular         application. The paused application can not slash stakes until         it is approved again by the Governance using `approveApplication`         function. Should be used only in case of an emergency."
      },
      "processSlashing(uint256)": {
        "notice": "Takes the given number of queued slashing operations and         processes them. Receives 5% of the slashed amount.         Executes `involuntaryAllocationDecrease` function on each         affected application."
      },
      "pushNotificationReward(uint96)": {
        "notice": "Transfer some amount of T tokens as reward for notifications         of misbehaviour"
      },
      "refreshKeepStakeOwner(address)": {
        "notice": "Refresh Keep stake owner. Can be called only by the old owner."
      },
      "requestAuthorizationDecrease(address)": {
        "details": "Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`      for each authorized application. See `IApplication`.",
        "notice": "Requests decrease of all authorizations for the given provider on         the applications by all authorized amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given provider\u2019s authorizer. Overwrites pending authorization         decrease for the given provider and application."
      },
      "requestAuthorizationDecrease(address,address,uint96)": {
        "details": "Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`      on the given application. See `IApplication`.",
        "notice": "Requests decrease of the authorization for the given provider on         the given application by the provided amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given provider\u2019s authorizer. Overwrites pending authorization         decrease for the given provider and application."
      },
      "rolesOf(address)": {
        "notice": "Gets the stake owner, the beneficiary and the authorizer         for the specified provider address.",
        "returns": {
          "authorizer": "Authorizer address.",
          "beneficiary": "Beneficiary address.",
          "owner": "Stake owner address."
        }
      },
      "seize(uint96,uint256,address,address[])": {
        "notice": "Adds providers to the slashing queue along with the amount.         The notifier will receive reward per each provider from         notifiers treasury. Can only be called by application         authorized for all providers in the array."
      },
      "setAuthorizationCeiling(uint256)": {
        "notice": "Sets the maximum number of applications one provider can         authorize. Used to protect against DoSing slashing queue.         Can only be called by the Governance."
      },
      "setMinimumStakeAmount(uint96)": {
        "notice": "Allows the Governance to set the minimum required stake amount.         This amount is required to protect against griefing the staking         contract and individual applications are allowed to require         higher minimum stakes if necessary."
      },
      "setNotificationReward(uint96)": {
        "notice": "Sets reward in T tokens for notification of misbehaviour         of one provider. Can only be called by the governance."
      },
      "setPanicButton(address,address)": {
        "notice": "Sets the Panic Button role for the given application to the         provided address. Can only be called by the Governance. If the         Panic Button for the given application should be disabled, the         role address should be set to 0x0 address."
      },
      "setStakeDiscrepancyPenalty(uint96,uint256)": {
        "notice": "Sets the penalty amount for stake discrepancy and reward         multiplier for reporting it. The penalty is seized from the         provider account, and 5% of the penalty, scaled by the         multiplier, is given to the notifier. The rest of the tokens are         burned. Can only be called by the Governance. See `seize` function."
      },
      "slash(uint96,address[])": {
        "notice": "Adds providers to the slashing queue along with the amount that         should be slashed from each one of them. Can only be called by         application authorized for all providers in the array."
      },
      "stake(address,address,address,uint96)": {
        "details": "The owner of the delegation needs to have the amount approved to      transfer to the staking contract.",
        "notice": "Creates a delegation with `msg.sender` owner with the given         provider, beneficiary, and authorizer. Transfers the given         amount of T to the staking contract."
      },
      "stakeKeep(address)": {
        "notice": "Copies delegation from the legacy KEEP staking contract to T         staking contract. No tokens are transferred. Caches the active         stake amount from KEEP staking contract. Can be called by         anyone."
      },
      "stakeNu(address,address,address)": {
        "notice": "Copies delegation from the legacy NU staking contract to T         staking contract, additionally appointing beneficiary and         authorizer roles. Caches the amount staked in NU staking         contract. Can be called only by the original delegation owner."
      },
      "stakedNu(address)": {
        "notice": "Returns staked amount of NU for the specified provider"
      },
      "stakes(address)": {
        "details": "All values are in T denomination",
        "notice": "Returns staked amount of T, Keep and Nu for the specified         staking provider."
      },
      "topUp(address,uint96)": {
        "details": "The sender of this transaction needs to have the amount approved to      transfer to the staking contract.",
        "notice": "Increases the amount of the stake for the given provider.         Can be called only by the owner or provider."
      },
      "topUpKeep(address)": {
        "notice": "Propagates information about stake top-up from the legacy KEEP         staking contract to T staking contract. Can be called only by         the owner or provider."
      },
      "topUpNu(address)": {
        "notice": "Propagates information about stake top-up from the legacy NU         staking contract to T staking contract. Can be called only by         the owner or provider."
      },
      "unstakeAll(address)": {
        "notice": "Sets cached legacy stake amount to 0, sets the liquid T stake         amount to 0 and withdraws all liquid T from the stake to the         owner. Reverts if there is at least one non-zero authorization.         Can be called only by the delegation owner and provider."
      },
      "unstakeKeep(address)": {
        "notice": "Sets the legacy KEEP staking contract active stake amount cached         in T staking contract to 0. Reverts if the amount of liquid T         staked in T staking contract is lower than the highest         application authorization. This function allows to unstake from         KEEP staking contract and still being able to operate in T         network and earning rewards based on the liquid T staked. Can be         called only by the delegation owner and provider."
      },
      "unstakeNu(address,uint96)": {
        "notice": "Reduces cached legacy NU stake amount by the provided amount.         Reverts if there is at least one authorization higher than the         sum of remaining legacy NU stake and liquid T stake for that         provider or if the untaked amount is higher than the cached         legacy stake amount. If succeeded, the legacy NU stake can be         partially or fully undelegated on the legacy staking contract.         This function allows to unstake from NU staking contract and         still being able to operate in T network and earning rewards         based on the liquid T staked. Can be called only by the         delegation owner and provider."
      },
      "unstakeT(address,uint96)": {
        "notice": "Reduces the liquid T stake amount by the provided amount and         withdraws T to the owner. Reverts if there is at least one         authorization higher than the sum of the legacy stake and         remaining liquid T stake or if the unstake amount is higher than         the liquid T stake amount. Can be called only by the owner or         provider."
      },
      "withdrawNotificationReward(address,uint96)": {
        "notice": "Withdraw some amount of T tokens from notifiers treasury.         Can only be called by the governance."
      }
    },
    "notice": "The staking contract enables T owners to have their wallets offline         and their stake managed by providers on their behalf. All off-chain         client software should be able to run without exposing provider\u2019s         private key and should not require any owner\u2019s keys at all.         The stake delegation optimizes the network throughput without         compromising the security of the owners\u2019 stake.",
    "title": "Interface of Threshold Network staking contract",
    "version": 1
  },
  "offset": [
    1509,
    18036
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "2aa4e25b0d29dfcbdc1620135f7db81e7c2cbfad",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\n\npragma solidity ^0.8.0;\n\n/// @title Interface of Threshold Network staking contract\n/// @notice The staking contract enables T owners to have their wallets offline\n///         and their stake managed by providers on their behalf. All off-chain\n///         client software should be able to run without exposing provider\u2019s\n///         private key and should not require any owner\u2019s keys at all.\n///         The stake delegation optimizes the network throughput without\n///         compromising the security of the owners\u2019 stake.\ninterface IStaking {\n    enum StakeType {\n        NU,\n        KEEP,\n        T\n    }\n\n    //\n    //\n    // Delegating a stake\n    //\n    //\n\n    /// @notice Creates a delegation with `msg.sender` owner with the given\n    ///         provider, beneficiary, and authorizer. Transfers the given\n    ///         amount of T to the staking contract.\n    /// @dev The owner of the delegation needs to have the amount approved to\n    ///      transfer to the staking contract.\n    function stake(\n        address stakingProvider,\n        address payable beneficiary,\n        address authorizer,\n        uint96 amount\n    ) external;\n\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\n    ///         staking contract. No tokens are transferred. Caches the active\n    ///         stake amount from KEEP staking contract. Can be called by\n    ///         anyone.\n    function stakeKeep(address stakingProvider) external;\n\n    /// @notice Copies delegation from the legacy NU staking contract to T\n    ///         staking contract, additionally appointing beneficiary and\n    ///         authorizer roles. Caches the amount staked in NU staking\n    ///         contract. Can be called only by the original delegation owner.\n    function stakeNu(\n        address stakingProvider,\n        address payable beneficiary,\n        address authorizer\n    ) external;\n\n    /// @notice Refresh Keep stake owner. Can be called only by the old owner.\n    function refreshKeepStakeOwner(address stakingProvider) external;\n\n    /// @notice Allows the Governance to set the minimum required stake amount.\n    ///         This amount is required to protect against griefing the staking\n    ///         contract and individual applications are allowed to require\n    ///         higher minimum stakes if necessary.\n    function setMinimumStakeAmount(uint96 amount) external;\n\n    //\n    //\n    // Authorizing an application\n    //\n    //\n\n    /// @notice Allows the Governance to approve the particular application\n    ///         before individual stake authorizers are able to authorize it.\n    function approveApplication(address application) external;\n\n    /// @notice Increases the authorization of the given provider for the given\n    ///         application by the given amount. Can only be called by the given\n    ///         provider\u2019s authorizer.\n    /// @dev Calls `authorizationIncreased(address stakingProvider, uint256 amount)`\n    ///      on the given application to notify the application about\n    ///      authorization change. See `IApplication`.\n    function increaseAuthorization(\n        address stakingProvider,\n        address application,\n        uint96 amount\n    ) external;\n\n    /// @notice Requests decrease of the authorization for the given provider on\n    ///         the given application by the provided amount.\n    ///         It may not change the authorized amount immediatelly. When\n    ///         it happens depends on the application. Can only be called by the\n    ///         given provider\u2019s authorizer. Overwrites pending authorization\n    ///         decrease for the given provider and application.\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\n    ///      on the given application. See `IApplication`.\n    function requestAuthorizationDecrease(\n        address stakingProvider,\n        address application,\n        uint96 amount\n    ) external;\n\n    /// @notice Requests decrease of all authorizations for the given provider on\n    ///         the applications by all authorized amount.\n    ///         It may not change the authorized amount immediatelly. When\n    ///         it happens depends on the application. Can only be called by the\n    ///         given provider\u2019s authorizer. Overwrites pending authorization\n    ///         decrease for the given provider and application.\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\n    ///      for each authorized application. See `IApplication`.\n    function requestAuthorizationDecrease(address stakingProvider) external;\n\n    /// @notice Called by the application at its discretion to approve the\n    ///         previously requested authorization decrease request. Can only be\n    ///         called by the application that was previously requested to\n    ///         decrease the authorization for that provider.\n    ///         Returns resulting authorized amount for the application.\n    function approveAuthorizationDecrease(address stakingProvider)\n        external\n        returns (uint96);\n\n    /// @notice Decreases the authorization for the given `stakingProvider` on\n    ///         the given disabled `application`, for all authorized amount.\n    ///         Can be called by anyone.\n    function forceDecreaseAuthorization(\n        address stakingProvider,\n        address application\n    ) external;\n\n    /// @notice Pauses the given application\u2019s eligibility to slash stakes.\n    ///         Besides that stakers can't change authorization to the application.\n    ///         Can be called only by the Panic Button of the particular\n    ///         application. The paused application can not slash stakes until\n    ///         it is approved again by the Governance using `approveApplication`\n    ///         function. Should be used only in case of an emergency.\n    function pauseApplication(address application) external;\n\n    /// @notice Disables the given application. The disabled application can't\n    ///         slash stakers. Also stakers can't increase authorization to that\n    ///         application but can decrease without waiting by calling\n    ///         `requestAuthorizationDecrease` at any moment. Can be called only\n    ///         by the governance. The disabled application can't be approved\n    ///         again. Should be used only in case of an emergency.\n    function disableApplication(address application) external;\n\n    /// @notice Sets the Panic Button role for the given application to the\n    ///         provided address. Can only be called by the Governance. If the\n    ///         Panic Button for the given application should be disabled, the\n    ///         role address should be set to 0x0 address.\n    function setPanicButton(address application, address panicButton) external;\n\n    /// @notice Sets the maximum number of applications one provider can\n    ///         authorize. Used to protect against DoSing slashing queue.\n    ///         Can only be called by the Governance.\n    function setAuthorizationCeiling(uint256 ceiling) external;\n\n    //\n    //\n    // Stake top-up\n    //\n    //\n\n    /// @notice Increases the amount of the stake for the given provider.\n    ///         Can be called only by the owner or provider.\n    /// @dev The sender of this transaction needs to have the amount approved to\n    ///      transfer to the staking contract.\n    function topUp(address stakingProvider, uint96 amount) external;\n\n    /// @notice Propagates information about stake top-up from the legacy KEEP\n    ///         staking contract to T staking contract. Can be called only by\n    ///         the owner or provider.\n    function topUpKeep(address stakingProvider) external;\n\n    /// @notice Propagates information about stake top-up from the legacy NU\n    ///         staking contract to T staking contract. Can be called only by\n    ///         the owner or provider.\n    function topUpNu(address stakingProvider) external;\n\n    //\n    //\n    // Undelegating a stake (unstaking)\n    //\n    //\n\n    /// @notice Reduces the liquid T stake amount by the provided amount and\n    ///         withdraws T to the owner. Reverts if there is at least one\n    ///         authorization higher than the sum of the legacy stake and\n    ///         remaining liquid T stake or if the unstake amount is higher than\n    ///         the liquid T stake amount. Can be called only by the owner or\n    ///         provider.\n    function unstakeT(address stakingProvider, uint96 amount) external;\n\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\n    ///         staked in T staking contract is lower than the highest\n    ///         application authorization. This function allows to unstake from\n    ///         KEEP staking contract and still being able to operate in T\n    ///         network and earning rewards based on the liquid T staked. Can be\n    ///         called only by the delegation owner and provider.\n    function unstakeKeep(address stakingProvider) external;\n\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\n    ///         Reverts if there is at least one authorization higher than the\n    ///         sum of remaining legacy NU stake and liquid T stake for that\n    ///         provider or if the untaked amount is higher than the cached\n    ///         legacy stake amount. If succeeded, the legacy NU stake can be\n    ///         partially or fully undelegated on the legacy staking contract.\n    ///         This function allows to unstake from NU staking contract and\n    ///         still being able to operate in T network and earning rewards\n    ///         based on the liquid T staked. Can be called only by the\n    ///         delegation owner and provider.\n    function unstakeNu(address stakingProvider, uint96 amount) external;\n\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\n    ///         amount to 0 and withdraws all liquid T from the stake to the\n    ///         owner. Reverts if there is at least one non-zero authorization.\n    ///         Can be called only by the delegation owner and provider.\n    function unstakeAll(address stakingProvider) external;\n\n    //\n    //\n    // Keeping information in sync\n    //\n    //\n\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\n    ///         and the amount cached in T staking contract. Slashes the provider\n    ///         in case the amount cached is higher than the actual active stake\n    ///         amount in KEEP staking contract. Needs to update authorizations\n    ///         of all affected applications and execute an involuntary\n    ///         allocation decrease on all affected applications. Can be called\n    ///         by anyone, notifier receives a reward.\n    function notifyKeepStakeDiscrepancy(address stakingProvider) external;\n\n    /// @notice Notifies about the discrepancy between legacy NU active stake\n    ///         and the amount cached in T staking contract. Slashes the\n    ///         provider in case the amount cached is higher than the actual\n    ///         active stake amount in NU staking contract. Needs to update\n    ///         authorizations of all affected applications and execute an\n    ///         involuntary allocation decrease on all affected applications.\n    ///         Can be called by anyone, notifier receives a reward.\n    function notifyNuStakeDiscrepancy(address stakingProvider) external;\n\n    /// @notice Sets the penalty amount for stake discrepancy and reward\n    ///         multiplier for reporting it. The penalty is seized from the\n    ///         provider account, and 5% of the penalty, scaled by the\n    ///         multiplier, is given to the notifier. The rest of the tokens are\n    ///         burned. Can only be called by the Governance. See `seize` function.\n    function setStakeDiscrepancyPenalty(\n        uint96 penalty,\n        uint256 rewardMultiplier\n    ) external;\n\n    /// @notice Sets reward in T tokens for notification of misbehaviour\n    ///         of one provider. Can only be called by the governance.\n    function setNotificationReward(uint96 reward) external;\n\n    /// @notice Transfer some amount of T tokens as reward for notifications\n    ///         of misbehaviour\n    function pushNotificationReward(uint96 reward) external;\n\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\n    ///         Can only be called by the governance.\n    function withdrawNotificationReward(address recipient, uint96 amount)\n        external;\n\n    /// @notice Adds providers to the slashing queue along with the amount that\n    ///         should be slashed from each one of them. Can only be called by\n    ///         application authorized for all providers in the array.\n    function slash(uint96 amount, address[] memory stakingProviders) external;\n\n    /// @notice Adds providers to the slashing queue along with the amount.\n    ///         The notifier will receive reward per each provider from\n    ///         notifiers treasury. Can only be called by application\n    ///         authorized for all providers in the array.\n    function seize(\n        uint96 amount,\n        uint256 rewardMultipier,\n        address notifier,\n        address[] memory stakingProviders\n    ) external;\n\n    /// @notice Takes the given number of queued slashing operations and\n    ///         processes them. Receives 5% of the slashed amount.\n    ///         Executes `involuntaryAllocationDecrease` function on each\n    ///         affected application.\n    function processSlashing(uint256 count) external;\n\n    //\n    //\n    // Auxiliary functions\n    //\n    //\n\n    /// @notice Returns the authorized stake amount of the provider for the\n    ///         application.\n    function authorizedStake(address stakingProvider, address application)\n        external\n        view\n        returns (uint96);\n\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\n    ///         staking provider.\n    /// @dev    All values are in T denomination\n    function stakes(address stakingProvider)\n        external\n        view\n        returns (\n            uint96 tStake,\n            uint96 keepInTStake,\n            uint96 nuInTStake\n        );\n\n    /// @notice Returns start staking timestamp for T/NU stake.\n    /// @dev    This value is set at most once, and only when a stake is created\n    ///         with T or NU tokens. If a stake is created from a legacy KEEP\n    ///         stake, this value will remain as zero\n    function getStartStakingTimestamp(address stakingProvider)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns staked amount of NU for the specified provider\n    function stakedNu(address stakingProvider) external view returns (uint256);\n\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\n    ///         for the specified provider address.\n    /// @return owner Stake owner address.\n    /// @return beneficiary Beneficiary address.\n    /// @return authorizer Authorizer address.\n    function rolesOf(address stakingProvider)\n        external\n        view\n        returns (\n            address owner,\n            address payable beneficiary,\n            address authorizer\n        );\n\n    /// @notice Returns length of application array\n    function getApplicationsLength() external view returns (uint256);\n\n    /// @notice Returns length of slashing queue\n    function getSlashingQueueLength() external view returns (uint256);\n\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T denomination\n    /// @dev For example, suppose the given provider has 10 T, 20 T worth\n    ///      of KEEP, and 30 T worth of NU all staked, and the maximum\n    ///      application authorization is 40 T, then `getMinStaked` for\n    ///      that provider returns:\n    ///          * 0 T if KEEP stake type specified i.e.\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\n    ///          * 10 T if NU stake type specified i.e.\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\n    ///          * 0 T if T stake type specified i.e.\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\n    ///      In other words, the minimum stake amount for the specified\n    ///      stake type is the minimum amount of stake of the given type\n    ///      needed to satisfy the maximum application authorization given\n    ///      the staked amounts of the other stake types for that provider.\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\n        external\n        view\n        returns (uint96);\n\n    /// @notice Returns available amount to authorize for the specified application\n    function getAvailableToAuthorize(\n        address stakingProvider,\n        address application\n    ) external view returns (uint96);\n}\n",
  "sourceMap": "",
  "sourcePath": "contracts/threshold/IStaking.sol",
  "type": "interface"
}